[
    {
        "name": "Admin-extensions.md1",
        "title": "Admin extensions",
        "content_html": "<p>The admin panel was designed to be very flexible in customization and has not a simple interface logic and the extension system has the entire structure of embedding into the admin panel systems, to make it easier for you, I added console commands that allow you to generate a local extension with a service provider and other control files.<\/p>\n<ul>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-scheduling\">bfg\/admin-scheduling<\/a> - a package for managing scheduled tasks in the admin panel.<\/li>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-phpinfo\">bfg\/admin-phpinfo<\/a> - a package for displaying PHP information in the admin panel.<\/li>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-failed-jobs\">bfg\/admin-failed-jobs<\/a> - a package for managing failed jobs in the admin panel.<\/li>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-audit\">bfg\/admin-audit<\/a> - a package for managing audit logs in the admin panel.<\/li>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-disqus\">bfg\/admin-disqus<\/a> - a package for managing Disqus comments in the admin panel.<\/li>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-configs\">bfg\/admin-configs<\/a> - a package for managing configurations in the admin panel.<\/li>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-composer-viewer\">bfg\/admin-composer-viewer<\/a> - a package for viewing composer packages in the admin panel.<\/li>\n<li>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin-exception-reporter\">bfg\/admin-exception-reporter<\/a> - a package for managing exceptions in the admin panel.<\/li>\n<\/ul>\n<h2>Coming soon<\/h2>\n<ul>\n<li>[admin-address] - a package for managing addresses in the admin panel.<\/li>\n<li>[admin-blog] - a package for managing blogs in the admin panel.<\/li>\n<li>[admin-comment] - a package for managing comments in the admin panel.<\/li>\n<li>[admin-custom-page] - a package for managing custom pages in the admin panel.<\/li>\n<li>[admin-favorite] - a package for managing favorites in the admin panel.<\/li>\n<li>[admin-seo] - a package for managing SEO in the admin panel.<\/li>\n<li>[admin-shopify] - a package for managing Shopify in the admin panel.<\/li>\n<li>[admin-users] - a package for managing users in the admin panel.<\/li>\n<\/ul>\n<h2>Planned expansions<\/h2>\n<ul>\n<li>[File Manager] - file system management module, with inputs for selecting a file through the file manager.<\/li>\n<li>[Translate Manager] - module for control and editing of language libraries.<\/li>\n<li>[Personal Chat] - personal chat for admin panel users.<\/li>\n<li>[Company Manager] - a module for adding and managing companies of the standard user model.<\/li>\n<li>[User Personals Manager] - a module for adding and managing personal data of the standard user model.<\/li>\n<li>[Payment System Manager] - a module for adding and controlling payment systems in relation to the standard user model.<\/li>\n<\/ul>\n",
        "content_md": "\nThe admin panel was designed to be very flexible in customization and has not a simple interface logic and the extension system has the entire structure of embedding into the admin panel systems, to make it easier for you, I added console commands that allow you to generate a local extension with a service provider and other control files.\n\n- [bfg\/admin-scheduling](https:\/\/packagist.org\/packages\/bfg\/admin-scheduling) - a package for managing scheduled tasks in the admin panel.\n- [bfg\/admin-phpinfo](https:\/\/packagist.org\/packages\/bfg\/admin-phpinfo) - a package for displaying PHP information in the admin panel.\n- [bfg\/admin-failed-jobs](https:\/\/packagist.org\/packages\/bfg\/admin-failed-jobs) - a package for managing failed jobs in the admin panel.\n- [bfg\/admin-audit](https:\/\/packagist.org\/packages\/bfg\/admin-audit) - a package for managing audit logs in the admin panel.\n- [bfg\/admin-disqus](https:\/\/packagist.org\/packages\/bfg\/admin-disqus) - a package for managing Disqus comments in the admin panel.\n- [bfg\/admin-configs](https:\/\/packagist.org\/packages\/bfg\/admin-configs) - a package for managing configurations in the admin panel.\n- [bfg\/admin-composer-viewer](https:\/\/packagist.org\/packages\/bfg\/admin-composer-viewer) - a package for viewing composer packages in the admin panel.\n- [bfg\/admin-exception-reporter](https:\/\/packagist.org\/packages\/bfg\/admin-exception-reporter) - a package for managing exceptions in the admin panel.\n\n## Coming soon\n- [admin-address] - a package for managing addresses in the admin panel.\n- [admin-blog] - a package for managing blogs in the admin panel.\n- [admin-comment] - a package for managing comments in the admin panel.\n- [admin-custom-page] - a package for managing custom pages in the admin panel.\n- [admin-favorite] - a package for managing favorites in the admin panel.\n- [admin-seo] - a package for managing SEO in the admin panel.\n- [admin-shopify] - a package for managing Shopify in the admin panel.\n- [admin-users] - a package for managing users in the admin panel.\n\n## Planned expansions\n\n- [File Manager] - file system management module, with inputs for selecting a file through the file manager.\n- [Translate Manager] - module for control and editing of language libraries.\n- [Personal Chat] - personal chat for admin panel users.\n- [Company Manager] - a module for adding and managing companies of the standard user model.\n- [User Personals Manager] - a module for adding and managing personal data of the standard user model.\n- [Payment System Manager] - a module for adding and controlling payment systems in relation to the standard user model.\n"
    },
    {
        "name": "Alert.md",
        "title": "Alert",
        "content_html": "<p>Is a separate component of the deligator class <code>\\Admin\\Delegates\\Alert<\/code>. To create a widget for displaying various kinds of messages using the <code>Alert<\/code> component, you can follow this example:<\/p>\n<pre><code class=\"language-php\">use Admin\\Delegates\\Alert;\n\nreturn $page-&gt;card(\n\t$card-&gt;alert(\n\t\t$alert-&gt;warningType(),\n\t\t$alert-&gt;icon_users(),\n\t\t$alert-&gt;title('Warning!'),\n\t\t$alert-&gt;body('Join to team!'),\n\t),\n)\n<\/code><\/pre>\n<p>This code sets up an Alert component to display a warning message with an icon and a custom title and body text. You can adjust the alert type, icon, title, and body according to your specific message requirements.<\/p>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nIs a separate component of the deligator class `\\Admin\\Delegates\\Alert`. To create a widget for displaying various kinds of messages using the `Alert` component, you can follow this example:\n```php\nuse Admin\\Delegates\\Alert;\n\nreturn $page->card(\n\t$card->alert(\n\t\t$alert->warningType(),\n\t\t$alert->icon_users(),\n\t\t$alert->title('Warning!'),\n\t\t$alert->body('Join to team!'),\n\t),\n)\n```\nThis code sets up an Alert component to display a warning message with an icon and a custom title and body text. You can adjust the alert type, icon, title, and body according to your specific message requirements.\n\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Amount.md",
        "title": "Amount",
        "content_html": "<p>This input field is specifically designed for entering numerical values with decimal points, such as prices, quantities, or measurements. It allows users to input floating-point numbers accurately and efficiently.<\/p>\n<pre><code class=\"language-php\">$form-&gt;amount('price', 'Product price')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis input field is specifically designed for entering numerical values with decimal points, such as prices, quantities, or measurements. It allows users to input floating-point numbers accurately and efficiently.\n```php\n$form->amount('price', 'Product price')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Application-files.md",
        "title": "Application files",
        "content_html": "<p>The admin panel's project structure is thoughtfully organized within the default working folder, located at <code>app\/Admin<\/code> in your Laravel application. This structure is designed to facilitate easy navigation and management of the admin panel's components, enhancing the overall development experience.<\/p>\n<h3>Project File Structure<\/h3>\n<p>Below is an overview of the admin panel's project file system structure:<\/p>\n<pre><code>app\/Admin\/\n\tControllers\/\n\tConfig.php\n\tNavigator.php\napp\/Providers\/\n\tAdminServiceProvider.php\ndatabase\/migrations\/\n\t2020_01_01_000000_create_table_admin_users.php\n\t2020_01_01_000001_create_table_admin_roles.php\n\t2020_01_01_000002_create_table_admin_role_user.php\n\t2020_01_01_000005_create_table_admin_file_storage.php\n\t2020_01_01_000006_create_table_admin_permission.php\n\t2021_12_10_165136_create_table_admin_log.php\n\t2022_03_25_205530_create_table_admin_menu.php\n\t2022_04_10_193630_create_table_admin_settings.php\npublic\/\n\tadmin\/\n\tadmin-asset\/\nlang\/\n\ten\/admin.php\n\tru\/admin.php\n\tuk\/admin.php\nbootstrap\/\n\tadmin_extensions.php\n<\/code><\/pre>\n<ul>\n<li>\n<code>app\/Admin\/<\/code>: The core directory housing the admin panel's project files.<\/li>\n<li>\n<code>Controllers\/<\/code>: Contains custom controller files for managing application logic.<\/li>\n<li>\n<code>Config.php<\/code>: The main configuration file for the admin panel settings.<\/li>\n<li>\n<code>Navigator.php<\/code>: Manages navigation within the admin panel.<\/li>\n<li>\n<code>app\/Providers\/AdminServiceProvider.php<\/code>: The service provider for the admin panel, responsible for its registration and bootstrapping.<\/li>\n<li>\n<code>database\/migrations\/<\/code>: Contains migration files for setting up the admin panel's database schema.<\/li>\n<li>\n<code>public\/admin\/<\/code>: Contains static assets for the admin panel.<\/li>\n<li>\n<code>public\/admin-asset\/<\/code>: Additional assets for the admin interface.<\/li>\n<li>\n<code>lang\/<\/code>: Localization files for supporting multiple languages in the admin panel.<\/li>\n<li>\n<code>bootstrap\/admin_extensions.php<\/code>: A bootstrap file for loading admin panel extensions.<\/li>\n<\/ul>\n<p>This structured approach to organizing the admin panel's files ensures that developers can efficiently manage and extend the functionality of the admin panel. By familiarizing yourself with this structure, you can effectively navigate the admin panel's components and customize them to fit the needs of your application.<\/p>\n",
        "content_md": "\nThe admin panel's project structure is thoughtfully organized within the default working folder, located at `app\/Admin` in your Laravel application. This structure is designed to facilitate easy navigation and management of the admin panel's components, enhancing the overall development experience.\n\n### Project File Structure\n\nBelow is an overview of the admin panel's project file system structure:\n\n```\napp\/Admin\/\n\tControllers\/\n\tConfig.php\n\tNavigator.php\napp\/Providers\/\n\tAdminServiceProvider.php\ndatabase\/migrations\/\n\t2020_01_01_000000_create_table_admin_users.php\n\t2020_01_01_000001_create_table_admin_roles.php\n\t2020_01_01_000002_create_table_admin_role_user.php\n\t2020_01_01_000005_create_table_admin_file_storage.php\n\t2020_01_01_000006_create_table_admin_permission.php\n\t2021_12_10_165136_create_table_admin_log.php\n\t2022_03_25_205530_create_table_admin_menu.php\n\t2022_04_10_193630_create_table_admin_settings.php\npublic\/\n\tadmin\/\n\tadmin-asset\/\nlang\/\n\ten\/admin.php\n\tru\/admin.php\n\tuk\/admin.php\nbootstrap\/\n\tadmin_extensions.php\n```\n\n- `app\/Admin\/`: The core directory housing the admin panel's project files.\n- `Controllers\/`: Contains custom controller files for managing application logic.\n- `Config.php`: The main configuration file for the admin panel settings.\n- `Navigator.php`: Manages navigation within the admin panel.\n- `app\/Providers\/AdminServiceProvider.php`: The service provider for the admin panel, responsible for its registration and bootstrapping.\n- `database\/migrations\/`: Contains migration files for setting up the admin panel's database schema.\n- `public\/admin\/`: Contains static assets for the admin panel.\n- `public\/admin-asset\/`: Additional assets for the admin interface.\n- `lang\/`: Localization files for supporting multiple languages in the admin panel.\n- `bootstrap\/admin_extensions.php`: A bootstrap file for loading admin panel extensions.\n\n\nThis structured approach to organizing the admin panel's files ensures that developers can efficiently manage and extend the functionality of the admin panel. By familiarizing yourself with this structure, you can effectively navigate the admin panel's components and customize them to fit the needs of your application.\n"
    },
    {
        "name": "Autocomplete.md",
        "title": "Autocomplete",
        "content_html": "<p>This input field provides a sophisticated data entry experience with auto-completion functionality. As users input data, the field dynamically loads additional relevant information to facilitate quick and accurate completion of the entry. This feature enhances user productivity by reducing the need for manual input and streamlining the data entry process.<\/p>\n<pre><code class=\"language-php\">$form-&gt;autocomplete('tags[]', 'Post tags')-&gt;options(PostTag::pluck('id', 'name'))\n\/\/ OR\n$form-&gt;autocomplete('tags[]', 'Post tags')-&gt;load(PostTag::class)\n<\/code><\/pre>\n<p>The loading rules for this field function in the same way as the rules for a basic selector. This means that they follow similar principles and behaviors, ensuring consistency and familiarity for users.<\/p>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis input field provides a sophisticated data entry experience with auto-completion functionality. As users input data, the field dynamically loads additional relevant information to facilitate quick and accurate completion of the entry. This feature enhances user productivity by reducing the need for manual input and streamlining the data entry process.\n\n```php\n$form->autocomplete('tags[]', 'Post tags')->options(PostTag::pluck('id', 'name'))\n\/\/ OR\n$form->autocomplete('tags[]', 'Post tags')->load(PostTag::class)\n```\nThe loading rules for this field function in the same way as the rules for a basic selector. This means that they follow similar principles and behaviors, ensuring consistency and familiarity for users.\n\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Buttons.md",
        "title": "Buttons",
        "content_html": "<p>The &quot;Group of Buttons&quot; component is a comprehensive collection that encapsulates all possible interactive scenarios within an admin panel page, serving as an essential tool for administrators to manage and interact with the content effectively. This component is a distinct element of the delegator class <code>\\App\\Admin\\Delegates\\Buttons<\/code>, which is specifically designed to streamline and facilitate various administrative actions through a well-organized interface.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\Buttons;\n\nreturn $page-&gt;modal(\n\t...,\n\t$modal-&gt;buttons()-&gt;success()-&gt;icon_save()-&gt;title('Save')-&gt;modalSubmit(),\n)\n\/\/ OR\nreturn $page-&gt;card(\n\t$card-&gt;buttons()-&gt;dark()-&gt;title('Settings')-&gt;modal(),\n)\n<\/code><\/pre>\n<p>Initially, a group of buttons is always available, this is a component located at the namespace <code>\\Admin\\Components\\ButtonsComponent<\/code> with which you can create individual button classes <code>\\Admin\\Components\\ButtonComponent<\/code>.<\/p>\n<p>Grouping methods, as a rule, all components separate button groups by nesting, which means that if you need to create a group of buttons, then we wrap them in a method:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons(\n\t$button-&gt;success()-&gt;title('My title'),\n\t$button-&gt;danger()-&gt;title('My next title'),\n)\n<\/code><\/pre>\n<p>If it is necessary to \u201cunstick\u201d the buttons, then they should be separate from each other:<\/p>\n<pre><code class=\"language-php\">$page-&gt;card(\n\t$card-&gt;buttons()-&gt;success()-&gt;title('My title'),\n\t$card-&gt;buttons()-&gt;danger()-&gt;title('My next title'),\n)\n<\/code><\/pre>\n<p>The button group has many different kinds of modifications.<\/p>\n<h3>btn<\/h3>\n<p>To create a simple button with default styles and types using the provided syntax, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;btn()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code creates a button component with the specified title &quot;Button title&quot; and applies default styles and types. You can further customize the button's appearance and behavior as needed.<\/p>\n<h3>default<\/h3>\n<p>To create a standard button with default styles and types, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;default()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code creates a button component with the specified title &quot;Button title&quot; and applies default styles and types. You can further customize the button's appearance and behavior as needed.<\/p>\n<h3>secondary<\/h3>\n<p>To create a clean secondary button, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;secondary()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code creates a secondary button component with the specified title &quot;Button title&quot; and applies clean styles. You can further customize the button's appearance and behavior as needed.<\/p>\n<h3>dark<\/h3>\n<p>To create a clean black button, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;dark()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code creates a black button component with the specified title &quot;Button title&quot; and applies clean styles. You can further customize the button's appearance and behavior as needed.<\/p>\n<h3>info<\/h3>\n<p>To create a clean informative button, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;info()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code creates an informative button component with the specified title &quot;Button title&quot; and applies clean styles. You can further customize the button's appearance and behavior as needed.<\/p>\n<h3>primary<\/h3>\n<p>To create a clean primary button, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;primary()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code creates a primary button component with the specified title &quot;Button title&quot; and applies clean styles. You can further customize the button's appearance and behavior as needed.<\/p>\n<h3>success<\/h3>\n<p>To create a clean success button, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code creates a success button component with the specified title &quot;Button title&quot; and applies clean styles. You can further customize the button's appearance and behavior as needed.<\/p>\n<h3>danger<\/h3>\n<p>To create a clean danger button with the specified title &quot;Button title&quot;, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;danger()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code generates a danger button component with clean styles. Further customization options are available based on your requirements.<\/p>\n<h3>warning<\/h3>\n<p>To create a clean warning button with the specified title &quot;Button title&quot;, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;warning()-&gt;title('Button title'): ButtonComponent\n<\/code><\/pre>\n<p>This code generates a warning button component with clean styles. Further customization options are available based on your requirements.<\/p>\n<h3>nestable<\/h3>\n<p>To create a group of buttons for controlling nested models, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;nestable(): ButtonsComponent\n<\/code><\/pre>\n<p>This code generates a button group specifically designed for controlling nested models and returns the corresponding <code>ButtonsComponent<\/code> class instance.<\/p>\n<h3>reload<\/h3>\n<p>To create a button for reloading the page, you can use the following code:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;reload(): ButtonComponent\n<\/code><\/pre>\n<p>This code generates a reload button and returns the corresponding <code>ButtonComponent<\/code> class instance.<\/p>\n<h3>resourceList<\/h3>\n<p>To create a redirect button to the main page of the resource controller, you can use the <code>resourceList<\/code> method like this:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;resourceList(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n<\/code><\/pre>\n<p>This will generate a button labeled &quot;Main Page&quot; that redirects to the specified URL (<code>url_to_main_page<\/code>). The method returns the <code>ButtonsComponent<\/code> class instance for further customization if needed.<\/p>\n<h3>resourceAdd<\/h3>\n<p>To create a redirect button to the page for adding data to the resource controller model, which is commonly used in tools by default, you can use the <code>resourceAdd<\/code> method like this:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;resourceAdd(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n<\/code><\/pre>\n<p>This will generate a button labeled &quot;Add Data&quot; that redirects to the specified URL (<code>url_to_add_page<\/code>). The method returns the <code>ButtonsComponent<\/code> class instance for further customization if needed.<\/p>\n<h3>resourceEdit<\/h3>\n<p>To create a redirect button to the data edit page in the resource controller model, commonly used in tools by default, you can use the <code>resourceEdit<\/code> method like this:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;resourceEdit(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n<\/code><\/pre>\n<p>This will generate a button labeled &quot;Edit Data&quot; that redirects to the specified URL (<code>url_to_edit_page<\/code>). The method returns the <code>ButtonsComponent<\/code> class instance for further customization if needed.<\/p>\n<h3>resourceInfo<\/h3>\n<p>To create a redirect button to the information page of the resource controller model, commonly used in tools by default, you can utilize the <code>resourceInfo<\/code> method like so:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;resourceInfo(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n<\/code><\/pre>\n<p>This will produce a button labeled &quot;Info&quot; that redirects to the specified URL (<code>url_to_info_page<\/code>). The method returns the <code>ButtonsComponent<\/code> class instance for further customization if necessary.<\/p>\n<h3>resourceDestroy<\/h3>\n<p>To create a button that sends a request to delete the resource controller model, commonly used in tools by default, you can use the <code>resourceDestroy<\/code> method like this:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;resourceDestroy(\n\tstring $link = null, string $title = null, string $message = null, $key = null\n): ButtonsComponent\n<\/code><\/pre>\n<p>This will generate a button labeled &quot;Delete&quot; that sends a request to the specified URL (<code>url_to_delete<\/code>) to delete the resource controller model. The confirmation message &quot;Are you sure?&quot; will be displayed before the deletion action. The method returns the <code>ButtonsComponent<\/code> class instance for further customization if necessary.<\/p>\n<h3>resourceForceDestroy<\/h3>\n<p>To create a button that sends a request to force delete the resource controller model, commonly used in tools by default, you can use the <code>resourceForceDestroy<\/code> method like this:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;resourceForceDestroy(\n\tstring $link = null, string $title = null, string $message = null, $key = null\n): ButtonsComponent\n<\/code><\/pre>\n<p>This will generate a button labeled &quot;Force Delete&quot; that sends a request to the specified URL (<code>url_to_force_delete<\/code>) to force delete the resource controller model. The confirmation message &quot;Are you sure?&quot; will be displayed before the deletion action. The method returns the <code>ButtonsComponent<\/code> class instance for further customization if necessary.<\/p>\n<h3>resourceRestore<\/h3>\n<p>To create a button that sends a request to restore the resource controller model, commonly used in tools by default, you can use the <code>resourceRestore<\/code> method like this:<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;resourceRestore(\n\tstring $link = null, string $title = null, string $message = null, $key = null\n): ButtonsComponent\n<\/code><\/pre>\n<p>This will generate a button labeled &quot;Restore&quot; that sends a request to the specified URL (<code>url_to_restore<\/code>) to restore the resource controller model. The confirmation message &quot;Are you sure?&quot; will be displayed before the restoration action. The method returns the <code>ButtonsComponent<\/code> class instance for further customization if necessary.<\/p>\n<h2>Button<\/h2>\n<p>The <code>ButtonComponent<\/code> class also provides helper methods for further customization:<\/p>\n<h3>icon<\/h3>\n<p>Set the icon of the button, it is desirable to put it on each button, since when adapting to a mobile device (if an icon exists), the text will be hidden, thus it becomes possible to save space for control buttons on a mobile device.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;icon('fas fa-users'): ButtonComponent\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n<h3>title<\/h3>\n<p>Set the title of the button (Will be hidden when adapting on mobile if there is an icon).<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;title('Button title text'): ButtonComponent\n<\/code><\/pre>\n<h3>modal<\/h3>\n<p>Starts the loading process of the modal window and opens it. More details in the \u201cModal window\u201d section.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;modal(\n\tstring $modalName = &quot;modal&quot;, array $query = []\n): ButtonComponent\n<\/code><\/pre>\n<h3>modalDestroy<\/h3>\n<p>Removes the current (open) modal window. It makes sense to use only in a modal window.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;modalDestroy(): ButtonComponent\n<\/code><\/pre>\n<h3>modalHide<\/h3>\n<p>Hide the current (open) modal window. After reloading the page, it will open again. It makes sense to use only in a modal window.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;modalHide(): ButtonComponent\n<\/code><\/pre>\n<h3>modalSubmit<\/h3>\n<p>Send the data of the current (open) modal to a callback or as <code>GET<\/code> parameters. It makes sense to use only in a modal window.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;modalSubmit(): ButtonComponent\n<\/code><\/pre>\n<h3>query<\/h3>\n<p>Control <code>GET<\/code> parameters, the first parameter is the variables to be added to the current ones (does not remove the old ones), and the second one takes a list of keys to be excluded.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;query(\n\tarray $params = [], array $unset = []\n): ButtonComponent\n<\/code><\/pre>\n<h3>unsetQuery<\/h3>\n<p>Control <code>GET<\/code> parameters, the first parameter accepts a list of keys to be excluded, and the second is the variables to be added to the current ones (does not remove the old ones). That is, like the <code>query<\/code> method, but only the parameters are reversed.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;unsetQuery(\n\tarray $unset = [], array $params = []\n): ButtonComponent\n<\/code><\/pre>\n<h3>switchQuery<\/h3>\n<p>Control <code>GET<\/code> parameters, add if not present or remove if there is a key(s) in the variable list. The second parameter is the toggle value.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;switchQuery(\n\tstring|array $name, $value = 1\n): ButtonComponent\n<\/code><\/pre>\n<h3>setQuery<\/h3>\n<p>Control <code>GET<\/code> parameters, add key(s) to variable list. The second parameter is the value to be set.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;setQuery(\n\tstring|array $name, $value = 1\n): ButtonComponent\n<\/code><\/pre>\n<h3>forgetQuery<\/h3>\n<p>Control <code>GET<\/code> parameters, remove key(s) from variable list.<\/p>\n<pre><code class=\"language-php\">$card-&gt;buttons()-&gt;success()-&gt;forgetQuery(\n\tstring|array $name\n): ButtonComponent\n<\/code><\/pre>\n",
        "content_md": "\nThe \"Group of Buttons\" component is a comprehensive collection that encapsulates all possible interactive scenarios within an admin panel page, serving as an essential tool for administrators to manage and interact with the content effectively. This component is a distinct element of the delegator class `\\App\\Admin\\Delegates\\Buttons`, which is specifically designed to streamline and facilitate various administrative actions through a well-organized interface.\n```php\nuse App\\Admin\\Delegates\\Buttons;\n\nreturn $page->modal(\n\t...,\n\t$modal->buttons()->success()->icon_save()->title('Save')->modalSubmit(),\n)\n\/\/ OR\nreturn $page->card(\n\t$card->buttons()->dark()->title('Settings')->modal(),\n)\n```\nInitially, a group of buttons is always available, this is a component located at the namespace `\\Admin\\Components\\ButtonsComponent` with which you can create individual button classes `\\Admin\\Components\\ButtonComponent`.\n\nGrouping methods, as a rule, all components separate button groups by nesting, which means that if you need to create a group of buttons, then we wrap them in a method:\n```php\n$card->buttons(\n\t$button->success()->title('My title'),\n\t$button->danger()->title('My next title'),\n)\n```\nIf it is necessary to \u201cunstick\u201d the buttons, then they should be separate from each other:\n```php\n$page->card(\n\t$card->buttons()->success()->title('My title'),\n\t$card->buttons()->danger()->title('My next title'),\n)\n```\nThe button group has many different kinds of modifications.\n\n### btn\nTo create a simple button with default styles and types using the provided syntax, you can use the following code:\n```php\n$card->buttons()->btn()->title('Button title'): ButtonComponent\n```\nThis code creates a button component with the specified title \"Button title\" and applies default styles and types. You can further customize the button's appearance and behavior as needed.\n\n### default\nTo create a standard button with default styles and types, you can use the following code:\n```php\n$card->buttons()->default()->title('Button title'): ButtonComponent\n```\nThis code creates a button component with the specified title \"Button title\" and applies default styles and types. You can further customize the button's appearance and behavior as needed.\n\n### secondary\nTo create a clean secondary button, you can use the following code:\n```php\n$card->buttons()->secondary()->title('Button title'): ButtonComponent\n```\nThis code creates a secondary button component with the specified title \"Button title\" and applies clean styles. You can further customize the button's appearance and behavior as needed.\n\n### dark\nTo create a clean black button, you can use the following code:\n```php\n$card->buttons()->dark()->title('Button title'): ButtonComponent\n```\nThis code creates a black button component with the specified title \"Button title\" and applies clean styles. You can further customize the button's appearance and behavior as needed.\n\n### info\nTo create a clean informative button, you can use the following code:\n```php\n$card->buttons()->info()->title('Button title'): ButtonComponent\n```\nThis code creates an informative button component with the specified title \"Button title\" and applies clean styles. You can further customize the button's appearance and behavior as needed.\n\n### primary\nTo create a clean primary button, you can use the following code:\n```php\n$card->buttons()->primary()->title('Button title'): ButtonComponent\n```\nThis code creates a primary button component with the specified title \"Button title\" and applies clean styles. You can further customize the button's appearance and behavior as needed.\n\n### success\nTo create a clean success button, you can use the following code:\n```php\n$card->buttons()->success()->title('Button title'): ButtonComponent\n```\nThis code creates a success button component with the specified title \"Button title\" and applies clean styles. You can further customize the button's appearance and behavior as needed.\n\n### danger\nTo create a clean danger button with the specified title \"Button title\", you can use the following code:\n```php\n$card->buttons()->danger()->title('Button title'): ButtonComponent\n```\nThis code generates a danger button component with clean styles. Further customization options are available based on your requirements.\n\n### warning\nTo create a clean warning button with the specified title \"Button title\", you can use the following code:\n```php\n$card->buttons()->warning()->title('Button title'): ButtonComponent\n```\nThis code generates a warning button component with clean styles. Further customization options are available based on your requirements.\n\n### nestable\nTo create a group of buttons for controlling nested models, you can use the following code:\n```php\n$card->buttons()->nestable(): ButtonsComponent\n```\nThis code generates a button group specifically designed for controlling nested models and returns the corresponding `ButtonsComponent` class instance.\n\n### reload\nTo create a button for reloading the page, you can use the following code:\n```php\n$card->buttons()->reload(): ButtonComponent\n```\nThis code generates a reload button and returns the corresponding `ButtonComponent` class instance.\n\n### resourceList\nTo create a redirect button to the main page of the resource controller, you can use the `resourceList` method like this:\n```php\n$card->buttons()->resourceList(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n```\nThis will generate a button labeled \"Main Page\" that redirects to the specified URL (`url_to_main_page`). The method returns the `ButtonsComponent` class instance for further customization if needed.\n\n### resourceAdd\nTo create a redirect button to the page for adding data to the resource controller model, which is commonly used in tools by default, you can use the `resourceAdd` method like this:\n```php\n$card->buttons()->resourceAdd(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n```\nThis will generate a button labeled \"Add Data\" that redirects to the specified URL (`url_to_add_page`). The method returns the `ButtonsComponent` class instance for further customization if needed.\n\n### resourceEdit\nTo create a redirect button to the data edit page in the resource controller model, commonly used in tools by default, you can use the `resourceEdit` method like this:\n```php\n$card->buttons()->resourceEdit(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n```\nThis will generate a button labeled \"Edit Data\" that redirects to the specified URL (`url_to_edit_page`). The method returns the `ButtonsComponent` class instance for further customization if needed.\n\n### resourceInfo\nTo create a redirect button to the information page of the resource controller model, commonly used in tools by default, you can utilize the `resourceInfo` method like so:\n```php\n$card->buttons()->resourceInfo(\n\tstring $link = null, string $title = null\n): ButtonsComponent\n```\nThis will produce a button labeled \"Info\" that redirects to the specified URL (`url_to_info_page`). The method returns the `ButtonsComponent` class instance for further customization if necessary.\n\n### resourceDestroy\nTo create a button that sends a request to delete the resource controller model, commonly used in tools by default, you can use the `resourceDestroy` method like this:\n```php\n$card->buttons()->resourceDestroy(\n\tstring $link = null, string $title = null, string $message = null, $key = null\n): ButtonsComponent\n```\nThis will generate a button labeled \"Delete\" that sends a request to the specified URL (`url_to_delete`) to delete the resource controller model. The confirmation message \"Are you sure?\" will be displayed before the deletion action. The method returns the `ButtonsComponent` class instance for further customization if necessary.\n\n### resourceForceDestroy\nTo create a button that sends a request to force delete the resource controller model, commonly used in tools by default, you can use the `resourceForceDestroy` method like this:\n```php\n$card->buttons()->resourceForceDestroy(\n\tstring $link = null, string $title = null, string $message = null, $key = null\n): ButtonsComponent\n```\nThis will generate a button labeled \"Force Delete\" that sends a request to the specified URL (`url_to_force_delete`) to force delete the resource controller model. The confirmation message \"Are you sure?\" will be displayed before the deletion action. The method returns the `ButtonsComponent` class instance for further customization if necessary.\n\n### resourceRestore\nTo create a button that sends a request to restore the resource controller model, commonly used in tools by default, you can use the `resourceRestore` method like this:\n```php\n$card->buttons()->resourceRestore(\n\tstring $link = null, string $title = null, string $message = null, $key = null\n): ButtonsComponent\n```\nThis will generate a button labeled \"Restore\" that sends a request to the specified URL (`url_to_restore`) to restore the resource controller model. The confirmation message \"Are you sure?\" will be displayed before the restoration action. The method returns the `ButtonsComponent` class instance for further customization if necessary.\n\n## Button\nThe `ButtonComponent` class also provides helper methods for further customization:\n\n### icon\nSet the icon of the button, it is desirable to put it on each button, since when adapting to a mobile device (if an icon exists), the text will be hidden, thus it becomes possible to save space for control buttons on a mobile device.\n```php\n$card->buttons()->success()->icon('fas fa-users'): ButtonComponent\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n\n### title\nSet the title of the button (Will be hidden when adapting on mobile if there is an icon).\n```php\n$card->buttons()->success()->title('Button title text'): ButtonComponent\n```\n\n### modal\nStarts the loading process of the modal window and opens it. More details in the \u201cModal window\u201d section.\n```php\n$card->buttons()->success()->modal(\n\tstring $modalName = \"modal\", array $query = []\n): ButtonComponent\n```\n\n### modalDestroy\nRemoves the current (open) modal window. It makes sense to use only in a modal window.\n```php\n$card->buttons()->success()->modalDestroy(): ButtonComponent\n```\n\n### modalHide\nHide the current (open) modal window. After reloading the page, it will open again. It makes sense to use only in a modal window.\n```php\n$card->buttons()->success()->modalHide(): ButtonComponent\n```\n\n### modalSubmit\nSend the data of the current (open) modal to a callback or as `GET` parameters. It makes sense to use only in a modal window.\n```php\n$card->buttons()->success()->modalSubmit(): ButtonComponent\n```\n\n### query\nControl `GET` parameters, the first parameter is the variables to be added to the current ones (does not remove the old ones), and the second one takes a list of keys to be excluded.\n```php\n$card->buttons()->success()->query(\n\tarray $params = [], array $unset = []\n): ButtonComponent\n```\n\n### unsetQuery\nControl `GET` parameters, the first parameter accepts a list of keys to be excluded, and the second is the variables to be added to the current ones (does not remove the old ones). That is, like the `query` method, but only the parameters are reversed.\n```php\n$card->buttons()->success()->unsetQuery(\n\tarray $unset = [], array $params = []\n): ButtonComponent\n```\n\n### switchQuery\nControl `GET` parameters, add if not present or remove if there is a key(s) in the variable list. The second parameter is the toggle value.\n```php\n$card->buttons()->success()->switchQuery(\n\tstring|array $name, $value = 1\n): ButtonComponent\n```\n\n### setQuery\nControl `GET` parameters, add key(s) to variable list. The second parameter is the value to be set.\n```php\n$card->buttons()->success()->setQuery(\n\tstring|array $name, $value = 1\n): ButtonComponent\n```\n\n### forgetQuery\nControl `GET` parameters, remove key(s) from variable list.\n```php\n$card->buttons()->success()->forgetQuery(\n\tstring|array $name\n): ButtonComponent\n```\n"
    },
    {
        "name": "Card.md",
        "title": "Card",
        "content_html": "<p>The card is utilized to arrange components. It is a distinct component of the delegate class <code>\\App\\Admin\\Delegates\\Card<\/code>. Additionally, the delegation offers assistants such as <code>statisticBody<\/code>, <code>sortedModelTable<\/code>, and <code>nestedModelTable<\/code> for constructing pre-built tables.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\Card;\n\n$page-&gt;card(\n\t$card-&gt;title('Hello!'),\n\t...\n)\n<\/code><\/pre>\n<h4>statisticBody<\/h4>\n<p>This is a table outlined by a delegation featuring a default schema for model creation and a standard table that accepts delegations for a regular table.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\ModelTable;\n\npublic function index(\n\tPage $page,\n\tCard $card,\n\tModelTable $modelTable\n): Page {\n\treturn $page-&gt;card(\n\t\t$card-&gt;statisticBody(\n\t\t\t$modelTable-&gt;col('Column name', 'col_name'),\n\t\t\t...\n\t\t),\n\t);\n}\n<\/code><\/pre>\n<p>The fields &quot;ID&quot; and &quot;AT&quot; are automatically included in the table by default, as the columns are generated through the <code>colDefault<\/code> helper within the <code>model_table<\/code> delegation.<\/p>\n<h4>sortedModelTable<\/h4>\n<p>This is a table described by a delegation that includes a default layout for model creation, a standard table that accepts delegations for typical table functionality, and a table for sorting data. The model should include a default sort field named <code>order<\/code>.<\/p>\n<h4>nestedModelTable<\/h4>\n<p>This table is described by a delegation that includes a default layout for model creation, a standard table that accepts delegations for typical table functionality, and a nested data sorting table. The model should include a default sort field named <code>order<\/code> and a default parent ID field named <code>parent_id<\/code>.<\/p>\n<h3>title<\/h3>\n<p>This method is used to add a title to the card component.<\/p>\n<pre><code class=\"language-php\">$card-&gt;title(array|string $title)\n<\/code><\/pre>\n<p>Components that can be used directly (without a body) since their behavior is described by default: <code>buttons<\/code>, <code>form<\/code>, <code>model_table<\/code>, <code>model_info_table<\/code>, <code>nested<\/code>, <code>search_form<\/code>, <code>chart_js<\/code>, <code>tab<\/code>.<\/p>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n<p><strong>Card body<\/strong>\nThis statement describes the body of the card, which functions as a container providing content.<\/p>\n<pre><code class=\"language-php\">$page-&gt;card(\n\t...,\n\t$card-&gt;card_body(\n\t\t...\n\t),\n\t...\n)\n\/\/ OR\n$page-&gt;card(\n\t...,\n\t$card-&gt;full_body(\n\t\t...\n\t),\n\t ...\n)\n<\/code><\/pre>\n<h3>Default Tools<\/h3>\n<p>This section describes mass control buttons used for management purposes. By default, default delegations are included in the parent controller, which entail the inclusion of these tools at the first card on the page. Further details are provided in the <code>Controller<\/code> section.<\/p>\n",
        "content_md": "\nThe card is utilized to arrange components. It is a distinct component of the delegate class `\\App\\Admin\\Delegates\\Card`. Additionally, the delegation offers assistants such as `statisticBody`, `sortedModelTable`, and `nestedModelTable` for constructing pre-built tables.\n```php\nuse App\\Admin\\Delegates\\Card;\n\n$page->card(\n\t$card->title('Hello!'),\n\t...\n)\n```\n\n#### statisticBody\nThis is a table outlined by a delegation featuring a default schema for model creation and a standard table that accepts delegations for a regular table.\n```php\nuse App\\Admin\\Delegates\\ModelTable;\n\npublic function index(\n\tPage $page,\n\tCard $card,\n\tModelTable $modelTable\n): Page {\n\treturn $page->card(\n\t\t$card->statisticBody(\n\t\t\t$modelTable->col('Column name', 'col_name'),\n\t\t\t...\n\t\t),\n\t);\n}\n```\nThe fields \"ID\" and \"AT\" are automatically included in the table by default, as the columns are generated through the `colDefault` helper within the `model_table` delegation.\n\n#### sortedModelTable\nThis is a table described by a delegation that includes a default layout for model creation, a standard table that accepts delegations for typical table functionality, and a table for sorting data. The model should include a default sort field named `order`.\n\n#### nestedModelTable\nThis table is described by a delegation that includes a default layout for model creation, a standard table that accepts delegations for typical table functionality, and a nested data sorting table. The model should include a default sort field named `order` and a default parent ID field named `parent_id`.\n\n### title\nThis method is used to add a title to the card component.\n```php\n$card->title(array|string $title)\n```\n\nComponents that can be used directly (without a body) since their behavior is described by default: `buttons`, `form`, `model_table`, `model_info_table`, `nested`, `search_form`, `chart_js`, `tab`.\n\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n\n**Card body**\nThis statement describes the body of the card, which functions as a container providing content.\n```php\n$page->card(\n\t...,\n\t$card->card_body(\n\t\t...\n\t),\n\t...\n)\n\/\/ OR\n$page->card(\n\t...,\n\t$card->full_body(\n\t\t...\n\t),\n\t ...\n)\n```\n### Default Tools\nThis section describes mass control buttons used for management purposes. By default, default delegations are included in the parent controller, which entail the inclusion of these tools at the first card on the page. Further details are provided in the `Controller` section.\n"
    },
    {
        "name": "Checks.md",
        "title": "Checks",
        "content_html": "<p>This feature provides a straightforward group of checkboxes intended to activate or deactivate certain elements within an array property of the model.<\/p>\n<pre><code class=\"language-php\">$form-&gt;checks('roles[]', 'User roles')-&gt;options(Roles::pluck('id', 'name'))\n<\/code><\/pre>\n",
        "content_md": "\nThis feature provides a straightforward group of checkboxes intended to activate or deactivate certain elements within an array property of the model.\n```php\n$form->checks('roles[]', 'User roles')->options(Roles::pluck('id', 'name'))\n```\n"
    },
    {
        "name": "Ckeditor.md",
        "title": "Ckeditor",
        "content_html": "<p>This functionality offers a sophisticated editor equipped with text formatting capabilities and the option to insert images.<\/p>\n<pre><code class=\"language-php\">$form-&gt;ckeditor('description', 'Post description')\n<\/code><\/pre>\n",
        "content_md": "\nThis functionality offers a sophisticated editor equipped with text formatting capabilities and the option to insert images.\n```php\n$form->ckeditor('description', 'Post description')\n```\n"
    },
    {
        "name": "Codemirror.md",
        "title": "Codemirror",
        "content_html": "<p>This feature provides a sophisticated editor tailored for &quot;code&quot; text, complete with syntax highlighting.<\/p>\n<pre><code class=\"language-php\">$form-&gt;codemirror('template', 'Mail template')\n<\/code><\/pre>\n",
        "content_md": "\nThis feature provides a sophisticated editor tailored for \"code\" text, complete with syntax highlighting.\n```php\n$form->codemirror('template', 'Mail template')\n```\n"
    },
    {
        "name": "Color.md",
        "title": "Color",
        "content_html": "<p>This feature offers a complex input option featuring a dropdown color palette for selection.<\/p>\n<pre><code class=\"language-php\">$form-&gt;color('color', 'Tag color')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature offers a complex input option featuring a dropdown color palette for selection.\n```php\n$form->color('color', 'Tag color')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Commands.md",
        "title": "Commands",
        "content_html": "<p>To streamline the development process of your extension app, a series of helpful commands are available. These commands are designed to assist in various aspects of extension development, from installation to user and controller generation.<\/p>\n<h3>Install<\/h3>\n<p>This command is utilized to internally install the extension within your application.<\/p>\n<pre><code class=\"language-bash\">php artisan admin:install\n<\/code><\/pre>\n<h3>Make Administration User<\/h3>\n<p>Generates a new user for the extension.<\/p>\n<pre><code class=\"language-bash\">php artisan admin:user\n<\/code><\/pre>\n<p>Parameters:<\/p>\n<ul>\n<li>\n<code>[email]<\/code> - Email address of the generated user.<\/li>\n<li>\n<code>[name]<\/code> - Name of the generated user.<\/li>\n<\/ul>\n<h3>Make Controller<\/h3>\n<p>Creates a resource controller for the extension application.<\/p>\n<pre><code class=\"language-bash\">php artisan admin:controller\n<\/code><\/pre>\n<p>Parameters:<\/p>\n<ul>\n<li>\n<code>[name]<\/code> - Name of the generated controller.<\/li>\n<li>\n<code>-m, --model<\/code> - Name of the model associated with the controller.<\/li>\n<\/ul>\n<h3>Extension control<\/h3>\n<pre><code class=\"language-bash\">php artisan admin:extension\n<\/code><\/pre>\n<p>Parameters:<\/p>\n<ul>\n<li>\n<code>[name]<\/code> - Name of the extension.<\/li>\n<li>\n<code>-s, --show<\/code> - Show all existing packages.<\/li>\n<li>\n<code>-i, --install<\/code> - Install any selected or all extensions.<\/li>\n<li>\n<code>-u, --uninstall<\/code> - UnInstall any selected or all extensions.<\/li>\n<li>\n<code>-r, --reinstall<\/code> - ReInstall any selected or all extension.<\/li>\n<li>\n<code>-f, --force<\/code> - Force action.<\/li>\n<li>\n<code>-y, --yes<\/code> - Enter yes on all.<\/li>\n<li>\n<code>-m, --make<\/code> - Create extension by selected name.<\/li>\n<li>\n<code>-e, --edit<\/code> - Edit extension by selected name.<\/li>\n<\/ul>\n",
        "content_md": "\nTo streamline the development process of your extension app, a series of helpful commands are available. These commands are designed to assist in various aspects of extension development, from installation to user and controller generation.\n\n### Install\n\nThis command is utilized to internally install the extension within your application.\n\n```bash\nphp artisan admin:install\n```\n\n### Make Administration User\n\nGenerates a new user for the extension.\n\n```bash\nphp artisan admin:user\n```\n\nParameters:\n\n- `[email]` - Email address of the generated user.\n- `[name]` - Name of the generated user.\n\n### Make Controller\n\nCreates a resource controller for the extension application.\n\n```bash\nphp artisan admin:controller\n```\n\nParameters:\n\n- `[name]` - Name of the generated controller.\n- `-m, --model` - Name of the model associated with the controller.\n\n### Extension control\n\n```bash\nphp artisan admin:extension\n```\n\nParameters:\n\n- `[name]` - Name of the extension.\n- `-s, --show` - Show all existing packages.\n- `-i, --install` - Install any selected or all extensions.\n- `-u, --uninstall` - UnInstall any selected or all extensions.\n- `-r, --reinstall` - ReInstall any selected or all extension.\n- `-f, --force` - Force action.\n- `-y, --yes` - Enter yes on all.\n- `-m, --make` - Create extension by selected name.\n- `-e, --edit` - Edit extension by selected name.\n\n"
    },
    {
        "name": "Component-extending.md",
        "title": "Register new component",
        "content_html": "<p>To register a new component, you can utilize the <code>registerComponent<\/code> method found in your <code>Config<\/code> class. Here is an example demonstrating how to use this method:<\/p>\n<pre><code class=\"language-php\">...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this-&gt;registerComponent('component_name', ComponentClass::class);\n}\n...\n<\/code><\/pre>\n<p>All components must inherit from the <code>Admin\\Components\\Component<\/code> class to ensure they are properly integrated and function as intended within the administrative framework.<\/p>\n",
        "content_md": "\nTo register a new component, you can utilize the `registerComponent` method found in your `Config` class. Here is an example demonstrating how to use this method:\n```php\n...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this->registerComponent('component_name', ComponentClass::class);\n}\n...\n```\nAll components must inherit from the `Admin\\Components\\Component` class to ensure they are properly integrated and function as intended within the administrative framework.\n"
    },
    {
        "name": "Component.md",
        "title": "Component",
        "content_html": "<p>All components within the extension derive from a specialized abstract component of the admin panel. This foundational component is inherently equipped with an array of helper methods, designed to streamline the development process and enhance the functionality of the extension's components by default.<\/p>\n<h3>model<\/h3>\n<p>This operation assigns a specific model to the component and its subsequent child elements, effectively establishing a unified data model across these interconnected components.<\/p>\n<pre><code class=\"language-php\">$component-&gt;model(User::find(1)): static\n<\/code><\/pre>\n<h3>withCollection<\/h3>\n<p>This process involves applying a collection to the component, wherein a callback function is anticipated to yield the delegations associated with the component. This mechanism allows for dynamic integration and manipulation of data within the component's scope.<\/p>\n<pre><code class=\"language-php\">$component-&gt;withCollection(User::all(), fn (User $user) =&gt; [\n\t\t$component-&gt;buttons()-&gt;success()-&gt;title($user-&gt;name)\n]): static\n<\/code><\/pre>\n<h3>with<\/h3>\n<p>This procedure entails executing a callback function on a component, where the function is designed to produce the component's delegations. This approach enables targeted modifications and enhancements to the component through the callback's logic.<\/p>\n<pre><code class=\"language-php\">$component-&gt;with(callable $callback): static\n<\/code><\/pre>\n<h3>click, dblclick, hover<\/h3>\n<p>This method facilitates the execution of a specified callback when the component it is attached to is interacted with through a click, double-click, or hover action. It allows for dynamic response and functionality based on user interactions with the component.<\/p>\n<pre><code class=\"language-php\">$component-&gt;click(callable $callback, array $parameters = []): static\n<\/code><\/pre>\n<p>This method allows for the passing of a callback as the initial parameter, with a subsequent array of data designated for transmission to the method following as the second parameter. The organization of parameters adheres to specific rules: for associative arrays, the key-value pairing functions in the anticipated manner, allowing us to interpret the key as the variable name within the method. In instances where there's a necessity to forward model data, it's possible to specify data without an explicit key; such entries will be interpreted based on the key from the model associated with the current component.<\/p>\n<pre><code class=\"language-php\">$component-&gt;click(function (?int $id, ?string $name) {\n\tif ($name == 'send') {\n\t\t...\n\t}\n}, array $parameters = [\n\t'id', \/\/ Send model id with key id\n\t'action' =&gt; 'send', \/\/ Easy data transfer\n]): static\n<\/code><\/pre>\n<p>Also, don't forget what <a href=\"https:\/\/www.php.net\/manual\/ru\/language.types.callable.php\">callable<\/a> <a href=\"https:\/\/www.php.net\/manual\/ru\/language.types.callable.php\">type<\/a>.<\/p>\n<h3>setTitle<\/h3>\n<p>This function allows you to attach a <code>tooltip<\/code> to the component. This tooltip, a concise and informative message, becomes visible when the user hovers over the component that incorporates this method, providing additional context or guidance.<\/p>\n<pre><code class=\"language-php\">$component-&gt;setTitle(string $title): static\n<\/code><\/pre>\n",
        "content_md": "\nAll components within the extension derive from a specialized abstract component of the admin panel. This foundational component is inherently equipped with an array of helper methods, designed to streamline the development process and enhance the functionality of the extension's components by default.\n\n### model\nThis operation assigns a specific model to the component and its subsequent child elements, effectively establishing a unified data model across these interconnected components.\n```php\n$component->model(User::find(1)): static\n```\n\n### withCollection\nThis process involves applying a collection to the component, wherein a callback function is anticipated to yield the delegations associated with the component. This mechanism allows for dynamic integration and manipulation of data within the component's scope.\n```php\n$component->withCollection(User::all(), fn (User $user) => [\n\t\t$component->buttons()->success()->title($user->name)\n]): static\n```\n\n### with\nThis procedure entails executing a callback function on a component, where the function is designed to produce the component's delegations. This approach enables targeted modifications and enhancements to the component through the callback's logic.\n```php\n$component->with(callable $callback): static\n```\n\n### click, dblclick, hover\nThis method facilitates the execution of a specified callback when the component it is attached to is interacted with through a click, double-click, or hover action. It allows for dynamic response and functionality based on user interactions with the component.\n```php\n$component->click(callable $callback, array $parameters = []): static\n```\nThis method allows for the passing of a callback as the initial parameter, with a subsequent array of data designated for transmission to the method following as the second parameter. The organization of parameters adheres to specific rules: for associative arrays, the key-value pairing functions in the anticipated manner, allowing us to interpret the key as the variable name within the method. In instances where there's a necessity to forward model data, it's possible to specify data without an explicit key; such entries will be interpreted based on the key from the model associated with the current component.\n```php\n$component->click(function (?int $id, ?string $name) {\n\tif ($name == 'send') {\n\t\t...\n\t}\n}, array $parameters = [\n\t'id', \/\/ Send model id with key id\n\t'action' => 'send', \/\/ Easy data transfer\n]): static\n```\n\nAlso, don't forget what [callable](https:\/\/www.php.net\/manual\/ru\/language.types.callable.php) [type](https:\/\/www.php.net\/manual\/ru\/language.types.callable.php).\n\n### setTitle\nThis function allows you to attach a `tooltip` to the component. This tooltip, a concise and informative message, becomes visible when the user hovers over the component that incorporates this method, providing additional context or guidance.\n```php\n$component->setTitle(string $title): static\n```\n"
    },
    {
        "name": "Controller.md",
        "title": "Controller",
        "content_html": "<p>By default, the full CRUD (Create, Read, Update, Delete) of a model is described by a Laravel resource controller. To get started, after installing it locally, run the command to generate a new controller:<\/p>\n<pre><code class=\"language-bash\">php artisan admin:controller UserController --model=User\n<\/code><\/pre>\n<h2>Controller Generation<\/h2>\n<p>This command will create a new controller in the <code>app\/Admin\/Controllers<\/code> directory named <code>UserController.php<\/code>. Consider a standard, generated resource:<\/p>\n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Admin\\Controllers;\n\nuse App\\Admin\\Delegates\\Card;\nuse App\\Admin\\Delegates\\Form;\nuse App\\Admin\\Delegates\\ModelInfoTable;\nuse App\\Admin\\Delegates\\ModelTable;\nuse App\\Admin\\Delegates\\SearchForm;\nuse App\\Models\\User;\nuse Admin\\Page;\n\n\/**\n * UserController Class\n * @package App\\Admin\\Controllers\n *\/\nclass UserController extends Controller\n{\n    static $model = User::class;\n\n    public function index(\n        Page $page, \n        Card $card, \n        SearchForm $searchForm, \n        ModelTable $modelTable\n    ): Page {\n        \/\/ ...\n    }\n\n    public function matrix(\n        Page $page, \n        Card $card, \n        Form $form\n    ): Page {\n        \/\/ ...\n    }\n\n    public function show(\n        Page $page, \n        Card $card, \n        ModelInfoTable $modelInfoTable\n    ): Page {\n        \/\/ ...\n    }\n}\n<\/code><\/pre>\n<p>The controller will belong to the model specified in the <code>$model<\/code> property. Or return the model from the getModel method. By default, you need to describe the logic for displaying 3 endpoints, they are described by the following methods: <code>index<\/code>, <code>matrix<\/code>, and <code>show<\/code>. The remaining endpoints are served by the extension automatically.<\/p>\n<p>You can generate a simple controller that does not belong to the model and describe absolutely custom logic in it.<\/p>\n<h2>Default tools<\/h2>\n<p>The parent controller has an <code>explanation<\/code> method for declaring global declarations, by default declarations are declared for the first card that will be included on the page, the <code>defaultTools<\/code> setting is enabled for it. If the controller has a <code>defaultTools<\/code> method, it will be used to check if the tools are displayed. For example, you can disable deletion for a model with <code>id<\/code> = 1 in the cards:<\/p>\n<pre><code class=\"language-php\">public function defaultTools($type)\n{\n    return !($type === 'delete' &amp;&amp; $this-&gt;model()-&gt;id == 1);\n}\n<\/code><\/pre>\n",
        "content_md": "\nBy default, the full CRUD (Create, Read, Update, Delete) of a model is described by a Laravel resource controller. To get started, after installing it locally, run the command to generate a new controller:\n\n```bash\nphp artisan admin:controller UserController --model=User\n```\n\n## Controller Generation\nThis command will create a new controller in the `app\/Admin\/Controllers` directory named `UserController.php`. Consider a standard, generated resource:\n\n```php\n<?php\n\nnamespace App\\Admin\\Controllers;\n\nuse App\\Admin\\Delegates\\Card;\nuse App\\Admin\\Delegates\\Form;\nuse App\\Admin\\Delegates\\ModelInfoTable;\nuse App\\Admin\\Delegates\\ModelTable;\nuse App\\Admin\\Delegates\\SearchForm;\nuse App\\Models\\User;\nuse Admin\\Page;\n\n\/**\n * UserController Class\n * @package App\\Admin\\Controllers\n *\/\nclass UserController extends Controller\n{\n    static $model = User::class;\n\n    public function index(\n        Page $page, \n        Card $card, \n        SearchForm $searchForm, \n        ModelTable $modelTable\n    ): Page {\n        \/\/ ...\n    }\n\n    public function matrix(\n        Page $page, \n        Card $card, \n        Form $form\n    ): Page {\n        \/\/ ...\n    }\n\n    public function show(\n        Page $page, \n        Card $card, \n        ModelInfoTable $modelInfoTable\n    ): Page {\n        \/\/ ...\n    }\n}\n```\nThe controller will belong to the model specified in the `$model` property. Or return the model from the getModel method. By default, you need to describe the logic for displaying 3 endpoints, they are described by the following methods: `index`, `matrix`, and `show`. The remaining endpoints are served by the extension automatically.\n\n\nYou can generate a simple controller that does not belong to the model and describe absolutely custom logic in it.\n\n## Default tools\nThe parent controller has an `explanation` method for declaring global declarations, by default declarations are declared for the first card that will be included on the page, the `defaultTools` setting is enabled for it. If the controller has a `defaultTools` method, it will be used to check if the tools are displayed. For example, you can disable deletion for a model with `id` = 1 in the cards:\n```php\npublic function defaultTools($type)\n{\n    return !($type === 'delete' && $this->model()->id == 1);\n}\n```\n"
    },
    {
        "name": "Date-range.md",
        "title": "Date range",
        "content_html": "<p>This feature offers a sophisticated input option with dropdown calendars, allowing users to select a date range conveniently.<\/p>\n<pre><code class=\"language-php\">$form-&gt;date_range('subscribed_range', 'User subscribed')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature offers a sophisticated input option with dropdown calendars, allowing users to select a date range conveniently.\n```php\n$form->date_range('subscribed_range', 'User subscribed')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Date-time-range.md",
        "title": "Date time range",
        "content_html": "<p>This feature offers a sophisticated input with dropdown calendars for selecting both a start and end date and time, defining an interval.<\/p>\n<pre><code class=\"language-php\">$form-&gt;date_time_range('subscribed_range', 'User subscribed')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature offers a sophisticated input with dropdown calendars for selecting both a start and end date and time, defining an interval.\n```php\n$form->date_time_range('subscribed_range', 'User subscribed')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Date-time.md",
        "title": "Date time",
        "content_html": "<p>This functionality provides a sophisticated input feature with a dropdown calendar for selecting both date and time.<\/p>\n<pre><code class=\"language-php\">$form-&gt;date_time('verify_at', 'User verify at')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis functionality provides a sophisticated input feature with a dropdown calendar for selecting both date and time.\n```php\n$form->date_time('verify_at', 'User verify at')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Date.md",
        "title": "Date",
        "content_html": "<p>This feature provides a sophisticated input option with a dropdown calendar, enabling users to select a date easily.<\/p>\n<pre><code class=\"language-php\">$form-&gt;date('birthday', 'User birthday')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature provides a sophisticated input option with a dropdown calendar, enabling users to select a date easily.\n```php\n$form->date('birthday', 'User birthday')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Dependencies.md",
        "title": "Dependencies",
        "content_html": "<p>The admin panel extension enhances the Laravel framework by adding comprehensive administrative capabilities. To ensure full functionality and seamless integration, the extension relies on a specific set of dependencies, as outlined below. These dependencies include server requirements as specified in the <a href=\"https:\/\/laravel.com\/docs\/9.x\/deployment#server-requirements\">Laravel documentation<\/a>, along with additional packages and libraries necessary for the admin panel extension and frontend assets.<\/p>\n<h3>Server and Framework Requirements<\/h3>\n<ul>\n<li>\n<strong>PHP:<\/strong> Version <code>^8.0<\/code> or <code>^8.1<\/code>, with the <code>ext-pdo<\/code> extension enabled. <a href=\"https:\/\/www.php.net\/\">PHP Official Site<\/a>\n<\/li>\n<li>\n<strong>Laravel Framework:<\/strong> Compatible with versions <code>^8.0<\/code>, <code>^9.0<\/code>, <code>^10.0<\/code>, or <code>^11.0<\/code>. <a href=\"https:\/\/laravel.com\/docs\/11.x\">Laravel Documentation<\/a>\n<\/li>\n<li>\n<strong>AdminLTE Bootstrap Template:<\/strong> Version <code>^3.1<\/code> for the admin UI. <a href=\"https:\/\/adminlte.io\/themes\/v3\/\">AdminLTE<\/a>\n<\/li>\n<\/ul>\n<h3>Laravel Required Packages<\/h3>\n<p>These Laravel packages are necessary for the admin panel's operation, offering various functionalities from QR code generation to image manipulation:<\/p>\n<ul>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/bfg\/entity\">bfg\/entity<\/a>:<\/strong> For enhanced entity handling within Laravel.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/bfg\/embedded-call\">bfg\/embedded-call<\/a>:<\/strong> Allows for embedding calls within Laravel applications.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/bfg\/repository\">bfg\/repository<\/a>:<\/strong> Implements the repository pattern in Laravel applications.<\/li>\n<li>\n<strong><a href=\"https:\/\/docs.laravel-excel.com\/3.1\/getting-started\/\">maatwebsite\/excel<\/a>:<\/strong> For handling Excel file imports and exports in Laravel.<\/li>\n<li>\n<strong><a href=\"https:\/\/laravel.com\/docs\/10.x\">laravel\/framework<\/a>:<\/strong> The core Laravel framework package.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/composer\/composer\">composer\/composer<\/a>:<\/strong> Dependency management for PHP.<\/li>\n<li>\n<strong><a href=\"https:\/\/symfony.com\/doc\/current\/components\/dom_crawler.html\">symfony\/dom-crawler<\/a> &amp; <a href=\"https:\/\/symfony.com\/doc\/current\/components\/css_selector.html\">symfony\/css-selector<\/a>:<\/strong> For web scraping and CSS selection capabilities.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/almasaeed2010\/adminlte\">almasaeed2010\/adminlte<\/a>:<\/strong> The AdminLTE theme package for Laravel.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/barryvdh\/laravel-ide-helper\">barryvdh\/laravel-ide-helper<\/a>:<\/strong> Generates helper files for Laravel IDEs.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/bacon\/bacon-qr-code\">bacon\/bacon-qr-code<\/a>:<\/strong> For generating QR codes within Laravel applications.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/pragmarx\/google2fa-qrcode\">pragmarx\/google2fa-qrcode<\/a>:<\/strong> Integrates Google 2FA with QR codes in Laravel.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/stichoza\/google-translate-php\">stichoza\/google-translate-php<\/a>:<\/strong> Allows for Google Translate API integration in PHP.<\/li>\n<li>\n<strong><a href=\"https:\/\/packagist.org\/packages\/intervention\/image\">intervention\/image<\/a>:<\/strong> An image manipulation library for Laravel.<\/li>\n<\/ul>\n<h3>Frontend Required Libraries<\/h3>\n<p>The admin panel leverages a variety of frontend libraries and frameworks to ensure a rich and interactive user experience. Below is a list of these required frontend assets, complete with links for more information or documentation:<\/p>\n<ul>\n<li>\n<strong><a href=\"https:\/\/adminlte.io\/themes\/v3\/\">AdminLte v3<\/a>:<\/strong> The core UI framework for creating a responsive admin dashboard.<\/li>\n<li>\n<strong><a href=\"https:\/\/getbootstrap.com\/\">Bootstrap v4.3.1<\/a>:<\/strong> A popular framework for developing responsive, mobile-first websites.<\/li>\n<li>\n<strong><a href=\"http:\/\/victor-valencia.github.io\/bootstrap-iconpicker\/\">Bootstrap Iconpicker v1.10.0<\/a>:<\/strong> A plugin to pick icons from Bootstrap-friendly icon fonts.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/itsjavi\/bootstrap-colorpicker\">Bootstrap Colorpicker<\/a>:<\/strong> A plugin allowing color selection.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/seiyria\/bootstrap-slider\">Bootstrap Slider<\/a>:<\/strong> A plugin for creating interactive sliders.<\/li>\n<li>\n<strong><a href=\"https:\/\/bttstrp.github.io\/bootstrap-switch\/\">Bootstrap Switch<\/a>:<\/strong> A plugin that turns checkboxes into toggle switches.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/istvan-ujjmeszaros\/bootstrap-duallistbox\">Bootstrap Duallistbox<\/a>:<\/strong> A dual list box plugin.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/Johann-S\/bs-custom-file-input\">Bootstrap Custom file input<\/a>:<\/strong> A plugin for custom file input behavior in Bootstrap forms.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/bantikyan\/icheck-bootstrap\">Bootstrap Icheck<\/a>:<\/strong> A plugin for custom checkboxes and radio buttons.<\/li>\n<li>\n<strong><a href=\"https:\/\/fontawesome.com\/\">Font Awesome Free v5.11.2<\/a>:<\/strong> A popular icon set and toolkit.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/defunkt\/jquery-pjax\">jQuery Pjax<\/a>:<\/strong> A jQuery plugin for quick page loads using AJAX.<\/li>\n<li>\n<strong><a href=\"https:\/\/codeseven.github.io\/toastr\/\">Toastr<\/a>:<\/strong> A plugin for non-blocking notifications.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/sweetalert2\/sweetalert2\">Sweetalert2<\/a>:<\/strong> A beautiful, responsive, customizable replacement for JavaScript's popup boxes.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/ashleydw\/lightbox\">Lightbox<\/a>:<\/strong> A plugin for displaying images and videos in a modal overlay.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/RobinHerbots\/Inputmask\">Inputmask<\/a>:<\/strong> A plugin for creating input masks.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/IonDen\/ion.rangeSlider\">Ion Range Slider<\/a>:<\/strong> A plugin for creating pretty range sliders.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/aterrien\/jQuery-Knob\">jQuery Knob<\/a>:<\/strong> A plugin for creating nice, downward compatible, touchable, jQuery dial.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/KingSora\/OverlayScrollbars\">Overlay Scrollbars<\/a>:<\/strong> A plugin for custom scrollbars that overlay content.<\/li>\n<li>\n<strong><a href=\"https:\/\/popper.js.org\/\">Popper<\/a>:<\/strong> A library for managing poppers in web applications.<\/li>\n<li>\n<strong><a href=\"https:\/\/select2.org\/\">Select2<\/a>:<\/strong> A plugin for replacing standard select elements.<\/li>\n<li>\n<strong><a href=\"https:\/\/omnipotent.net\/jquery.sparkline\">jQuery Sparkline<\/a>:<\/strong> A plugin for generating small inline charts.<\/li>\n<li>\n<strong><a href=\"https:\/\/tempusdominus.github.io\/bootstrap-4\/Usage\/\">Tempus Dominus<\/a>:<\/strong> A plugin for date and time picking.<\/li>\n<li>\n<strong><a href=\"https:\/\/ckeditor.com\/\">CKeditor5<\/a>:<\/strong> A modern WYSIWYG editor.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/kartik-v\/bootstrap-fileinput\">Bootstrap-FileInput<\/a>:<\/strong> An advanced file input designed to make file selection and preview more intuitive.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/wpic\/bootstrap-number-input\">Number-Input<\/a>:<\/strong> A plugin for enhancing number input.<\/li>\n<li>\n<strong><a href=\"http:\/\/eonasdan.github.io\/bootstrap-datetimepicker\/\">DatetimePicker<\/a>:<\/strong> A Bootstrap-based plugin for date\/time picking.<\/li>\n<li>\n<strong><a href=\"https:\/\/dbushell.com\/Nestable\/\">Nestable<\/a>:<\/strong> A plugin for creating draggable lists with hierarchy.<\/li>\n<li>\n<strong><a href=\"https:\/\/plugins.krajee.com\/star-rating\">Star rating<\/a>:<\/strong> A plugin for creating star rating controls.<\/li>\n<li>\n<strong><a href=\"https:\/\/github.com\/vitalets\/x-editable\">XEditable<\/a>:<\/strong> A library for creating editable elements on your page.<\/li>\n<li>\n<strong><a href=\"https:\/\/vuejs.org\/\">VueJs<\/a>:<\/strong> The Progressive JavaScript Framework for building UI on the web.<\/li>\n<li>\n<strong><a href=\"https:\/\/alpinejs.dev\/\">AlpineJs<\/a>:<\/strong> A rugged, minimal framework for composing JavaScript behavior in your markup.<\/li>\n<li>\n<strong><a href=\"https:\/\/www.chartjs.org\/\">ChartJs<\/a>:<\/strong> Simple yet flexible JavaScript charting for designers &amp; developers.<\/li>\n<li>\n<strong><a href=\"https:\/\/codemirror.net\/\">Codemirror<\/a>:<\/strong> A versatile text editor implemented in JavaScript for the browser.<\/li>\n<\/ul>\n<p>These libraries and frameworks are essential for ensuring that the admin panel is visually appealing, functional, and user-friendly. They provide the necessary components for form elements, icons, notifications, charts, and much more.<\/p>\n",
        "content_md": "\nThe admin panel extension enhances the Laravel framework by adding comprehensive administrative capabilities. To ensure full functionality and seamless integration, the extension relies on a specific set of dependencies, as outlined below. These dependencies include server requirements as specified in the [Laravel documentation](https:\/\/laravel.com\/docs\/9.x\/deployment#server-requirements), along with additional packages and libraries necessary for the admin panel extension and frontend assets.\n\n### Server and Framework Requirements\n\n- **PHP:** Version `^8.0` or `^8.1`, with the `ext-pdo` extension enabled. [PHP Official Site](https:\/\/www.php.net\/)\n- **Laravel Framework:** Compatible with versions `^8.0`, `^9.0`, `^10.0`, or `^11.0`. [Laravel Documentation](https:\/\/laravel.com\/docs\/11.x)\n- **AdminLTE Bootstrap Template:** Version `^3.1` for the admin UI. [AdminLTE](https:\/\/adminlte.io\/themes\/v3\/)\n\n### Laravel Required Packages\n\nThese Laravel packages are necessary for the admin panel's operation, offering various functionalities from QR code generation to image manipulation:\n\n- **[bfg\/entity](https:\/\/packagist.org\/packages\/bfg\/entity):** For enhanced entity handling within Laravel.\n- **[bfg\/embedded-call](https:\/\/packagist.org\/packages\/bfg\/embedded-call):** Allows for embedding calls within Laravel applications.\n- **[bfg\/repository](https:\/\/packagist.org\/packages\/bfg\/repository):** Implements the repository pattern in Laravel applications.\n- **[maatwebsite\/excel](https:\/\/docs.laravel-excel.com\/3.1\/getting-started\/):** For handling Excel file imports and exports in Laravel.\n- **[laravel\/framework](https:\/\/laravel.com\/docs\/10.x):** The core Laravel framework package.\n- **[composer\/composer](https:\/\/packagist.org\/packages\/composer\/composer):** Dependency management for PHP.\n- **[symfony\/dom-crawler](https:\/\/symfony.com\/doc\/current\/components\/dom_crawler.html) & [symfony\/css-selector](https:\/\/symfony.com\/doc\/current\/components\/css_selector.html):** For web scraping and CSS selection capabilities.\n- **[almasaeed2010\/adminlte](https:\/\/packagist.org\/packages\/almasaeed2010\/adminlte):** The AdminLTE theme package for Laravel.\n- **[barryvdh\/laravel-ide-helper](https:\/\/packagist.org\/packages\/barryvdh\/laravel-ide-helper):** Generates helper files for Laravel IDEs.\n- **[bacon\/bacon-qr-code](https:\/\/packagist.org\/packages\/bacon\/bacon-qr-code):** For generating QR codes within Laravel applications.\n- **[pragmarx\/google2fa-qrcode](https:\/\/packagist.org\/packages\/pragmarx\/google2fa-qrcode):** Integrates Google 2FA with QR codes in Laravel.\n- **[stichoza\/google-translate-php](https:\/\/packagist.org\/packages\/stichoza\/google-translate-php):** Allows for Google Translate API integration in PHP.\n- **[intervention\/image](https:\/\/packagist.org\/packages\/intervention\/image):** An image manipulation library for Laravel.\n\n### Frontend Required Libraries\n\nThe admin panel leverages a variety of frontend libraries and frameworks to ensure a rich and interactive user experience. Below is a list of these required frontend assets, complete with links for more information or documentation:\n\n- **[AdminLte v3](https:\/\/adminlte.io\/themes\/v3\/):** The core UI framework for creating a responsive admin dashboard.\n- **[Bootstrap v4.3.1](https:\/\/getbootstrap.com\/):** A popular framework for developing responsive, mobile-first websites.\n- **[Bootstrap Iconpicker v1.10.0](http:\/\/victor-valencia.github.io\/bootstrap-iconpicker\/):** A plugin to pick icons from Bootstrap-friendly icon fonts.\n- **[Bootstrap Colorpicker](https:\/\/github.com\/itsjavi\/bootstrap-colorpicker):** A plugin allowing color selection.\n- **[Bootstrap Slider](https:\/\/github.com\/seiyria\/bootstrap-slider):** A plugin for creating interactive sliders.\n- **[Bootstrap Switch](https:\/\/bttstrp.github.io\/bootstrap-switch\/):** A plugin that turns checkboxes into toggle switches.\n- **[Bootstrap Duallistbox](https:\/\/github.com\/istvan-ujjmeszaros\/bootstrap-duallistbox):** A dual list box plugin.\n- **[Bootstrap Custom file input](https:\/\/github.com\/Johann-S\/bs-custom-file-input):** A plugin for custom file input behavior in Bootstrap forms.\n- **[Bootstrap Icheck](https:\/\/github.com\/bantikyan\/icheck-bootstrap):** A plugin for custom checkboxes and radio buttons.\n- **[Font Awesome Free v5.11.2](https:\/\/fontawesome.com\/):** A popular icon set and toolkit.\n- **[jQuery Pjax](https:\/\/github.com\/defunkt\/jquery-pjax):** A jQuery plugin for quick page loads using AJAX.\n- **[Toastr](https:\/\/codeseven.github.io\/toastr\/):** A plugin for non-blocking notifications.\n- **[Sweetalert2](https:\/\/github.com\/sweetalert2\/sweetalert2):** A beautiful, responsive, customizable replacement for JavaScript's popup boxes.\n- **[Lightbox](https:\/\/github.com\/ashleydw\/lightbox):** A plugin for displaying images and videos in a modal overlay.\n- **[Inputmask](https:\/\/github.com\/RobinHerbots\/Inputmask):** A plugin for creating input masks.\n- **[Ion Range Slider](https:\/\/github.com\/IonDen\/ion.rangeSlider):** A plugin for creating pretty range sliders.\n- **[jQuery Knob](https:\/\/github.com\/aterrien\/jQuery-Knob):** A plugin for creating nice, downward compatible, touchable, jQuery dial.\n- **[Overlay Scrollbars](https:\/\/github.com\/KingSora\/OverlayScrollbars):** A plugin for custom scrollbars that overlay content.\n- **[Popper](https:\/\/popper.js.org\/):** A library for managing poppers in web applications.\n- **[Select2](https:\/\/select2.org\/):** A plugin for replacing standard select elements.\n- **[jQuery Sparkline](https:\/\/omnipotent.net\/jquery.sparkline):** A plugin for generating small inline charts.\n- **[Tempus Dominus](https:\/\/tempusdominus.github.io\/bootstrap-4\/Usage\/):** A plugin for date and time picking.\n- **[CKeditor5](https:\/\/ckeditor.com\/):** A modern WYSIWYG editor.\n- **[Bootstrap-FileInput](https:\/\/github.com\/kartik-v\/bootstrap-fileinput):** An advanced file input designed to make file selection and preview more intuitive.\n- **[Number-Input](https:\/\/github.com\/wpic\/bootstrap-number-input):** A plugin for enhancing number input.\n- **[DatetimePicker](http:\/\/eonasdan.github.io\/bootstrap-datetimepicker\/):** A Bootstrap-based plugin for date\/time picking.\n- **[Nestable](https:\/\/dbushell.com\/Nestable\/):** A plugin for creating draggable lists with hierarchy.\n- **[Star rating](https:\/\/plugins.krajee.com\/star-rating):** A plugin for creating star rating controls.\n- **[XEditable](https:\/\/github.com\/vitalets\/x-editable):** A library for creating editable elements on your page.\n- **[VueJs](https:\/\/vuejs.org\/):** The Progressive JavaScript Framework for building UI on the web.\n- **[AlpineJs](https:\/\/alpinejs.dev\/):** A rugged, minimal framework for composing JavaScript behavior in your markup.\n- **[ChartJs](https:\/\/www.chartjs.org\/):** Simple yet flexible JavaScript charting for designers & developers.\n- **[Codemirror](https:\/\/codemirror.net\/):** A versatile text editor implemented in JavaScript for the browser.\n\nThese libraries and frameworks are essential for ensuring that the admin panel is visually appealing, functional, and user-friendly. They provide the necessary components for form elements, icons, notifications, charts, and much more.\n"
    },
    {
        "name": "Dual-select.md",
        "title": "Dual select",
        "content_html": "<p>This functionality provides a sophisticated double list for selecting multiple items.<\/p>\n<pre><code class=\"language-php\">$form-&gt;dual_select('categories[]', 'Prodict categories')-&gt;options(Category::pluck('id', 'name'))\n<\/code><\/pre>\n",
        "content_md": "\nThis functionality provides a sophisticated double list for selecting multiple items.\n```php\n$form->dual_select('categories[]', 'Prodict categories')->options(Category::pluck('id', 'name'))\n```\n"
    },
    {
        "name": "Email.md",
        "title": "Email",
        "content_html": "<p>This feature offers a basic input field with data validation specifically for email input.<\/p>\n<pre><code class=\"language-php\">$form-&gt;email('email', 'User email')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature offers a basic input field with data validation specifically for email input.\n```php\n$form->email('email', 'User email')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Examples.md",
        "title": "Examples",
        "content_html": "<p>Conventionally, we have a \u201cShop\u201d model with user information about their store. Below is an example of using most of the components in the controller.<\/p>\n<pre><code class=\"language-php\">class ShopController extends Controller\n{\n\t\/**\n\t * Static variable Model.\n\t * @var string\n\t *\/\n\tpublic static $model = Shop::class;\n\n\t\/**\n\t * Modal callback\n\t * @param  Respond  $respond\n\t * @return void\n\t *\/\n\tpublic function sayHelloEvent(Respond $respond): void\n\t{\n\t\t$respond-&gt;toast_success(\n\t\t\t'Hello ' . $this-&gt;modelInput('name', 'Guest')\n\t\t);\n\t}\n\n\t\/**\n\t * @param  Page  $page\n\t * @param  Modal  $modal\n\t * @param  Card  $card\n\t * @param  SearchForm  $searchForm\n\t * @param  ModelTable  $modelTable\n\t * @param  Form  $form\n\t * @param  Buttons  $buttons\n\t * @return Page\n\t *\/\n\tpublic function index(\n\t\tPage $page,\n\t\tModal $modal,\n\t\tCard $card,\n\t\tSearchForm $searchForm,\n\t\tModelTable $modelTable,\n\t\tForm $form,\n\t\tButtons $buttons,\n\t): Page {\n\t\treturn $page\n\t\t\t-&gt;modal(\n\t\t\t\t$modal-&gt;title('Say hello modal')-&gt;sizeExtra()-&gt;closable()-&gt;temporary(),\n\t\t\t\t$modal-&gt;submitEvent([$this, 'sayHelloEvent']),\n\t\t\t\t$modal-&gt;form(\n\t\t\t\t\t$form-&gt;input_name()-&gt;queryable(),\n\t\t\t\t),\n\t\t\t\t$modal-&gt;buttons()-&gt;success()-&gt;icon_save()-&gt;title('Send')-&gt;modalSubmit(),\n\t\t\t)\n\t\t\t-&gt;modal(\n\t\t\t\t$modal-&gt;title('Next modal')-&gt;name('not-save'),\n\t\t\t\t$modal-&gt;form(\n\t\t\t\t\t$form-&gt;method('GET'),\n\t\t\t\t\t$form-&gt;input_name()-&gt;queryable(),\n\t\t\t\t\t$form-&gt;watch(\n\t\t\t\t\t\t$this-&gt;isModelInput('name', 'zzz'),\n\t\t\t\t\t\t$form-&gt;p('Simple paragraph text in watch')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t$modal-&gt;buttons(\n\t\t\t\t\t$buttons-&gt;primary()-&gt;title('Later')-&gt;modalHide(),\n\t\t\t\t\t$buttons-&gt;danger()-&gt;title('Close')-&gt;modalDestroy(),\n\t\t\t\t),\n\t\t\t\t$modal-&gt;buttons()-&gt;success()-&gt;title('\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c')-&gt;icon_save()-&gt;modalSubmit(),\n\t\t\t)\n\t\t\t-&gt;card(\n\t\t\t\t$card-&gt;buttons(\n\t\t\t\t\t$buttons-&gt;info()-&gt;title('Call modal 1')-&gt;icon_user()-&gt;modal(),\n\t\t\t\t\t$buttons-&gt;dark()-&gt;title('Call modal 2 with data')-&gt;icon_user()\n\t\t\t\t\t\t-&gt;modal('not-save', ['name' =&gt; 'Xsaven']),\n\t\t\t\t),\n\t\t\t\t$card-&gt;buttons()-&gt;info()-&gt;title('Simple info button')-&gt;click(fn () =&gt; 'you action'),\n\t\t\t\t$card-&gt;buttons()-&gt;info()-&gt;title('Simple button with data sending')-&gt;click(\n\t\t\t\t\tfn ($name) =&gt; $name, ['name' =&gt; 'Joe']\n\t\t\t\t),\n\t\t\t\t$card-&gt;buttons()-&gt;success()-&gt;title('Send respond to answer')-&gt;icon_fan()-&gt;click(\n\t\t\t\t\tfn (Respond $respond) =&gt; $respond-&gt;toast_success('Good!!!!!')\n\t\t\t\t),\n\t\t\t\t$card-&gt;search_form(\n\t\t\t\t\t$searchForm-&gt;inDefault(\n\t\t\t\t\t\t$searchForm-&gt;in_input_name(),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t$card-&gt;statisticBody(\n\t\t\t\t\t$modelTable-&gt;action(\n\t\t\t\t\t\tfn (Respond $respond, $object, $ids)\n\t\t\t\t\t\t=&gt; $respond-&gt;toast_success(\n\t\t\t\t\t\t\t'It is: ' . $object . ' With: ' . json_encode($ids)\n\t\t\t\t\t\t)\n\t\t\t\t\t)-&gt;title('Test!')-&gt;nullable(),\n\t\t\t\t\t$modelTable-&gt;col_photo(),\n\t\t\t\t\t$modelTable-&gt;col_name(),\n\t\t\t\t\t$modelTable-&gt;col_phone(),\n\t\t\t\t\t$modelTable-&gt;to_prepend()-&gt;buttons(\n\t\t\t\t\t\t$buttons-&gt;info()-&gt;title('Button with data sending 1')-&gt;click(\n\t\t\t\t\t\t\tfn ($id) =&gt; $id, \n\t\t\t\t\t\t\t['id' =&gt; fn ($model) =&gt; $model-&gt;id]\n\t\t\t\t\t\t),\n\t\t\t\t\t\t$buttons-&gt;success()-&gt;title('Button with data sending 2')-&gt;click(\n\t\t\t\t\t\t\tfn ($name) =&gt; $name,\n\t\t\t\t\t\t\t['name' =&gt; fn ($model) =&gt; $model-&gt;name]\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\t$modelTable-&gt;buttons(\n\t\t\t\t\t\t$buttons-&gt;success()-&gt;title('Get respond to answer')-&gt;icon_fan()-&gt;click(\n\t\t\t\t\t\t\tfn (?int $id, ?string $name, Respond $respond)\n\t\t\t\t\t\t\t=&gt; $respond-&gt;toast_success(\n\t\t\t\t\t\t\t\t'Take the: ' . $id . ', And name: ' . $name\n\t\t\t\t\t\t\t), ['id', 'name']\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\t$modelTable-&gt;dblclick(\n\t\t\t\t\t\tfn (Respond $respond)\n\t\t\t\t\t\t=&gt; $respond-&gt;toast_success('Simple dblclick on model table')\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\t\/**\n\t * @param  Page  $page\n\t * @param  Card  $card\n\t * @param  Form  $form\n\t * @param  Tab  $tab\n\t * @return Page\n\t *\/\n\tpublic function matrix(\n\t\tPage $page,\n\t\tCard $card,\n\t\tForm $form,\n\t\tTab $tab\n\t): Page {\n\t\treturn $page-&gt;card(\n\t\t\t$card-&gt;buttons()-&gt;info()-&gt;title('Get name')-&gt;click(\n\t\t\t\tfn (Respond $respond, $name)\n\t\t\t\t=&gt; $respond-&gt;toast_success(&quot;Hello &quot; . $name), ['name']\n\t\t\t),\n\t\t\t$card-&gt;form(\n\t\t\t\t$form-&gt;divider('Types'),\n\t\t\t\t\/\/ Query manipulation\n\t\t\t\t$form-&gt;ifNotQuery('test')-&gt;buttons()-&gt;info()-&gt;title('query')-&gt;query(['test' =&gt; 1]),\n\t\t\t\t$form-&gt;ifQuery('test')-&gt;buttons()-&gt;info()-&gt;title('unset query')-&gt;unsetQuery(['test']),\n\t\t\t\t\/\/ Form manipulation\n\t\t\t\t$form-&gt;divider('Form'),\n\t\t\t\t$form-&gt;tabGeneral(\n\t\t\t\t\t$tab-&gt;input_photo(),\n\t\t\t\t\t$tab-&gt;buttons()-&gt;info()-&gt;title('Get name inside')\n\t\t\t\t\t\t-&gt;click(fn ($name) =&gt; $name, ['name']),\n\t\t\t\t\t$tab-&gt;select_user_id()-&gt;load(User::class),\n\t\t\t\t\t$tab-&gt;input_city(),\n\t\t\t\t\t$tab-&gt;input_name(),\n\t\t\t\t\t$tab-&gt;input_phone(),\n\t\t\t\t),\n\t\t\t),\n\t\t\t$card-&gt;footer_form(),\n\t\t);\n\t}\n\n\t\/**\n\t * @param  Page  $page\n\t * @param  Card  $card\n\t * @param  ModelInfoTable  $modelInfoTable\n\t * @return Page\n\t *\/\n\tpublic function show(\n\t\tPage $page,\n\t\tCard $card,\n\t\tModelInfoTable $modelInfoTable\n\t): Page {\n\t\treturn $page-&gt;card(\n\t\t\t$card-&gt;model_info_table(\n\t\t\t\t$modelInfoTable-&gt;rowDefault(\n\t\t\t\t\t$modelInfoTable-&gt;row_photo(),\n\t\t\t\t\t$modelInfoTable-&gt;row_name(),\n\t\t\t\t\t$modelInfoTable-&gt;row_phone(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n}\n<\/code><\/pre>\n",
        "content_md": "\nConventionally, we have a \u201cShop\u201d model with user information about their store. Below is an example of using most of the components in the controller.\n\n```php\nclass ShopController extends Controller\n{\n\t\/**\n\t * Static variable Model.\n\t * @var string\n\t *\/\n\tpublic static $model = Shop::class;\n\n\t\/**\n\t * Modal callback\n\t * @param  Respond  $respond\n\t * @return void\n\t *\/\n\tpublic function sayHelloEvent(Respond $respond): void\n\t{\n\t\t$respond->toast_success(\n\t\t\t'Hello ' . $this->modelInput('name', 'Guest')\n\t\t);\n\t}\n\n\t\/**\n\t * @param  Page  $page\n\t * @param  Modal  $modal\n\t * @param  Card  $card\n\t * @param  SearchForm  $searchForm\n\t * @param  ModelTable  $modelTable\n\t * @param  Form  $form\n\t * @param  Buttons  $buttons\n\t * @return Page\n\t *\/\n\tpublic function index(\n\t\tPage $page,\n\t\tModal $modal,\n\t\tCard $card,\n\t\tSearchForm $searchForm,\n\t\tModelTable $modelTable,\n\t\tForm $form,\n\t\tButtons $buttons,\n\t): Page {\n\t\treturn $page\n\t\t\t->modal(\n\t\t\t\t$modal->title('Say hello modal')->sizeExtra()->closable()->temporary(),\n\t\t\t\t$modal->submitEvent([$this, 'sayHelloEvent']),\n\t\t\t\t$modal->form(\n\t\t\t\t\t$form->input_name()->queryable(),\n\t\t\t\t),\n\t\t\t\t$modal->buttons()->success()->icon_save()->title('Send')->modalSubmit(),\n\t\t\t)\n\t\t\t->modal(\n\t\t\t\t$modal->title('Next modal')->name('not-save'),\n\t\t\t\t$modal->form(\n\t\t\t\t\t$form->method('GET'),\n\t\t\t\t\t$form->input_name()->queryable(),\n\t\t\t\t\t$form->watch(\n\t\t\t\t\t\t$this->isModelInput('name', 'zzz'),\n\t\t\t\t\t\t$form->p('Simple paragraph text in watch')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t$modal->buttons(\n\t\t\t\t\t$buttons->primary()->title('Later')->modalHide(),\n\t\t\t\t\t$buttons->danger()->title('Close')->modalDestroy(),\n\t\t\t\t),\n\t\t\t\t$modal->buttons()->success()->title('\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c')->icon_save()->modalSubmit(),\n\t\t\t)\n\t\t\t->card(\n\t\t\t\t$card->buttons(\n\t\t\t\t\t$buttons->info()->title('Call modal 1')->icon_user()->modal(),\n\t\t\t\t\t$buttons->dark()->title('Call modal 2 with data')->icon_user()\n\t\t\t\t\t\t->modal('not-save', ['name' => 'Xsaven']),\n\t\t\t\t),\n\t\t\t\t$card->buttons()->info()->title('Simple info button')->click(fn () => 'you action'),\n\t\t\t\t$card->buttons()->info()->title('Simple button with data sending')->click(\n\t\t\t\t\tfn ($name) => $name, ['name' => 'Joe']\n\t\t\t\t),\n\t\t\t\t$card->buttons()->success()->title('Send respond to answer')->icon_fan()->click(\n\t\t\t\t\tfn (Respond $respond) => $respond->toast_success('Good!!!!!')\n\t\t\t\t),\n\t\t\t\t$card->search_form(\n\t\t\t\t\t$searchForm->inDefault(\n\t\t\t\t\t\t$searchForm->in_input_name(),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t$card->statisticBody(\n\t\t\t\t\t$modelTable->action(\n\t\t\t\t\t\tfn (Respond $respond, $object, $ids)\n\t\t\t\t\t\t=> $respond->toast_success(\n\t\t\t\t\t\t\t'It is: ' . $object . ' With: ' . json_encode($ids)\n\t\t\t\t\t\t)\n\t\t\t\t\t)->title('Test!')->nullable(),\n\t\t\t\t\t$modelTable->col_photo(),\n\t\t\t\t\t$modelTable->col_name(),\n\t\t\t\t\t$modelTable->col_phone(),\n\t\t\t\t\t$modelTable->to_prepend()->buttons(\n\t\t\t\t\t\t$buttons->info()->title('Button with data sending 1')->click(\n\t\t\t\t\t\t\tfn ($id) => $id, \n\t\t\t\t\t\t\t['id' => fn ($model) => $model->id]\n\t\t\t\t\t\t),\n\t\t\t\t\t\t$buttons->success()->title('Button with data sending 2')->click(\n\t\t\t\t\t\t\tfn ($name) => $name,\n\t\t\t\t\t\t\t['name' => fn ($model) => $model->name]\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\t$modelTable->buttons(\n\t\t\t\t\t\t$buttons->success()->title('Get respond to answer')->icon_fan()->click(\n\t\t\t\t\t\t\tfn (?int $id, ?string $name, Respond $respond)\n\t\t\t\t\t\t\t=> $respond->toast_success(\n\t\t\t\t\t\t\t\t'Take the: ' . $id . ', And name: ' . $name\n\t\t\t\t\t\t\t), ['id', 'name']\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\t$modelTable->dblclick(\n\t\t\t\t\t\tfn (Respond $respond)\n\t\t\t\t\t\t=> $respond->toast_success('Simple dblclick on model table')\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\t\/**\n\t * @param  Page  $page\n\t * @param  Card  $card\n\t * @param  Form  $form\n\t * @param  Tab  $tab\n\t * @return Page\n\t *\/\n\tpublic function matrix(\n\t\tPage $page,\n\t\tCard $card,\n\t\tForm $form,\n\t\tTab $tab\n\t): Page {\n\t\treturn $page->card(\n\t\t\t$card->buttons()->info()->title('Get name')->click(\n\t\t\t\tfn (Respond $respond, $name)\n\t\t\t\t=> $respond->toast_success(\"Hello \" . $name), ['name']\n\t\t\t),\n\t\t\t$card->form(\n\t\t\t\t$form->divider('Types'),\n\t\t\t\t\/\/ Query manipulation\n\t\t\t\t$form->ifNotQuery('test')->buttons()->info()->title('query')->query(['test' => 1]),\n\t\t\t\t$form->ifQuery('test')->buttons()->info()->title('unset query')->unsetQuery(['test']),\n\t\t\t\t\/\/ Form manipulation\n\t\t\t\t$form->divider('Form'),\n\t\t\t\t$form->tabGeneral(\n\t\t\t\t\t$tab->input_photo(),\n\t\t\t\t\t$tab->buttons()->info()->title('Get name inside')\n\t\t\t\t\t\t->click(fn ($name) => $name, ['name']),\n\t\t\t\t\t$tab->select_user_id()->load(User::class),\n\t\t\t\t\t$tab->input_city(),\n\t\t\t\t\t$tab->input_name(),\n\t\t\t\t\t$tab->input_phone(),\n\t\t\t\t),\n\t\t\t),\n\t\t\t$card->footer_form(),\n\t\t);\n\t}\n\n\t\/**\n\t * @param  Page  $page\n\t * @param  Card  $card\n\t * @param  ModelInfoTable  $modelInfoTable\n\t * @return Page\n\t *\/\n\tpublic function show(\n\t\tPage $page,\n\t\tCard $card,\n\t\tModelInfoTable $modelInfoTable\n\t): Page {\n\t\treturn $page->card(\n\t\t\t$card->model_info_table(\n\t\t\t\t$modelInfoTable->rowDefault(\n\t\t\t\t\t$modelInfoTable->row_photo(),\n\t\t\t\t\t$modelInfoTable->row_name(),\n\t\t\t\t\t$modelInfoTable->row_phone(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n}\n```\n"
    },
    {
        "name": "Extending.md",
        "title": "Extending",
        "content_html": "<p>Start typing here...<\/p>\n",
        "content_md": "\nStart typing here..."
    },
    {
        "name": "File.md",
        "title": "File",
        "content_html": "<p>This feature provides a sophisticated input method for selecting an image from the local file system.<\/p>\n<pre><code class=\"language-php\">$form-&gt;file('download_file', 'Download file')\n<\/code><\/pre>\n<p>Or for multiple file selection.<\/p>\n<pre><code class=\"language-php\">$form-&gt;files('download_files[]', 'Download files')\n<\/code><\/pre>\n",
        "content_md": "\nThis feature provides a sophisticated input method for selecting an image from the local file system.\n```php\n$form->file('download_file', 'Download file')\n```\nOr for multiple file selection.\n```php\n$form->files('download_files[]', 'Download files')\n```\n"
    },
    {
        "name": "Form.md",
        "title": "Form",
        "content_html": "<p>The data entry form accommodates a diverse array of input fields. It constitutes a distinct component within the delegate class <code>\\App\\Admin\\Delegates\\Form<\/code>. Moreover, the delegate offers supplementary aids such as <code>tabGeneral<\/code> to facilitate the construction of pre-configured tables.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\Card;\nuse App\\Admin\\Delegates\\Form;\nuse App\\Admin\\Delegates\\Tab;\nuse Admin\\Page;\n\npublic function matrix(Page $page, Card $card, Form $form, Tab $tab)\n{\n\treturn $page-&gt;card(\n\t\t$card-&gt;form(\n\t\t\t$form-&gt;ifEdit()-&gt;info_id(),\n\t\t\t...\n\t\t\t$form-&gt;ifEdit()-&gt;info_updated_at(),\n\t\t\t$form-&gt;ifEdit()-&gt;info_created_at(),\n\t\t),\n\t\t$card-&gt;footer_form(),\n\t);\n\t\/\/OR\n\treturn $page-&gt;card(\n\t\t$card-&gt;form(\n\t\t\t$form-&gt;tabGeneral(\n\t\t\t\t$tab-&gt;input_name,\n\t\t\t\t...\n\t\t\t)\n\t\t),\n\t\t$card-&gt;footer_form(),\n\t);\n}\n<\/code><\/pre>\n<p>When a property or method begins with <code>[input method]_*<\/code>, an option emerges to designate a name within the model or property name, such as <code>input_name<\/code>. In case of a method, the initial parameter pertains to the label configuration, set as <code>-&gt;input_name('Name of row')<\/code>.<\/p>\n<blockquote>\n<p>Inputs can be embedded not only in the form, so you can create new tabs inside the form or combine them with other components.<\/p>\n<\/blockquote>\n<p>The following enumerates all available input options that can be integrated.\nThe form facilitates mass methods, which are individually accessible for all inputs as well.<\/p>\n<h3>Vertical mode<\/h3>\n<p>This setting adjusts the layout of the group title to be displayed vertically instead of horizontally.<\/p>\n<pre><code class=\"language-php\">$form-&gt;vertical()\n<\/code><\/pre>\n<h3>Horizontal mode<\/h3>\n<p>This setting adjusts the layout of the group title to be displayed horizontally instead of vertically.<\/p>\n<pre><code class=\"language-php\">$form-&gt;horizontal()\n<\/code><\/pre>\n<h3>Reversed<\/h3>\n<p>This setting flips the orientation of the group title.<\/p>\n<pre><code class=\"language-php\">$form-&gt;reversed()\n<\/code><\/pre>\n<h3>Set label width<\/h3>\n<p>This setting determines the number of columns in the header when the group is displayed horizontally.<\/p>\n<pre><code class=\"language-php\">$form-&gt;label_width(int $width)\n<\/code><\/pre>\n<h3>Input field abstraction<\/h3>\n<p>This abstraction class is the main class from which all inputs are inherited.\nAll methods that this abstract class supports are the same for all other inputs.<\/p>\n<h3>Vertical<\/h3>\n<p>This setting specifies that the group with the title should be displayed vertically.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;vertical()\n<\/code><\/pre>\n<h3>Horizontal<\/h3>\n<p>This setting specifies that the group with the title should be displayed horizontally.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;horizontal()\n<\/code><\/pre>\n<h3>Label width<\/h3>\n<p>This setting allows you to specify the number of header columns to display in horizontal mode.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;label_width(int $width)\n<\/code><\/pre>\n<h3>Queryable<\/h3>\n<p>This feature enables you to retrieve the value of an input from the <code>Request<\/code> parameters using the input name.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;queryable()\n<\/code><\/pre>\n<h3>Value<\/h3>\n<p>This functionality permits you to set a predetermined value for the input field.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;value($value)\n<\/code><\/pre>\n<h3>default<\/h3>\n<p>This feature enables you to establish a default value for the input field.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;default($value)\n<\/code><\/pre>\n<h3>Default from model<\/h3>\n<p>This functionality allows you to set a default value for an input field from an existing model, even if the name of the model differs from the input name.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;defaultFromModel(string $path)\n<\/code><\/pre>\n<h3>Crypt<\/h3>\n<p>This functionality encrypts the value of a field before storing it, providing an additional layer of security for sensitive data.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;crypt()\n<\/code><\/pre>\n<h3>Info<\/h3>\n<p>This feature allows adding additional information to the input field, providing users with guidance or context about the expected input.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;info(string $info)\n<\/code><\/pre>\n<h3>Value to<\/h3>\n<p>This feature enables processing the value of an input field with a custom function after it has been generated or retrieved. It allows for further customization or manipulation of the input value before it is displayed or used.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;value_to(callable $call)\n<\/code><\/pre>\n<h3>Nullable<\/h3>\n<p>This functionality makes the fields optional for input, meaning they are not required to be filled out. Additionally, it adds the corresponding rule to the validation, ensuring that if the field is left blank, it will pass validation without an error.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;nullable()\n<\/code><\/pre>\n<h3>Disabled<\/h3>\n<p>This feature disables the input, preventing users from entering or modifying its value. It renders the input non-editable, essentially locking its current value.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;disabled()\n<\/code><\/pre>\n<h3>Mask<\/h3>\n<p>This functionality applies a mask to the input, enforcing a specific format for user input. Masks are patterns that define how data should be formatted as it is entered into an input field. They can be used, for example, to enforce consistent formatting for phone numbers, dates, or credit card numbers.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;mask(string $mask)\n<\/code><\/pre>\n<p><a href=\"https:\/\/github.com\/RobinHerbots\/Inputmask\">https:\/\/github.com\/RobinHerbots\/Inputmask<\/a><\/p>\n<h3>Duplication how slug<\/h3>\n<p>This function constantly copies its value as a slug into the input whose ID was specified. It is designed to automatically generate a slug based on the input value and its unique identifier.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;duplication_how_slug('#input_slug')\n<\/code><\/pre>\n<h3>Duplication<\/h3>\n<p>This function continually duplicates its value into the input field with the specified ID. It's useful for automatically populating one input field with the value of another input field identified by its ID.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;duplication('#input_slug')\n<\/code><\/pre>\n<h3>Slugable<\/h3>\n<p>This function converts the input string into a slug format. A slug is a URL-friendly version of a string, typically used in URLs to represent the title of a resource. It removes special characters, replaces spaces with hyphens, and converts all characters to lowercase.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input(...)-&gt;slugable()\n<\/code><\/pre>\n<h2>jQuery validation methods<\/h2>\n<ul>\n<li>is_required()<\/li>\n<li>is_email()<\/li>\n<li>is_url()<\/li>\n<li>is_date()<\/li>\n<li>is_number()<\/li>\n<li>is_digits()<\/li>\n<li>is_equal_to(string $field)<\/li>\n<li>is_max_length(int $max)<\/li>\n<li>is_min_length(int $min)<\/li>\n<li>is_range_length(int $min, int $max)<\/li>\n<li>is_range(int $min, int $max)<\/li>\n<li>is_max(int $max)<\/li>\n<li>is_min(int $min)<\/li>\n<\/ul>\n<p>Supports all <code>Laravel<\/code> validation methods. The available list of validation methods can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/RulesBackTrait.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThe data entry form accommodates a diverse array of input fields. It constitutes a distinct component within the delegate class `\\App\\Admin\\Delegates\\Form`. Moreover, the delegate offers supplementary aids such as `tabGeneral` to facilitate the construction of pre-configured tables.\n\n```php\nuse App\\Admin\\Delegates\\Card;\nuse App\\Admin\\Delegates\\Form;\nuse App\\Admin\\Delegates\\Tab;\nuse Admin\\Page;\n\npublic function matrix(Page $page, Card $card, Form $form, Tab $tab)\n{\n\treturn $page->card(\n\t\t$card->form(\n\t\t\t$form->ifEdit()->info_id(),\n\t\t\t...\n\t\t\t$form->ifEdit()->info_updated_at(),\n\t\t\t$form->ifEdit()->info_created_at(),\n\t\t),\n\t\t$card->footer_form(),\n\t);\n\t\/\/OR\n\treturn $page->card(\n\t\t$card->form(\n\t\t\t$form->tabGeneral(\n\t\t\t\t$tab->input_name,\n\t\t\t\t...\n\t\t\t)\n\t\t),\n\t\t$card->footer_form(),\n\t);\n}\n```\nWhen a property or method begins with `[input method]_*`, an option emerges to designate a name within the model or property name, such as `input_name`. In case of a method, the initial parameter pertains to the label configuration, set as `->input_name('Name of row')`.\n\n> Inputs can be embedded not only in the form, so you can create new tabs inside the form or combine them with other components.\n\nThe following enumerates all available input options that can be integrated.\nThe form facilitates mass methods, which are individually accessible for all inputs as well.\n\n\n### Vertical mode\nThis setting adjusts the layout of the group title to be displayed vertically instead of horizontally.\n```php\n$form->vertical()\n```\n\n### Horizontal mode\nThis setting adjusts the layout of the group title to be displayed horizontally instead of vertically.\n```php\n$form->horizontal()\n```\n\n### Reversed\nThis setting flips the orientation of the group title.\n```php\n$form->reversed()\n```\n\n### Set label width\nThis setting determines the number of columns in the header when the group is displayed horizontally.\n```php\n$form->label_width(int $width)\n```\n\n### Input field abstraction\nThis abstraction class is the main class from which all inputs are inherited.\nAll methods that this abstract class supports are the same for all other inputs.\n\n### Vertical\nThis setting specifies that the group with the title should be displayed vertically.\n```php\n$form->input(...)->vertical()\n```\n\n### Horizontal\nThis setting specifies that the group with the title should be displayed horizontally.\n```php\n$form->input(...)->horizontal()\n```\n\n### Label width\nThis setting allows you to specify the number of header columns to display in horizontal mode.\n```php\n$form->input(...)->label_width(int $width)\n```\n\n\n### Queryable\nThis feature enables you to retrieve the value of an input from the `Request` parameters using the input name.\n```php\n$form->input(...)->queryable()\n```\n\n### Value\nThis functionality permits you to set a predetermined value for the input field.\n```php\n$form->input(...)->value($value)\n```\n\n### default\nThis feature enables you to establish a default value for the input field.\n```php\n$form->input(...)->default($value)\n```\n\n### Default from model\nThis functionality allows you to set a default value for an input field from an existing model, even if the name of the model differs from the input name.\n```php\n$form->input(...)->defaultFromModel(string $path)\n```\n\n### Crypt\nThis functionality encrypts the value of a field before storing it, providing an additional layer of security for sensitive data.\n```php\n$form->input(...)->crypt()\n```\n\n### Info\nThis feature allows adding additional information to the input field, providing users with guidance or context about the expected input.\n```php\n$form->input(...)->info(string $info)\n```\n\n### Value to\nThis feature enables processing the value of an input field with a custom function after it has been generated or retrieved. It allows for further customization or manipulation of the input value before it is displayed or used.\n```php\n$form->input(...)->value_to(callable $call)\n```\n\n### Nullable\nThis functionality makes the fields optional for input, meaning they are not required to be filled out. Additionally, it adds the corresponding rule to the validation, ensuring that if the field is left blank, it will pass validation without an error.\n```php\n$form->input(...)->nullable()\n```\n\n### Disabled\nThis feature disables the input, preventing users from entering or modifying its value. It renders the input non-editable, essentially locking its current value.\n```php\n$form->input(...)->disabled()\n```\n\n### Mask\nThis functionality applies a mask to the input, enforcing a specific format for user input. Masks are patterns that define how data should be formatted as it is entered into an input field. They can be used, for example, to enforce consistent formatting for phone numbers, dates, or credit card numbers.\n```php\n$form->input(...)->mask(string $mask)\n```\n[https:\/\/github.com\/RobinHerbots\/Inputmask](https:\/\/github.com\/RobinHerbots\/Inputmask)\n\n### Duplication how slug\nThis function constantly copies its value as a slug into the input whose ID was specified. It is designed to automatically generate a slug based on the input value and its unique identifier.\n```php\n$form->input(...)->duplication_how_slug('#input_slug')\n```\n\n### Duplication\nThis function continually duplicates its value into the input field with the specified ID. It's useful for automatically populating one input field with the value of another input field identified by its ID.\n```php\n$form->input(...)->duplication('#input_slug')\n```\n\n### Slugable\nThis function converts the input string into a slug format. A slug is a URL-friendly version of a string, typically used in URLs to represent the title of a resource. It removes special characters, replaces spaces with hyphens, and converts all characters to lowercase.\n```php\n$form->input(...)->slugable()\n```\n\n## jQuery validation methods\n\n- is_required()\n- is_email()\n- is_url()\n- is_date()\n- is_number()\n- is_digits()\n- is_equal_to(string $field)\n- is_max_length(int $max)\n- is_min_length(int $min)\n- is_range_length(int $min, int $max)\n- is_range(int $min, int $max)\n- is_max(int $max)\n- is_min(int $min)\n\nSupports all `Laravel` validation methods. The available list of validation methods can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/RulesBackTrait.php).\n"
    },
    {
        "name": "GRID-Column.md",
        "title": "GRID Column",
        "content_html": "<p>The Bootstrap Grid column serves as a tool for organizing components on an admin panel page, acting as a distinct component within the delegator class <code>\\App\\Admin\\Delegates\\Column<\/code>. This functionality enables the structured and aesthetically pleasing arrangement of various elements across the administrative interface.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\Column;\n\n$page-&gt;column(\n\t...\n)\n<\/code><\/pre>\n<p><strong>Grid row<\/strong><\/p>\n<p>The Bootstrap Grid row functions as a mechanism for grouping together columns, facilitating the structured layout and cohesive organization of content within the user interface.<\/p>\n<pre><code class=\"language-php\">$page-&gt;row(\n\t...\n)\n<\/code><\/pre>\n",
        "content_md": "\nThe Bootstrap Grid column serves as a tool for organizing components on an admin panel page, acting as a distinct component within the delegator class `\\App\\Admin\\Delegates\\Column`. This functionality enables the structured and aesthetically pleasing arrangement of various elements across the administrative interface.\n```php\nuse App\\Admin\\Delegates\\Column;\n\n$page->column(\n\t...\n)\n```\n**Grid row**\n\nThe Bootstrap Grid row functions as a mechanism for grouping together columns, facilitating the structured layout and cohesive organization of content within the user interface.\n```php\n$page->row(\n\t...\n)\n```\n"
    },
    {
        "name": "Graph.md",
        "title": "Graph",
        "content_html": "<p>The component for drawing charts from the model is a separate component delegated by the class <code>\\App\\Admin\\Delegates\\ChartJs<\/code>.\nThis component provides functionality to generate charts based on data from the model.<\/p>\n<h2>Make simple chart<\/h2>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\ChartJs;\n\nreturn $page-&gt;card(\n\t$card-&gt;title('Registrations per month'),\n\t$card-&gt;chart_js(\n\t\t$chartJs-&gt;model(User::class),\n\t\t$chartJs-&gt;setDefaultDataBetween('created_at', [now()-&gt;subMonth(), now()]),\n\t\t$chartJs-&gt;groupDataByAt('created_at'),\n\t\t$chartJs-&gt;eachPointCount('Created'),\n\t\t$chartJs-&gt;miniChart(),\n\t)\n)\n<\/code><\/pre>\n<h2>Use custom chart data<\/h2>\n<p>To generate a chart using Chart.js and custom chart data, you can utilize the ChartJs component and provide your own data. Here's an example of how you can do it:<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;title('Registrations per month'),\n\t$card-&gt;chart_js(\n\t\t$chartJs-&gt;customChart('Title', [20], [255, 255, 255]),\n\t)\n)\n<\/code><\/pre>\n<p>OR<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;title('Registrations per month'),\n\t$card-&gt;chart_js(\n\t\t$chartJs-&gt;customChart('Title', [[20, 30], [40, 50]], [[255, 255, 255], [211, 211, 211]]),\n\t)\n)\n<\/code><\/pre>\n<h2>Load data after load page (Lazy loading)<\/h2>\n<p>To implement lazy loading of chart data after the page loads, you can use the load method provided by the <code>ChartJsComponent<\/code> class. Here's how you can do it:<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;title('Registrations per month'),\n\t$card-&gt;chart_js(\n\t\t$chartJs-&gt;load(function (Admin\\Components\\ChartJsComponent $component) {\n\t\t\t\/\/ Some logic for data getting...\n\t\t\t$component-&gt;customChart('Title', [[20, 30], [40, 50]], [[255, 255, 255], [211, 211, 211]]);\n\t\t}),\n\t)\n)\n<\/code><\/pre>\n<p>This code snippet creates a card with the title 'Registrations per month' and a chart component. The chart component uses lazy loading, meaning that the chart data will be fetched and rendered after the page has loaded. Inside the <code>load<\/code> method, you can define the logic to fetch the chart data, such as querying a database. Once the data is fetched, the <code>customChart<\/code> method is used to customize and render the chart.<\/p>\n",
        "content_md": "\nThe component for drawing charts from the model is a separate component delegated by the class `\\App\\Admin\\Delegates\\ChartJs`.\nThis component provides functionality to generate charts based on data from the model.\n\n## Make simple chart\n```php\nuse App\\Admin\\Delegates\\ChartJs;\n\nreturn $page->card(\n\t$card->title('Registrations per month'),\n\t$card->chart_js(\n\t\t$chartJs->model(User::class),\n\t\t$chartJs->setDefaultDataBetween('created_at', [now()->subMonth(), now()]),\n\t\t$chartJs->groupDataByAt('created_at'),\n\t\t$chartJs->eachPointCount('Created'),\n\t\t$chartJs->miniChart(),\n\t)\n)\n```\n\n## Use custom chart data\nTo generate a chart using Chart.js and custom chart data, you can utilize the ChartJs component and provide your own data. Here's an example of how you can do it:\n```php\nreturn $page->card(\n\t$card->title('Registrations per month'),\n\t$card->chart_js(\n\t\t$chartJs->customChart('Title', [20], [255, 255, 255]),\n\t)\n)\n```\nOR\n```php\nreturn $page->card(\n\t$card->title('Registrations per month'),\n\t$card->chart_js(\n\t\t$chartJs->customChart('Title', [[20, 30], [40, 50]], [[255, 255, 255], [211, 211, 211]]),\n\t)\n)\n```\n\n## Load data after load page (Lazy loading)\nTo implement lazy loading of chart data after the page loads, you can use the load method provided by the `ChartJsComponent` class. Here's how you can do it:\n```php\nreturn $page->card(\n\t$card->title('Registrations per month'),\n\t$card->chart_js(\n\t\t$chartJs->load(function (Admin\\Components\\ChartJsComponent $component) {\n\t\t\t\/\/ Some logic for data getting...\n\t\t\t$component->customChart('Title', [[20, 30], [40, 50]], [[255, 255, 255], [211, 211, 211]]);\n\t\t}),\n\t)\n)\n```\nThis code snippet creates a card with the title 'Registrations per month' and a chart component. The chart component uses lazy loading, meaning that the chart data will be fetched and rendered after the page has loaded. Inside the `load` method, you can define the logic to fetch the chart data, such as querying a database. Once the data is fetched, the `customChart` method is used to customize and render the chart.\n"
    },
    {
        "name": "Helpers.md",
        "title": "Helpers",
        "content_html": "<p>The extension has a set of helpers that can make development a little easier for you.<\/p>\n<h3>Logging user actions<\/h3>\n<pre><code class=\"language-php\">admin_log('Title of action')\n\/\/ OR\nadmin_log('Title of action', 'With details')\n<\/code><\/pre>\n<p>There are also certain types of helpers.<\/p>\n<pre><code class=\"language-php\">admin_log_warning('Title of warning action')\nadmin_log_primary(...)\nadmin_log_secondary(...)\nadmin_log_success(...)\nadmin_log_info(...)\nadmin_log_danger(...)\nadmin_log_dark(...)\n<\/code><\/pre>\n<h3>Path to extension application<\/h3>\n<pre><code class=\"language-php\">admin_relative_path() \/\/ &quot;\/app\/Admin&quot;\n\/\/ OR\nadmin_relative_path(&quot;with\/my\/path&quot;) \/\/ &quot;\/app\/Admin\/with\/my\/path&quot;\n<\/code><\/pre>\n<h3>Extension namespace<\/h3>\n<pre><code class=\"language-php\">admin_app_namespace() \/\/ &quot;App\\Admin&quot;\n\/\/ OR\nadmin_app_namespace(&quot;WithMyNamespace&quot;) \/\/ &quot;App\\Admin\\WithMyNamespace&quot;\n<\/code><\/pre>\n<h3>Controller model<\/h3>\n<pre><code class=\"language-php\">admin_controller_model() \/\/ &quot;Model\/Class\/Namespace&quot;\n<\/code><\/pre>\n<h3>Full path to extension application<\/h3>\n<pre><code class=\"language-php\">admin_app_path() \/\/ &quot;\/Users\/default\/PhpstormProjects\/project\/app\/Admin&quot;\n\/\/ OR\nadmin_app_path(&quot;MyPath&quot;) \/\/ &quot;\/Users\/default\/PhpstormProjects\/project\/app\/Admin\/MyPath&quot;\n<\/code><\/pre>\n<h3>Link prefix<\/h3>\n<pre><code class=\"language-php\">admin_uri() \/\/ &quot;\/admin&quot;\n\/\/ OR\nadmin_uri(&quot;with\/my\/endpoint&quot;) \/\/ &quot;\/admin\/with\/my\/endpoint&quot;\n<\/code><\/pre>\n<h3>External link to media files<\/h3>\n<pre><code class=\"language-php\">admin_asset() \/\/ &quot;https:\/\/domain.test\/admin&quot;\n\/\/ OR\nadmin_asset(&quot;js\/app.js&quot;) \/\/ &quot;https:\/\/domain.test\/admin\/js\/app.js&quot;\n<\/code><\/pre>\n<h3>Quick access to an authorized user<\/h3>\n<pre><code class=\"language-php\">admin_user()\n\/\/ OR\nadmin_user()?-&gt;name\n\/\/ OR\nadmin()\n<\/code><\/pre>\n<h3>Link generator with parameters<\/h3>\n<pre><code class=\"language-php\">makeUrlWithParams(url()-&gt;current(), [&quot;date&quot; =&gt; now()-&gt;toDateString()]) \n\/\/ &quot;https:\/\/domain.test?date=2022-01-01&quot;\n<\/code><\/pre>\n<p>Even if the current link already has parameters, the helper will simply add new ones to the existing ones.<\/p>\n<pre><code class=\"language-php\">makeUrlWithParams(&quot;https:\/\/domain.test?user_id=1&quot;, [&quot;date&quot; =&gt; now()-&gt;toDateString()]) \n\/\/ &quot;https:\/\/domain.test?user_id=1&amp;date=2022-01-01&quot;\n<\/code><\/pre>\n<h3>Controlled Current Link Generator<\/h3>\n<pre><code class=\"language-php\">urlWithGet(&quot;date&quot; =&gt; now()-&gt;toDateString())\n\/\/ &quot;https:\/\/domain.test?date=2022-01-01&quot;\n<\/code><\/pre>\n<p>Also, if you have or may have an unwanted parameter in the link, you can add its name to the exclusion list.\nSuppose you have a <code>user_id<\/code> parameter in your current link:<\/p>\n<pre><code class=\"language-php\">\/\/ https:\/\/domain.test?user_id=255\nurlWithGet(&quot;date&quot; =&gt; now()-&gt;toDateString(), [&quot;user_id&quot;])\n\/\/ &quot;https:\/\/domain.test?date=2022-01-01&quot;\n<\/code><\/pre>\n",
        "content_md": "\nThe extension has a set of helpers that can make development a little easier for you.\n\n### Logging user actions\n```php\nadmin_log('Title of action')\n\/\/ OR\nadmin_log('Title of action', 'With details')\n```\nThere are also certain types of helpers.\n```php\nadmin_log_warning('Title of warning action')\nadmin_log_primary(...)\nadmin_log_secondary(...)\nadmin_log_success(...)\nadmin_log_info(...)\nadmin_log_danger(...)\nadmin_log_dark(...)\n```\n\n### Path to extension application\n```php\nadmin_relative_path() \/\/ \"\/app\/Admin\"\n\/\/ OR\nadmin_relative_path(\"with\/my\/path\") \/\/ \"\/app\/Admin\/with\/my\/path\"\n```\n\n### Extension namespace\n```php\nadmin_app_namespace() \/\/ \"App\\Admin\"\n\/\/ OR\nadmin_app_namespace(\"WithMyNamespace\") \/\/ \"App\\Admin\\WithMyNamespace\"\n```\n\n### Controller model\n```php\nadmin_controller_model() \/\/ \"Model\/Class\/Namespace\"\n```\n\n### Full path to extension application\n```php\nadmin_app_path() \/\/ \"\/Users\/default\/PhpstormProjects\/project\/app\/Admin\"\n\/\/ OR\nadmin_app_path(\"MyPath\") \/\/ \"\/Users\/default\/PhpstormProjects\/project\/app\/Admin\/MyPath\"\n```\n\n### Link prefix\n```php\nadmin_uri() \/\/ \"\/admin\"\n\/\/ OR\nadmin_uri(\"with\/my\/endpoint\") \/\/ \"\/admin\/with\/my\/endpoint\"\n```\n\n### External link to media files\n```php\nadmin_asset() \/\/ \"https:\/\/domain.test\/admin\"\n\/\/ OR\nadmin_asset(\"js\/app.js\") \/\/ \"https:\/\/domain.test\/admin\/js\/app.js\"\n```\n\n### Quick access to an authorized user\n```php\nadmin_user()\n\/\/ OR\nadmin_user()?->name\n\/\/ OR\nadmin()\n```\n\n### Link generator with parameters\n```php\nmakeUrlWithParams(url()->current(), [\"date\" => now()->toDateString()]) \n\/\/ \"https:\/\/domain.test?date=2022-01-01\"\n```\n\nEven if the current link already has parameters, the helper will simply add new ones to the existing ones.\n```php\nmakeUrlWithParams(\"https:\/\/domain.test?user_id=1\", [\"date\" => now()->toDateString()]) \n\/\/ \"https:\/\/domain.test?user_id=1&date=2022-01-01\"\n```\n\n### Controlled Current Link Generator\n```php\nurlWithGet(\"date\" => now()->toDateString())\n\/\/ \"https:\/\/domain.test?date=2022-01-01\"\n```\nAlso, if you have or may have an unwanted parameter in the link, you can add its name to the exclusion list.\nSuppose you have a `user_id` parameter in your current link:\n```php\n\/\/ https:\/\/domain.test?user_id=255\nurlWithGet(\"date\" => now()->toDateString(), [\"user_id\"])\n\/\/ \"https:\/\/domain.test?date=2022-01-01\"\n```\n"
    },
    {
        "name": "Hidden.md",
        "title": "Hidden",
        "content_html": "<p>This feature offers a straightforward hidden data field.<\/p>\n<pre><code class=\"language-php\">$form-&gt;hidden('user_id')-&gt;value(admin()-&gt;user_id)\n<\/code><\/pre>\n",
        "content_md": "\nThis feature offers a straightforward hidden data field.\n```php\n$form->hidden('user_id')->value(admin()->user_id)\n```\n"
    },
    {
        "name": "IDE-Helpers.md",
        "title": "IDE-Helpers",
        "content_html": "<p>To automatically generate helper code for your admin panel after running <code>composer install<\/code> or <code>composer update<\/code>, you can add the <code>@php artisan admin:helpers<\/code> command to the list of <code>post-autoload-dump<\/code> commands in your <code>composer.json<\/code> scripts. Here's how you can do it:<\/p>\n<pre><code class=\"language-json\">{\n    &quot;scripts&quot;: {\n        &quot;post-autoload-dump&quot;: [\n            &quot;@php artisan admin:helpers&quot;,\n            &quot;... other commands&quot;\n        ]\n    }\n}\n<\/code><\/pre>\n<p>By adding <code>@php artisan admin:helpers<\/code> to the <code>post-autoload-dump<\/code> commands, the helper code will be generated automatically each time you run <code>composer install<\/code> or <code>composer update<\/code>. This ensures that your admin panel remains up-to-date with the latest helper code without manual intervention.<\/p>\n<blockquote>\n<p>When you have added or changed a field in your models, run this command as well to always get the correct hints.<\/p>\n<\/blockquote>\n<blockquote>\n<p>The command <code>php artisan admin:install<\/code> will add this command to you automatically, if you don't want to generate any helper, you can remove it from the list of commands.<\/p>\n<\/blockquote>\n",
        "content_md": "\nTo automatically generate helper code for your admin panel after running `composer install` or `composer update`, you can add the `@php artisan admin:helpers` command to the list of `post-autoload-dump` commands in your `composer.json` scripts. Here's how you can do it:\n```json\n{\n    \"scripts\": {\n        \"post-autoload-dump\": [\n            \"@php artisan admin:helpers\",\n            \"... other commands\"\n        ]\n    }\n}\n```\nBy adding `@php artisan admin:helpers` to the `post-autoload-dump` commands, the helper code will be generated automatically each time you run `composer install` or `composer update`. This ensures that your admin panel remains up-to-date with the latest helper code without manual intervention.\n\n> When you have added or changed a field in your models, run this command as well to always get the correct hints.\n\n> The command `php artisan admin:install` will add this command to you automatically, if you don't want to generate any helper, you can remove it from the list of commands.\n"
    },
    {
        "name": "Icon.md",
        "title": "Icon",
        "content_html": "<p>This feature provides a sophisticated input field with a dropdown list of icons available in the FontAwesome library.<\/p>\n<pre><code class=\"language-php\">$form-&gt;icon('icon', 'Menu icon')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature provides a sophisticated input field with a dropdown list of icons available in the FontAwesome library.\n```php\n$form->icon('icon', 'Menu icon')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Image.md",
        "title": "Image",
        "content_html": "<p>This feature offers a complex input field for selecting a image from the local system.<\/p>\n<pre><code class=\"language-php\">$form-&gt;image('avatar', 'User avatar')\n<\/code><\/pre>\n<p>Or for multiple image selection.<\/p>\n<pre><code class=\"language-php\">$form-&gt;images('avatars[]', 'User avatars')\n<\/code><\/pre>\n",
        "content_md": "\nThis feature offers a complex input field for selecting a image from the local system.\n```php\n$form->image('avatar', 'User avatar')\n```\nOr for multiple image selection.\n```php\n$form->images('avatars[]', 'User avatars')\n```\n"
    },
    {
        "name": "Implementations.md",
        "title": "Implementations",
        "content_html": "<p>To create the <code>Admin<\/code> model using artisan and inherit from the <code>AdminUser<\/code> model, you can run the following command:<\/p>\n<pre><code class=\"language-bash\">php artisan make:model Admin\n<\/code><\/pre>\n<p>After creating the <code>Admin<\/code> model, you can extend it from the <code>AdminUser<\/code> model as shown in the provided code snippet:<\/p>\n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Models;\n\nuse Admin\\Models\\AdminUser;\n\nclass Admin extends AdminUser\n{\n    \/\/ Add your customizations or additional logic here\n}\n<\/code><\/pre>\n<h2>Seeds<\/h2>\n<p>To avoid running internal installation every time after refreshing the database or moving to a server, you can add the standard data seeding to your seeding file <code>DatabaseSeeder.php<\/code>. Here's an example of how you can do this:<\/p>\n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Admin\\Models\\AdminSeeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    \/**\n     * Seed the application's database.\n     *\n     * @return void\n     *\/\n    public function run()\n    {\n        \/\/ Seed default users\n        \\App\\Models\\User::factory(10)-&gt;create();\n\n        \/\/ Seed admin data\n        $this-&gt;call(AdminSeeder::class);\n\n        \/\/ Add more seeders if needed\n    }\n}\n<\/code><\/pre>\n<p>In this code snippet:<\/p>\n<ul>\n<li>\n<code>\\App\\Models\\User::factory(10)-&gt;create();<\/code> seeds some default users using Laravel's factory.<\/li>\n<li>\n<code>$this-&gt;call(AdminSeeder::class);<\/code> calls the <code>AdminSeeder<\/code> to seed admin-related data. Make sure the <code>AdminSeeder<\/code> exists and contains the necessary logic to seed admin data.<\/li>\n<li>You can add more call methods for additional seeders as needed.<\/li>\n<\/ul>\n<p>Ensure that the <code>AdminSeeder<\/code> class is properly implemented and contains the necessary logic to seed admin-related data.<\/p>\n",
        "content_md": "\nTo create the `Admin` model using artisan and inherit from the `AdminUser` model, you can run the following command:\n```bash\nphp artisan make:model Admin\n```\nAfter creating the `Admin` model, you can extend it from the `AdminUser` model as shown in the provided code snippet:\n```php\n<?php\n\nnamespace App\\Models;\n\nuse Admin\\Models\\AdminUser;\n\nclass Admin extends AdminUser\n{\n    \/\/ Add your customizations or additional logic here\n}\n```\n\n## Seeds\nTo avoid running internal installation every time after refreshing the database or moving to a server, you can add the standard data seeding to your seeding file `DatabaseSeeder.php`. Here's an example of how you can do this:\n```php\n<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Admin\\Models\\AdminSeeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    \/**\n     * Seed the application's database.\n     *\n     * @return void\n     *\/\n    public function run()\n    {\n        \/\/ Seed default users\n        \\App\\Models\\User::factory(10)->create();\n\n        \/\/ Seed admin data\n        $this->call(AdminSeeder::class);\n\n        \/\/ Add more seeders if needed\n    }\n}\n```\nIn this code snippet:\n\n* `\\App\\Models\\User::factory(10)->create();` seeds some default users using Laravel's factory.\n* `$this->call(AdminSeeder::class);` calls the `AdminSeeder` to seed admin-related data. Make sure the `AdminSeeder` exists and contains the necessary logic to seed admin data.\n* You can add more call methods for additional seeders as needed.\n\nEnsure that the `AdminSeeder` class is properly implemented and contains the necessary logic to seed admin-related data.\n"
    },
    {
        "name": "Info.md",
        "title": "Info",
        "content_html": "<p>This feature provides a simple input field in the form of an input where information is displayed.<\/p>\n<pre><code class=\"language-php\">$form-&gt;info('id', 'ID')\n\/\/ OR\n$form-&gt;info('created_at', 'Created at')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature provides a simple input field in the form of an input where information is displayed.\n```php\n$form->info('id', 'ID')\n\/\/ OR\n$form->info('created_at', 'Created at')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Install.md",
        "title": "Installation Guide",
        "content_html": "<p>Integrate the Bfg Admin package into your Laravel application by following the straightforward instructions outlined below. This process involves using Composer, the PHP package manager, to install the package and then configuring your application to utilize it.<\/p>\n<h2>Prerequisites<\/h2>\n<p>Ensure you have Laravel installed in your project before proceeding with the Bfg Admin installation. For Laravel installation instructions, refer to the <a href=\"https:\/\/laravel.com\/docs\/11.x#the-laravel-installer\">official Laravel documentation<\/a>.<\/p>\n<h2>Step 1: Install Bfg Admin via Composer<\/h2>\n<p>To install the Bfg Admin package, use Composer by executing the following command in your terminal within your project directory:<\/p>\n<pre><code class=\"language-bash\">composer require bfg\/admin:^6\n<\/code><\/pre>\n<p>This command downloads and installs the Bfg Admin package as a dependency for your project.<\/p>\n<h2>Step 2: Configure Environment Variables<\/h2>\n<p>After installing the package, it is essential to configure specific environment variables in your project's <code>.env<\/code> file to ensure the admin panel functions correctly. This step is crucial for setting up the connection between your application and its database, as the admin panel relies on database interactions for its operations.<\/p>\n<h2>Step 3: Install Bfg Admin<\/h2>\n<p>With the Bfg Admin package installed and the environment variables set up, you can now install the admin panel extension in your Laravel application by running:<\/p>\n<pre><code class=\"language-bash\">php artisan admin:install\n<\/code><\/pre>\n<p>This command deploys all required migrations and admin files to your Laravel application folder, setting up the admin panel for your project.<\/p>\n<p>By following these steps, you will successfully integrate the Bfg Admin panel into your Laravel project, allowing you to utilize its comprehensive features for efficient application administration and management.<\/p>\n",
        "content_md": "\nIntegrate the Bfg Admin package into your Laravel application by following the straightforward instructions outlined below. This process involves using Composer, the PHP package manager, to install the package and then configuring your application to utilize it.\n\n## Prerequisites\n\nEnsure you have Laravel installed in your project before proceeding with the Bfg Admin installation. For Laravel installation instructions, refer to the [official Laravel documentation](https:\/\/laravel.com\/docs\/11.x#the-laravel-installer).\n\n## Step 1: Install Bfg Admin via Composer\n\nTo install the Bfg Admin package, use Composer by executing the following command in your terminal within your project directory:\n\n```bash\ncomposer require bfg\/admin:^6\n```\n\nThis command downloads and installs the Bfg Admin package as a dependency for your project.\n\n## Step 2: Configure Environment Variables\nAfter installing the package, it is essential to configure specific environment variables in your project's `.env` file to ensure the admin panel functions correctly. This step is crucial for setting up the connection between your application and its database, as the admin panel relies on database interactions for its operations.\n\n## Step 3: Install Bfg Admin\nWith the Bfg Admin package installed and the environment variables set up, you can now install the admin panel extension in your Laravel application by running:\n```bash\nphp artisan admin:install\n```\nThis command deploys all required migrations and admin files to your Laravel application folder, setting up the admin panel for your project.\n\n\nBy following these steps, you will successfully integrate the Bfg Admin panel into your Laravel project, allowing you to utilize its comprehensive features for efficient application administration and management.\n"
    },
    {
        "name": "Interactive-elements.md",
        "title": "Interactive elements",
        "content_html": "<p>The feature described introduces a specialized component designed to &quot;revive&quot; a segment of the webpage, ensuring that it remains dynamically updated in response to user interactions. This component is engineered to monitor changes across all input fields within the page (excluding image uploads) and, upon detecting any change, aggregates the data from these inputs to formulate a request sent to the server.<\/p>\n<p>Upon submission, the server processes this collective input data and responds by updating the templates of all interactive sections on the page. This mechanism ensures that the displayed content is consistently reflective of the most current user inputs, enhancing the interactivity and responsiveness of the webpage.<\/p>\n<p>This dynamic updating process is pivotal for applications requiring real-time data presentation or for interfaces where user input significantly influences the content or layout of the page. By automating the data collection and submission process in response to input changes, the system minimizes the need for manual refreshes or submissions by the user, thereby streamlining the user experience.<\/p>\n<p>Furthermore, this component plays a crucial role in facilitating a more engaging and interactive web environment. It allows for the seamless integration of user-driven changes across various parts of the page, ensuring that the entire interface responds cohesively to input modifications. This feature is particularly beneficial in scenarios where the interrelation of data across different segments of the page is crucial for maintaining a coherent and functional user interface.<\/p>\n<p>In summary, the introduction of this component represents a significant advancement in web application development, prioritizing real-time interactivity, and user engagement by ensuring that all sections of the page are dynamically updated in accordance with user input, thereby fostering a more responsive and immersive web experience.<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;watch(\n\t\t$condition,\n\t\t...\n\t)\n)\n\/\/ OR (without condition, simple live component)\nreturn $page-&gt;card(\n\t$card-&gt;live(\n\t\t...\n\t)\n)\n<\/code><\/pre>\n",
        "content_md": "\nThe feature described introduces a specialized component designed to \"revive\" a segment of the webpage, ensuring that it remains dynamically updated in response to user interactions. This component is engineered to monitor changes across all input fields within the page (excluding image uploads) and, upon detecting any change, aggregates the data from these inputs to formulate a request sent to the server.\n\nUpon submission, the server processes this collective input data and responds by updating the templates of all interactive sections on the page. This mechanism ensures that the displayed content is consistently reflective of the most current user inputs, enhancing the interactivity and responsiveness of the webpage.\n\nThis dynamic updating process is pivotal for applications requiring real-time data presentation or for interfaces where user input significantly influences the content or layout of the page. By automating the data collection and submission process in response to input changes, the system minimizes the need for manual refreshes or submissions by the user, thereby streamlining the user experience.\n\nFurthermore, this component plays a crucial role in facilitating a more engaging and interactive web environment. It allows for the seamless integration of user-driven changes across various parts of the page, ensuring that the entire interface responds cohesively to input modifications. This feature is particularly beneficial in scenarios where the interrelation of data across different segments of the page is crucial for maintaining a coherent and functional user interface.\n\nIn summary, the introduction of this component represents a significant advancement in web application development, prioritizing real-time interactivity, and user engagement by ensuring that all sections of the page are dynamically updated in accordance with user input, thereby fostering a more responsive and immersive web experience.\n```php\nreturn $page->card(\n\t$card->watch(\n\t\t$condition,\n\t\t...\n\t)\n)\n\/\/ OR (without condition, simple live component)\nreturn $page->card(\n\t$card->live(\n\t\t...\n\t)\n)\n```\n"
    },
    {
        "name": "MDeditor.md",
        "title": "MDeditor",
        "content_html": "<p>This feature provides a sophisticated MarkDown text editor for inputting and formatting text content.<\/p>\n<pre><code class=\"language-php\">$form-&gt;mdeditor('body', 'Post body')\n<\/code><\/pre>\n",
        "content_md": "\nThis feature provides a sophisticated MarkDown text editor for inputting and formatting text content.\n```php\n$form->mdeditor('body', 'Post body')\n```\n"
    },
    {
        "name": "Modal-window.md",
        "title": "Modal window",
        "content_html": "<p>Controlled windows that load independently of the main page content, such as Bootstrap modal windows, are encapsulated within the delegator class <code>\\App\\Admin\\Delegates\\Modal<\/code>. This makes them a distinct component designed for creating interactive, dialog-based interfaces within the admin panel.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\Modal;\n\n$page-&gt;modal(\n\t$modal-&gt;title('Hello!'),\n\t...\n)\n<\/code><\/pre>\n<p>Modal windows, by default, are assigned names automatically, with the initial window being labeled as <code>modal<\/code>, followed by <code>modal-1<\/code> for the second, and so forth. It is through these designated names that modal windows are referenced and invoked. Importantly, the modal window's content is not loaded along with the page; instead, the data for the modal is rendered exclusively upon request to display the window. Additionally, there is the flexibility to assign custom names to these modal windows. Moreover, modal windows accommodate various supplementary configuration options, enhancing their functionality and adaptability within the user interface.<\/p>\n<h3>name<\/h3>\n<p>Assign a custom name to the modal window, allowing for personalized identification and access within the application's interface.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;name(string $name)\n<\/code><\/pre>\n<h3>title<\/h3>\n<p>Establish the title for the modal window, providing a clear and descriptive heading that encapsulates the content or purpose of the dialogue.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;title(string $text)\n<\/code><\/pre>\n<h3>submitEvent<\/h3>\n<p>Implement a handler specifically designed to process <code>POST<\/code> requests originating from a modal window, ensuring efficient and targeted handling of data submissions within the application's framework.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;submitEvent(callable $callable)\n<\/code><\/pre>\n<h3>sizeExtra<\/h3>\n<p>Configure the modal window to adopt an exceptionally large size, enhancing its capacity to display extensive content or more complex interfaces.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;sizeExtra()\n<\/code><\/pre>\n<h3>sizeBig<\/h3>\n<p>Adjust the modal window's dimensions to a large size, providing additional space for content or interface elements without reaching the maximum allowable size.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;sizeBig()\n<\/code><\/pre>\n<h3>sizeSmall<\/h3>\n<p>Configure the modal window to assume a tiny size, optimizing it for succinct content or minimalistic interface presentations.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;sizeSmall()\n<\/code><\/pre>\n<blockquote>\n<p>By default, all modal windows are configured to be small in size, ensuring a compact display for efficient use of screen space.<\/p>\n<\/blockquote>\n<h3>temporary<\/h3>\n<p>This attribute indicates that the modal window is destroyed upon closure, ensuring it won't reload after the page refreshes.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;temporary()\n<\/code><\/pre>\n<h3>closable<\/h3>\n<p>This attribute specifies that clicking on the background of the modal window will close it.<\/p>\n<pre><code class=\"language-php\">$modal-&gt;closable()\n<\/code><\/pre>\n<h3>Modal window body<\/h3>\n<p>The body of a modal window is a standard container that serves as a controlled content provider.<\/p>\n<pre><code class=\"language-php\">$page-&gt;modal(\n\t...,\n\t$modal-&gt;modal_body(\n\t\t...\n\t),\n\t...\n)\n<\/code><\/pre>\n<p>Components that can be used directly (without a body) since their behavior is described by default: <code>buttons<\/code>, <code>form<\/code>, <code>model_table<\/code>, <code>model_info_table<\/code>, <code>table<\/code>, <code>nested<\/code>, <code>card<\/code>, <code>search_form<\/code>, <code>chart_js<\/code>, <code>model_relation<\/code>, <code>row<\/code>, <code>column<\/code>.<\/p>\n",
        "content_md": "\nControlled windows that load independently of the main page content, such as Bootstrap modal windows, are encapsulated within the delegator class `\\App\\Admin\\Delegates\\Modal`. This makes them a distinct component designed for creating interactive, dialog-based interfaces within the admin panel.\n\n```php\nuse App\\Admin\\Delegates\\Modal;\n\n$page->modal(\n\t$modal->title('Hello!'),\n\t...\n)\n```\nModal windows, by default, are assigned names automatically, with the initial window being labeled as `modal`, followed by `modal-1` for the second, and so forth. It is through these designated names that modal windows are referenced and invoked. Importantly, the modal window's content is not loaded along with the page; instead, the data for the modal is rendered exclusively upon request to display the window. Additionally, there is the flexibility to assign custom names to these modal windows. Moreover, modal windows accommodate various supplementary configuration options, enhancing their functionality and adaptability within the user interface.\n\n\n### name\nAssign a custom name to the modal window, allowing for personalized identification and access within the application's interface.\n```php\n$modal->name(string $name)\n```\n\n### title\nEstablish the title for the modal window, providing a clear and descriptive heading that encapsulates the content or purpose of the dialogue.\n```php\n$modal->title(string $text)\n```\n\n### submitEvent\nImplement a handler specifically designed to process `POST` requests originating from a modal window, ensuring efficient and targeted handling of data submissions within the application's framework.\n```php\n$modal->submitEvent(callable $callable)\n```\n\n### sizeExtra\nConfigure the modal window to adopt an exceptionally large size, enhancing its capacity to display extensive content or more complex interfaces.\n```php\n$modal->sizeExtra()\n```\n\n### sizeBig\nAdjust the modal window's dimensions to a large size, providing additional space for content or interface elements without reaching the maximum allowable size.\n```php\n$modal->sizeBig()\n```\n\n### sizeSmall\nConfigure the modal window to assume a tiny size, optimizing it for succinct content or minimalistic interface presentations.\n```php\n$modal->sizeSmall()\n```\n\n> By default, all modal windows are configured to be small in size, ensuring a compact display for efficient use of screen space.\n\n\n### temporary\nThis attribute indicates that the modal window is destroyed upon closure, ensuring it won't reload after the page refreshes.\n```php\n$modal->temporary()\n```\n\n### closable\nThis attribute specifies that clicking on the background of the modal window will close it.\n```php\n$modal->closable()\n```\n\n### Modal window body\nThe body of a modal window is a standard container that serves as a controlled content provider.\n```php\n$page->modal(\n\t...,\n\t$modal->modal_body(\n\t\t...\n\t),\n\t...\n)\n```\nComponents that can be used directly (without a body) since their behavior is described by default: `buttons`, `form`, `model_table`, `model_info_table`, `table`, `nested`, `card`, `search_form`, `chart_js`, `model_relation`, `row`, `column`.\n"
    },
    {
        "name": "Model-cards.md",
        "title": "Model cards",
        "content_html": "<p>This is a paginated table displayed in the form of cards. Each card features an image at the top, followed by a title, additional text lines, and action buttons at the bottom. The layout is designed to provide a clear and concise overview of the content, ensuring that important information is easily accessible and actionable.<\/p>\n<pre><code class=\"language-php\">public function index(\n    Page $page,\n    Card $card,\n    SearchForm $searchForm,\n    ModelCards $modelCards\n): Page {\n    return $page-&gt;card(\n        $card-&gt;title('admin.admin_list'),\n        $card-&gt;search_form(\n            ...\n        ),\n        $card-&gt;model_cards(\n            $modelCards-&gt;avatarField('avatar'),\n            $modelCards-&gt;titleField('name'),\n            $modelCards-&gt;subtitleField('email'),\n            $modelCards-&gt;id(),\n            $modelCards-&gt;row('admin.role', [$this, 'show_role'])\n                -&gt;icon_users(),\n            $modelCards-&gt;row('admin.login_name', 'login')\n                -&gt;sort()\n                -&gt;icon_user(),\n            $modelCards-&gt;at(),\n            $modelCards-&gt;controlDelete(static function (AdminUser $user) {\n                return $user-&gt;id !== 1 &amp;&amp; admin()-&gt;id !== $user-&gt;id;\n            }),\n        )\n    );\n}\n<\/code><\/pre>\n",
        "content_md": "\nThis is a paginated table displayed in the form of cards. Each card features an image at the top, followed by a title, additional text lines, and action buttons at the bottom. The layout is designed to provide a clear and concise overview of the content, ensuring that important information is easily accessible and actionable.\n\n```php\npublic function index(\n    Page $page,\n    Card $card,\n    SearchForm $searchForm,\n    ModelCards $modelCards\n): Page {\n    return $page->card(\n        $card->title('admin.admin_list'),\n        $card->search_form(\n            ...\n        ),\n        $card->model_cards(\n            $modelCards->avatarField('avatar'),\n            $modelCards->titleField('name'),\n            $modelCards->subtitleField('email'),\n            $modelCards->id(),\n            $modelCards->row('admin.role', [$this, 'show_role'])\n                ->icon_users(),\n            $modelCards->row('admin.login_name', 'login')\n                ->sort()\n                ->icon_user(),\n            $modelCards->at(),\n            $modelCards->controlDelete(static function (AdminUser $user) {\n                return $user->id !== 1 && admin()->id !== $user->id;\n            }),\n        )\n    );\n}\n```\n"
    },
    {
        "name": "Model-info-table.md",
        "title": "Model info table",
        "content_html": "<p>The table component, which allows for the manual assembly of rows from a specified model, serves as an independent component within the delegator class <code>\\App\\Admin\\Delegates\\ModelInfoTable<\/code>. This delegation mechanism also incorporates helper methods, such as <code>rowDefault<\/code>, to facilitate the construction of ready-made tables.<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;model_info_table(\n\t\t$modelInfoTable-&gt;id(),\n\t\t...\n\t\t$modelInfoTable-&gt;at(),\n\t)\n)\n\/\/ OR\nreturn $page-&gt;card(\n\t$card-&gt;model_info_table(\n\t\t$modelInfoTable-&gt;rowDefault(\n\t\t\t$modelInfoTable-&gt;row_name,\n\t\t\t...,\n\t\t),\n\t)\n)\n<\/code><\/pre>\n<p>In the system, there's a special feature designed to streamline the process of working with models and their properties or methods. When you prefix a property or method with <code>row_*<\/code>, such as <code>row_name<\/code>, you unlock the ability to directly link to a specific name within the model or to a property name. This nomenclature convention is not just for organizational clarity but also enhances functionality.<\/p>\n<p>For instance, when you utilize a method prefixed with <code>row_<\/code>, you gain the capability to define a label for that row directly through the method call. Specifically, if you have a method named row_name, you can set its label by calling <code>-&gt;row_name('Name of row')<\/code>. In this scenario, 'Name of row' becomes a user-friendly label associated with that particular row. This approach facilitates a more intuitive and customizable way to manage and display information within the system, allowing for a clearer presentation and easier understanding of data.<\/p>\n<h3>Methods<\/h3>\n<h4>row<\/h4>\n<p>The method utilized for constructing a table row is designed with flexibility in mind, accommodating both modifiers and columns within a &quot;Sortable table.&quot; This feature extends beyond simple row creation, enabling the integration of dynamic elements that can significantly enhance user interaction and data representation.<\/p>\n<pre><code class=\"language-php\">$modelInfoTable-&gt;row(string $label, string|Closure|array $field): static\n<\/code><\/pre>\n<h4>info<\/h4>\n<p>Incorporating line information refers to the process of adding specific details or attributes associated with individual lines or entries within a dataset, document, or application interface. This process is crucial for enhancing clarity, providing context, or offering additional insights into the data or content being presented.<\/p>\n<pre><code class=\"language-php\">$modelInfoTable-&gt;row(...)-&gt;info(string $info): static\n<\/code><\/pre>\n<h3>Helpers<\/h3>\n<pre><code class=\"language-php\">$modelInfoTable-&gt;id(): static\n<\/code><\/pre>\n<pre><code class=\"language-php\">$modelInfoTable-&gt;at(): static\n<\/code><\/pre>\n",
        "content_md": "\nThe table component, which allows for the manual assembly of rows from a specified model, serves as an independent component within the delegator class `\\App\\Admin\\Delegates\\ModelInfoTable`. This delegation mechanism also incorporates helper methods, such as `rowDefault`, to facilitate the construction of ready-made tables.\n```php\nreturn $page->card(\n\t$card->model_info_table(\n\t\t$modelInfoTable->id(),\n\t\t...\n\t\t$modelInfoTable->at(),\n\t)\n)\n\/\/ OR\nreturn $page->card(\n\t$card->model_info_table(\n\t\t$modelInfoTable->rowDefault(\n\t\t\t$modelInfoTable->row_name,\n\t\t\t...,\n\t\t),\n\t)\n)\n```\n\nIn the system, there's a special feature designed to streamline the process of working with models and their properties or methods. When you prefix a property or method with `row_*`, such as `row_name`, you unlock the ability to directly link to a specific name within the model or to a property name. This nomenclature convention is not just for organizational clarity but also enhances functionality.\n\nFor instance, when you utilize a method prefixed with `row_`, you gain the capability to define a label for that row directly through the method call. Specifically, if you have a method named row_name, you can set its label by calling `->row_name('Name of row')`. In this scenario, 'Name of row' becomes a user-friendly label associated with that particular row. This approach facilitates a more intuitive and customizable way to manage and display information within the system, allowing for a clearer presentation and easier understanding of data.\n\n### Methods\n\n#### row\nThe method utilized for constructing a table row is designed with flexibility in mind, accommodating both modifiers and columns within a \"Sortable table.\" This feature extends beyond simple row creation, enabling the integration of dynamic elements that can significantly enhance user interaction and data representation.\n```php\n$modelInfoTable->row(string $label, string|Closure|array $field): static\n```\n\n#### info\nIncorporating line information refers to the process of adding specific details or attributes associated with individual lines or entries within a dataset, document, or application interface. This process is crucial for enhancing clarity, providing context, or offering additional insights into the data or content being presented.\n```php\n$modelInfoTable->row(...)->info(string $info): static\n```\n\n### Helpers\n\n```php\n$modelInfoTable->id(): static\n```\n```php\n$modelInfoTable->at(): static\n```\n"
    },
    {
        "name": "Model-relation.md",
        "title": "Model relation",
        "content_html": "<p>A special field for grouping model link inputs is designed to handle situations where the main model in your application has a one-to-many relationship with other models, typically represented by a <code>hasMany<\/code> relationship. This field is particularly useful for managing related records and selecting multiple linked records within a single form.<\/p>\n<pre><code class=\"language-php\">$form-&gt;model_relation('basket')-&gt;template(\n\t...\n)\n<\/code><\/pre>\n",
        "content_md": "\nA special field for grouping model link inputs is designed to handle situations where the main model in your application has a one-to-many relationship with other models, typically represented by a `hasMany` relationship. This field is particularly useful for managing related records and selecting multiple linked records within a single form.\n```php\n$form->model_relation('basket')->template(\n\t...\n)\n```\n"
    },
    {
        "name": "Model-table-extending.md",
        "title": "Model table extending",
        "content_html": "<p>To extend a table component and add a column modifier, you can follow these steps:<\/p>\n<ol>\n<li>Create a new class that extends the <code>ModelTableExtension<\/code> class.<\/li>\n<li>Implement the desired methods in your extension class, each of which will serve as a table extender.<\/li>\n<li>Add your extension class to the list of extendable component classes in the <code>boot<\/code> method of the <code>Config<\/code> class.<\/li>\n<\/ol>\n<p>Here's an example of how you can do this:<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Extensions\\ModelTableExtension;\n...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this-&gt;registerModelTableExtensionClass(ModelTableExtension::class);\n}\n...\n<\/code><\/pre>\n<p>In this example, <code>CustomModelTableExtension<\/code> is a custom class that extends <code>ModelTableExtension<\/code>. You can implement any custom logic or methods in this class to extend the functionality of the table component. Then, in the <code>boot<\/code> method of the <code>Config<\/code>, you add your extension class to the list of extendable component classes using the <code>registerModelTableExtensionClass<\/code> method. This makes your extension available for use in the table components throughout your application.<\/p>\n<p>The <code>ModelTableExtension<\/code> class provides several default extenders for the table component. Each of these extenders offers different functionalities to enhance the behavior and appearance of the table. Here's a brief overview of the default extenders:<\/p>\n<ol>\n<li>\n<strong>Decorations:<\/strong> This extender allows you to add decorations or styling to the table columns, such as badges, icons, or custom CSS classes.<\/li>\n<li>\n<strong>Display:<\/strong> The Display extender enables you to modify how the data is displayed in the table, such as formatting dates, truncating long text, or displaying custom content based on certain conditions.<\/li>\n<li>\n<strong>Editables:<\/strong> With the Editables extender, you can make table columns editable, allowing users to modify the data directly within the table interface.<\/li>\n<li>\n<strong>Formatter:<\/strong> The Formatter extender provides advanced formatting options for table data, such as converting timestamps to human-readable formats, formatting numbers, or applying custom formatting rules.<\/li>\n<\/ol>\n<p>These default extenders offer a wide range of functionalities to customize and enhance the behavior and appearance of the table component in your application. You can use them individually or in combination to meet your specific requirements.<\/p>\n<h3>Extend with Closure<\/h3>\n<p>There's no need to register an entire class when you aim to extend table columns; instead, you can utilize a method that allows the registration of a new method through a Closure:<\/p>\n<pre><code class=\"language-php\">...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this-&gt;registerModelTableExtension('model_table_extension_name', function () {\n\t\treturn 'model_table_extension'; \/\/ do something\n\t});\n}\n...\n<\/code><\/pre>\n",
        "content_md": "\nTo extend a table component and add a column modifier, you can follow these steps:\n\n1. Create a new class that extends the `ModelTableExtension` class.\n1. Implement the desired methods in your extension class, each of which will serve as a table extender.\n1. Add your extension class to the list of extendable component classes in the `boot` method of the `Config` class.\n\nHere's an example of how you can do this:\n```php\nuse App\\Admin\\Extensions\\ModelTableExtension;\n...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this->registerModelTableExtensionClass(ModelTableExtension::class);\n}\n...\n```\nIn this example, `CustomModelTableExtension` is a custom class that extends `ModelTableExtension`. You can implement any custom logic or methods in this class to extend the functionality of the table component. Then, in the `boot` method of the `Config`, you add your extension class to the list of extendable component classes using the `registerModelTableExtensionClass` method. This makes your extension available for use in the table components throughout your application.\n\nThe `ModelTableExtension` class provides several default extenders for the table component. Each of these extenders offers different functionalities to enhance the behavior and appearance of the table. Here's a brief overview of the default extenders:\n\n1. **Decorations:** This extender allows you to add decorations or styling to the table columns, such as badges, icons, or custom CSS classes.\n1. **Display:** The Display extender enables you to modify how the data is displayed in the table, such as formatting dates, truncating long text, or displaying custom content based on certain conditions.\n1. **Editables:** With the Editables extender, you can make table columns editable, allowing users to modify the data directly within the table interface.\n1. **Formatter:** The Formatter extender provides advanced formatting options for table data, such as converting timestamps to human-readable formats, formatting numbers, or applying custom formatting rules.\n\nThese default extenders offer a wide range of functionalities to customize and enhance the behavior and appearance of the table component in your application. You can use them individually or in combination to meet your specific requirements.\n\n### Extend with Closure\nThere's no need to register an entire class when you aim to extend table columns; instead, you can utilize a method that allows the registration of a new method through a Closure:\n```php\n...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this->registerModelTableExtension('model_table_extension_name', function () {\n\t\treturn 'model_table_extension'; \/\/ do something\n\t});\n}\n...\n```\n"
    },
    {
        "name": "Model-table.md",
        "title": "Model table",
        "content_html": "<p>The table is generated based on the model that you passed to it. It paginates, sorts, and creates a table based on your rules. This component is a separate delegate class <code>\\App\\Admin\\Delegates\\ModelTable<\/code>. Additionally, it offers helpers such as <code>colDefault<\/code> for constructing pre-defined tables.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\ModelTable;\n\npublic function index(\n\tPage $page,\n\tCard $card,\n\tModelTable $modelTable\n): Page {\n\treturn $page-&gt;card(\n\t\t$card-&gt;model_table(\n\t\t\t$modelTable-&gt;id(),\n\t\t\t...,\n\t\t\t$modelTable-&gt;at(),\n\t\t),\n\t);\n\t\/\/OR\n\treturn $page-&gt;card(\n\t\t$card-&gt;model_table(\n\t\t\t$modelTable-&gt;colDefault(\n\t\t\t\t$modelTable-&gt;col_name-&gt;sort\n\t\t\t\t...,\n\t\t\t),\n\t\t)\n\t);\n}\n<\/code><\/pre>\n<p>Each column is configured separately and has many display variations.<\/p>\n<p>There is a magical addition: when a property or method starts with <code>col_*<\/code>, you have the option to specify a name in the model or property name, such as <code>col_name<\/code>. If this is a method, then the first parameter will be the label, setting <code>-&gt;col_name('Name of the row')<\/code>.<\/p>\n<h4>colDefault<\/h4>\n<p>To maintain consistency and adhere to standard practices, you can utilize the default columns <code>ID<\/code> and <code>AT<\/code> in your table. These columns serve as fundamental identifiers and timestamps, respectively, ensuring uniformity across your data representation. Additionally, you can populate the table with relevant information between these standard columns to provide comprehensive insights into your dataset.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;id(),\n...,\n$modelTable-&gt;at()\n<\/code><\/pre>\n<h3>perPage<\/h3>\n<p>To enhance user experience and accommodate varying data needs, you can define the number of entries displayed per page. This feature allows users to control the density of information presented on each page, facilitating easier navigation and analysis of data.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;perPage(int perPage)\n<\/code><\/pre>\n<h3>perPages<\/h3>\n<p>To provide users with flexibility in viewing data, you can define the available options for the number of entries displayed per page. This allows users to customize their viewing experience based on their preferences and the amount of data they need to analyze at once.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;perPages(array perPages)\n<\/code><\/pre>\n<h3>orderBy<\/h3>\n<p>To ensure a consistent and intuitive user experience, you can set the default sorting configuration for the table. By specifying the default sorting criteria, you define how the table data should be initially presented to users, offering them a structured and easily navigable interface from the moment they access the table.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;orderBy(string $field, string $type = &quot;asc&quot;)\n<\/code><\/pre>\n<h3>sort<\/h3>\n<p>To facilitate data organization and enhance user interaction, you can enable sorting functionality for a specific column in the table. This feature allows users to easily sort the table data based on the values in the chosen column, providing a more organized and customizable viewing experience.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;sort(string field = null)\n<\/code><\/pre>\n<h3>to_hide<\/h3>\n<p>To enhance user experience, you can temporarily hide a column in the table, making it hidden from view while still retaining the option to display it as needed. This feature provides flexibility in managing the visibility of columns based on user preferences or specific requirements.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;to_hide()\n<\/code><\/pre>\n<blockquote>\n<p>To display a column within your table, you can access the actions menu and select the desired column name. By doing so, you can easily toggle the visibility of the column, ensuring that the necessary data is readily accessible for analysis and interpretation.<\/p>\n<\/blockquote>\n<h3>info<\/h3>\n<p>To include additional information within a column, you can enhance it with relevant data that provides context or details about the displayed content. This can help users better understand the information presented in the column and make informed decisions based on it.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;info(string $infoString)\n<\/code><\/pre>\n<h3>not_trash<\/h3>\n<p>This function prevents the selected column from appearing in the bin, so it won't show up in the list of deleted items.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;not_trash()\n<\/code><\/pre>\n<h3>to_prepend<\/h3>\n<p>This function moves the next column to the front, making it the first column in the table.<\/p>\n<pre><code class=\"language-php\">    $modelTable-&gt;to_prepend()\n<\/code><\/pre>\n<h2>Default Tools<\/h2>\n<p>Bulk control buttons to control which are added to each line.\nEditing, Deleting, Information.\nThey can be disabled, for this the table has special methods.<\/p>\n<h3>controlGroup<\/h3>\n<p>This function enables the display control of all auxiliary elements of the table in general.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;controlGroup(callable|bool)\n<\/code><\/pre>\n<h3>controlInfo<\/h3>\n<p>This function manages the visibility of the information button in the table. When enabled, the info button typically provides additional details or context about the table content or specific entries.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;controlInfo(callable|bool)\n<\/code><\/pre>\n<h3>controlEdit<\/h3>\n<p>This function governs the visibility of the edit button in the table. When activated, the edit button allows users to modify or update entries directly from the table interface.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;controlEdit(callable|bool)\n<\/code><\/pre>\n<h3>controlDelete<\/h3>\n<p>This function regulates the visibility of the delete button in the table. When enabled, the delete button allows users to remove entries directly from the table interface.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;controlDelete(callable|bool)\n<\/code><\/pre>\n<h3>controlForceDelete<\/h3>\n<p>This function governs the visibility of the forced delete button in the table. When activated, the forced delete button permits users to permanently remove entries from the table interface.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;controlForceDelete(callable|bool)\n<\/code><\/pre>\n<h3>controlRestore<\/h3>\n<p>This function regulates the visibility of the restore button in the table, which enables users to recover previously deleted entries.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;controlRestore(callable|bool)\n<\/code><\/pre>\n<h3>controlSelect<\/h3>\n<p>This function determines whether the checkbox for bulk actions is displayed in the table.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;controlSelect(callable|bool)\n<\/code><\/pre>\n<h3>checkDelete<\/h3>\n<p>This function controls whether the bulk delete action is displayed or not. If enabled, users can select multiple items and delete them all at once. If disabled, this action will not be available to users.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;checkDelete(callable|bool)\n<\/code><\/pre>\n<h3>disableChecks<\/h3>\n<p>This function disables all checkboxes for mass control actions. When disabled, users won't be able to select multiple items for bulk actions such as deletion or restoration.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;disableChecks(callable|bool)\n<\/code><\/pre>\n<h2>Actions<\/h2>\n<p>This function controls bulk actions on selected table rows. When users select multiple rows in the table, this function enables actions such as deletion or restoration to be performed on all selected items at once.<\/p>\n<p>When at least one column is set to be hidden, the column selection mode becomes available. This mode allows users to select which columns they want to display by toggling their visibility.<\/p>\n<h3>action<\/h3>\n<p>When adding your own action, this method will return a special <code>\\Admin\\Core\\ModelTableAction<\/code> class for configuration, which provides the following methods:<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;action(callable $callback, array $parameters = [])\n<\/code><\/pre>\n<h3>title<\/h3>\n<p>When specifying the title of the action, the default header is <code>Action<\/code>.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;action(callable $callback)-&gt;title(string $title): static\n<\/code><\/pre>\n<h3>icon<\/h3>\n<p>When setting an action icon, the default icon is <code>fas fa-dot-circle<\/code>.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;action(callable $callback)-&gt;icon(string $icon): static\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n<h3>confirm<\/h3>\n<p>When specifying an arbitrary message to confirm the action, such as &quot;Delete 2 rows?&quot;, by default, no message is used. If no message is provided, no confirmation will be requested.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;action(callable $callback)-&gt;confirm(string $confirmMessage): static\n<\/code><\/pre>\n<h3>warning<\/h3>\n<p>By default, an action call cannot be dispatched unless at least one element from the table is selected. The method allows you to specify an arbitrary warning message that the action will not be sent. By default, the system uses the message \u201cSelect at least one element\u201d.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;action(callable $callback)-&gt;warning(string $warningMessage): static\n<\/code><\/pre>\n<h3>nullable<\/h3>\n<p>Disabling the action from requiring fields to be selected means that the action can be performed without selecting any specific fields.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;action(callable $callback)-&gt;nullable(): static\n<\/code><\/pre>\n<h2>Column<\/h2>\n<p>A controlled table column refers to a column in the table that is managed or governed in some way, typically through predefined settings or actions.<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;col(string|callable $label, string|callable $field)\n\/\/OR\n$modelTable-&gt;column(string|callable $label, string|callable $field)\n<\/code><\/pre>\n<p>Adding a new column to the table involves incorporating an additional column into the existing table structure, thereby expanding the displayed data or functionality.<\/p>\n<h2>Column with a group of buttons<\/h2>\n<p>Frequently, there arises a necessity to append supplementary control buttons to the table, and the table offers us the capability to do so:<\/p>\n<pre><code class=\"language-php\">$modelTable-&gt;buttons(\n\t$buttons-&gt;success()-&gt;title('Test button')\n)\n<\/code><\/pre>\n<p>Similarly, all buttons and their associated model dispatches adhere to the global regulations outlined in the &quot;Buttons&quot; section.<\/p>\n<h2>Column Modifiers<\/h2>\n<p>Table columns support special modifiers for more convenient display.<\/p>\n<h3>Inputs<\/h3>\n<ul>\n<li>\n<code>input_switcher(string $on = null, string $off = null, string $label = null)<\/code> - Makes a state switch from a column.<\/li>\n<li>\n<code>input_editable()<\/code> - Makes an editable input from a column.<\/li>\n<li>\n<code>textarea_editable()<\/code> - Makes an editable field from a column.<\/li>\n<li>\n<code>input_select(array $options, bool $first_default = false)<\/code> - Makes simple select.<\/li>\n<li>\n<code>input_select(string $class, string $format = 'id:name', $where = null)<\/code> - Makes an loaded select.<\/li>\n<li>\n<code>input_radios(array $options, bool $first_default = false)<\/code> - Makes an simple radios.<\/li>\n<\/ul>\n<h3>Modificators<\/h3>\n<ul>\n<li>\n<code>rating_stars()<\/code> - Generates rating stars.<\/li>\n<li>\n<code>password_stars(string $symbol = &quot;\u2022&quot;)<\/code> - Replaces data with closing characters.<\/li>\n<li>\n<code>true_data()<\/code> -Display direct data (if it's null, it will display &quot;null&quot;)<\/li>\n<li>\n<code>uploaded_file(int $previewWidth = 30)<\/code> - Treat column data as a file link.<\/li>\n<li>\n<code>avatar(int $previewWidth = 30)<\/code> - Treat column data as a link to an image and show it with a thumbnail.<\/li>\n<li>\n<code>copied(callable $dataGenerator = null)<\/code> - Copied column value, will add a button to copy.<\/li>\n<li>\n<code>copied_right(callable $dataGenerator = null)<\/code> - Copied column value, will add a copy button (on the right side).<\/li>\n<li>\n<code>badge_number()<\/code> - Read the column data as a number and display it in the badge.<\/li>\n<li>\n<code>badge(string $type = &quot;info&quot;)<\/code> - Wrap column data value in a badge.<\/li>\n<li>\n<code>pill(string $type = &quot;info&quot;)<\/code> - Wrap column data value in a pill.<\/li>\n<li>\n<code>yes_no()<\/code> - If your data is <code>true\/false<\/code>, it will display as <code>yes\/no<\/code>.<\/li>\n<li>\n<code>on_off()<\/code> - If your data is <code>true\/false<\/code>, it will display as <code>on\/off<\/code>.<\/li>\n<li>\n<code>fa_icon(int $fontSize = 22)<\/code> - Read column data as icon name.<\/li>\n<li>\n<code>badge_tags(int $wisibleCount = 5)<\/code> - Read column data as an array and display it in badges.<\/li>\n<li>\n<code>color_cube(int $cubeFontSize = 22)<\/code> - Read column data as color value.<\/li>\n<li>\n<code>hide_om_mobile()<\/code> - Makes the column hidden for mobile devices.<\/li>\n<li>\n<code>str_limit(int $num = 20)<\/code> - Limit the number of characters in a column.<\/li>\n<li>\n<code>strip_tags()<\/code> - Strip all tags from a column value.<\/li>\n<li>\n<code>to_html()<\/code> - Converts HTML entities to their corresponding characters.<\/li>\n<li>\n<code>admin_resource_route(string $routeName, string $urlParamName = null, string $modelParamName = null)<\/code> - Add control buttons to a third-party resource.<\/li>\n<li>\n<code>admin_resource_route_edit(string $routeName, string $urlParamName = null, string $modelParamName = null)<\/code> - Add third party resource edit button.<\/li>\n<li>\n<code>admin_resource_route_show(string $routeName, string $urlParamName = null, string $modelParamName = null)<\/code> - Add info button to third party resource.<\/li>\n<li>\n<code>to_append(callable|string $data)<\/code> - Append data at the end of the column value.<\/li>\n<li>\n<code>to_prepend(callable|string $data)<\/code> - Add data at the beginning of the column value.<\/li>\n<li>\n<code>to_append_link(string $icon = &quot;fas fa-link&quot;, string $link = null, string $title = null)<\/code> - Treat column data as a link. Adds a navigation button.<\/li>\n<li>\n<code>to_prepend_link(string $icon = &quot;fas fa-link&quot;, string $link = null, string $title = null)<\/code> - Treat column data as a link. Add a navigation button to the beginning.<\/li>\n<li>\n<code>number_format(int $dec = 0, string $dec_point = &quot;.&quot;, string $sep = &quot;,&quot;, string $end = &quot; &quot;)<\/code> - Formats a number with group separation.<\/li>\n<li>\n<code>money(string $symbol = &quot;$&quot;)<\/code> - Format number to currency.<\/li>\n<li>\n<code>percent(string $symbol = &quot;%&quot;)<\/code> - Format number to percent.<\/li>\n<li>\n<code>to_lang()<\/code> - Read column data of language variable.<\/li>\n<li>\n<code>to_string()<\/code> - No matter what data is in the column, cast its type to a string.<\/li>\n<li>\n<code>has_lang()<\/code> - Assume data has references to language variables.<\/li>\n<li>\n<code>trim(string $characters = &quot; \\n\\r\\t\\v\\x00&quot;)<\/code> - Removes spaces (or other characters) from the beginning and end of the column data.<\/li>\n<li>\n<code>carbon_format(string $format = &quot;Y-m-d H:i:s&quot;)<\/code> - Treat column data as a date and format the date.<\/li>\n<li>\n<code>carbon_time(string $format = &quot;H:i:s&quot;)<\/code> - Read column data as date and format time.<\/li>\n<li>\n<code>explode(string $delimiter, string|int $key = 0)<\/code> - Splits a string into substrings as an array and returns the specified value.<\/li>\n<li>\n<code>beautiful_date<\/code> - Beautiful date string<\/li>\n<li>\n<code>beautiful_date_time<\/code> - Beautiful date and time string<\/li>\n<li>\n<code>progress_complete(string $word = 'Complete'|false)<\/code> - Derive progress bar from value<\/li>\n<\/ul>\n<h2>Import to spreadsheets (.excel or .csv)<\/h2>\n<p>Table description rules for the possibility of exporting this data to an <code>Excel<\/code> or <code>CSV<\/code> table.<\/p>\n<ul>\n<li>\n<code>to_export(callable $callback = null)<\/code> - Take a column to generate in the document.<\/li>\n<li>\n<code>only_export(callable $callback = null)<\/code> - Take column only for document generation.<\/li>\n<\/ul>\n<blockquote>\n<p>If a column is hidden, it will also not participate in the generation.<\/p>\n<\/blockquote>\n<h2>Control<\/h2>\n<p>For full-fledged <code>CRUD<\/code> and not only, there is a button group component that is embedded as default tools in the table. The controller has a default delegation to all maps including them. As a result, additional control buttons appear in the map header.<\/p>\n",
        "content_md": "\nThe table is generated based on the model that you passed to it. It paginates, sorts, and creates a table based on your rules. This component is a separate delegate class `\\App\\Admin\\Delegates\\ModelTable`. Additionally, it offers helpers such as `colDefault` for constructing pre-defined tables.\n```php\nuse App\\Admin\\Delegates\\ModelTable;\n\npublic function index(\n\tPage $page,\n\tCard $card,\n\tModelTable $modelTable\n): Page {\n\treturn $page->card(\n\t\t$card->model_table(\n\t\t\t$modelTable->id(),\n\t\t\t...,\n\t\t\t$modelTable->at(),\n\t\t),\n\t);\n\t\/\/OR\n\treturn $page->card(\n\t\t$card->model_table(\n\t\t\t$modelTable->colDefault(\n\t\t\t\t$modelTable->col_name->sort\n\t\t\t\t...,\n\t\t\t),\n\t\t)\n\t);\n}\n```\nEach column is configured separately and has many display variations.\n\nThere is a magical addition: when a property or method starts with `col_*`, you have the option to specify a name in the model or property name, such as `col_name`. If this is a method, then the first parameter will be the label, setting `->col_name('Name of the row')`.\n\n#### colDefault\nTo maintain consistency and adhere to standard practices, you can utilize the default columns `ID` and `AT` in your table. These columns serve as fundamental identifiers and timestamps, respectively, ensuring uniformity across your data representation. Additionally, you can populate the table with relevant information between these standard columns to provide comprehensive insights into your dataset.\n```php\n$modelTable->id(),\n...,\n$modelTable->at()\n```\n\n### perPage\nTo enhance user experience and accommodate varying data needs, you can define the number of entries displayed per page. This feature allows users to control the density of information presented on each page, facilitating easier navigation and analysis of data.\n```php\n$modelTable->perPage(int perPage)\n```\n\n### perPages\nTo provide users with flexibility in viewing data, you can define the available options for the number of entries displayed per page. This allows users to customize their viewing experience based on their preferences and the amount of data they need to analyze at once.\n```php\n$modelTable->perPages(array perPages)\n```\n\n### orderBy\nTo ensure a consistent and intuitive user experience, you can set the default sorting configuration for the table. By specifying the default sorting criteria, you define how the table data should be initially presented to users, offering them a structured and easily navigable interface from the moment they access the table.\n```php\n$modelTable->orderBy(string $field, string $type = \"asc\")\n```\n\n### sort\nTo facilitate data organization and enhance user interaction, you can enable sorting functionality for a specific column in the table. This feature allows users to easily sort the table data based on the values in the chosen column, providing a more organized and customizable viewing experience.\n```php\n$modelTable->sort(string field = null)\n```\n\n### to_hide\nTo enhance user experience, you can temporarily hide a column in the table, making it hidden from view while still retaining the option to display it as needed. This feature provides flexibility in managing the visibility of columns based on user preferences or specific requirements.\n```php\n$modelTable->to_hide()\n```\n> To display a column within your table, you can access the actions menu and select the desired column name. By doing so, you can easily toggle the visibility of the column, ensuring that the necessary data is readily accessible for analysis and interpretation.\n\n### info\nTo include additional information within a column, you can enhance it with relevant data that provides context or details about the displayed content. This can help users better understand the information presented in the column and make informed decisions based on it.\n```php\n$modelTable->info(string $infoString)\n```\n\n### not_trash\nThis function prevents the selected column from appearing in the bin, so it won't show up in the list of deleted items.\n```php\n$modelTable->not_trash()\n```\n\n### to_prepend\nThis function moves the next column to the front, making it the first column in the table.\n```php\n    $modelTable->to_prepend()\n```\n\n## Default Tools\nBulk control buttons to control which are added to each line.\nEditing, Deleting, Information.\nThey can be disabled, for this the table has special methods.\n\n### controlGroup\nThis function enables the display control of all auxiliary elements of the table in general.\n```php\n$modelTable->controlGroup(callable|bool)\n```\n\n### controlInfo\nThis function manages the visibility of the information button in the table. When enabled, the info button typically provides additional details or context about the table content or specific entries.\n```php\n$modelTable->controlInfo(callable|bool)\n```\n\n### controlEdit\nThis function governs the visibility of the edit button in the table. When activated, the edit button allows users to modify or update entries directly from the table interface.\n```php\n$modelTable->controlEdit(callable|bool)\n```\n\n### controlDelete\n\nThis function regulates the visibility of the delete button in the table. When enabled, the delete button allows users to remove entries directly from the table interface.\n```php\n$modelTable->controlDelete(callable|bool)\n```\n\n\n### controlForceDelete\nThis function governs the visibility of the forced delete button in the table. When activated, the forced delete button permits users to permanently remove entries from the table interface.\n```php\n$modelTable->controlForceDelete(callable|bool)\n```\n\n\n### controlRestore\nThis function regulates the visibility of the restore button in the table, which enables users to recover previously deleted entries.\n```php\n$modelTable->controlRestore(callable|bool)\n```\n\n### controlSelect\nThis function determines whether the checkbox for bulk actions is displayed in the table.\n```php\n$modelTable->controlSelect(callable|bool)\n```\n\n### checkDelete\nThis function controls whether the bulk delete action is displayed or not. If enabled, users can select multiple items and delete them all at once. If disabled, this action will not be available to users.\n```php\n$modelTable->checkDelete(callable|bool)\n```\n\n### disableChecks\nThis function disables all checkboxes for mass control actions. When disabled, users won't be able to select multiple items for bulk actions such as deletion or restoration.\n```php\n$modelTable->disableChecks(callable|bool)\n```\n\n## Actions\nThis function controls bulk actions on selected table rows. When users select multiple rows in the table, this function enables actions such as deletion or restoration to be performed on all selected items at once.\n\nWhen at least one column is set to be hidden, the column selection mode becomes available. This mode allows users to select which columns they want to display by toggling their visibility.\n\n### action\nWhen adding your own action, this method will return a special `\\Admin\\Core\\ModelTableAction` class for configuration, which provides the following methods:\n```php\n$modelTable->action(callable $callback, array $parameters = [])\n```\n\n### title\nWhen specifying the title of the action, the default header is `Action`.\n```php\n$modelTable->action(callable $callback)->title(string $title): static\n```\n\n### icon\nWhen setting an action icon, the default icon is `fas fa-dot-circle`.\n```php\n$modelTable->action(callable $callback)->icon(string $icon): static\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n\n### confirm\nWhen specifying an arbitrary message to confirm the action, such as \"Delete 2 rows?\", by default, no message is used. If no message is provided, no confirmation will be requested.\n```php\n$modelTable->action(callable $callback)->confirm(string $confirmMessage): static\n```\n\n### warning\nBy default, an action call cannot be dispatched unless at least one element from the table is selected. The method allows you to specify an arbitrary warning message that the action will not be sent. By default, the system uses the message \u201cSelect at least one element\u201d.\n```php\n$modelTable->action(callable $callback)->warning(string $warningMessage): static\n```\n\n### nullable\nDisabling the action from requiring fields to be selected means that the action can be performed without selecting any specific fields.\n```php\n$modelTable->action(callable $callback)->nullable(): static\n```\n\n## Column\n\nA controlled table column refers to a column in the table that is managed or governed in some way, typically through predefined settings or actions.\n\n```php\n$modelTable->col(string|callable $label, string|callable $field)\n\/\/OR\n$modelTable->column(string|callable $label, string|callable $field)\n```\nAdding a new column to the table involves incorporating an additional column into the existing table structure, thereby expanding the displayed data or functionality.\n\n## Column with a group of buttons\n\nFrequently, there arises a necessity to append supplementary control buttons to the table, and the table offers us the capability to do so:\n```php\n$modelTable->buttons(\n\t$buttons->success()->title('Test button')\n)\n```\nSimilarly, all buttons and their associated model dispatches adhere to the global regulations outlined in the \"Buttons\" section.\n\n## Column Modifiers\n\nTable columns support special modifiers for more convenient display.\n\n### Inputs\n\n- `input_switcher(string $on = null, string $off = null, string $label = null)` - Makes a state switch from a column.\n- `input_editable()` - Makes an editable input from a column.\n- `textarea_editable()` - Makes an editable field from a column.\n- `input_select(array $options, bool $first_default = false)` - Makes simple select.\n- `input_select(string $class, string $format = 'id:name', $where = null)` - Makes an loaded select.\n- `input_radios(array $options, bool $first_default = false)` - Makes an simple radios.\n\n### Modificators\n\n- `rating_stars()` - Generates rating stars.\n- `password_stars(string $symbol = \"\u2022\")` - Replaces data with closing characters.\n- `true_data()` -Display direct data (if it's null, it will display \"null\")\n- `uploaded_file(int $previewWidth = 30)` - Treat column data as a file link.\n- `avatar(int $previewWidth = 30)` - Treat column data as a link to an image and show it with a thumbnail.\n- `copied(callable $dataGenerator = null)` - Copied column value, will add a button to copy.\n- `copied_right(callable $dataGenerator = null)` - Copied column value, will add a copy button (on the right side).\n- `badge_number()` - Read the column data as a number and display it in the badge.\n- `badge(string $type = \"info\")` - Wrap column data value in a badge.\n- `pill(string $type = \"info\")` - Wrap column data value in a pill.\n- `yes_no()` - If your data is `true\/false`, it will display as `yes\/no`.\n- `on_off()` - If your data is `true\/false`, it will display as `on\/off`.\n- `fa_icon(int $fontSize = 22)` - Read column data as icon name.\n- `badge_tags(int $wisibleCount = 5)` - Read column data as an array and display it in badges.\n- `color_cube(int $cubeFontSize = 22)` - Read column data as color value.\n- `hide_om_mobile()` - Makes the column hidden for mobile devices.\n- `str_limit(int $num = 20)` - Limit the number of characters in a column.\n- `strip_tags()` - Strip all tags from a column value.\n- `to_html()` - Converts HTML entities to their corresponding characters.\n- `admin_resource_route(string $routeName, string $urlParamName = null, string $modelParamName = null)` - Add control buttons to a third-party resource.\n- `admin_resource_route_edit(string $routeName, string $urlParamName = null, string $modelParamName = null)` - Add third party resource edit button.\n- `admin_resource_route_show(string $routeName, string $urlParamName = null, string $modelParamName = null)` - Add info button to third party resource.\n- `to_append(callable|string $data)` - Append data at the end of the column value.\n- `to_prepend(callable|string $data)` - Add data at the beginning of the column value.\n- `to_append_link(string $icon = \"fas fa-link\", string $link = null, string $title = null)` - Treat column data as a link. Adds a navigation button.\n- `to_prepend_link(string $icon = \"fas fa-link\", string $link = null, string $title = null)` - Treat column data as a link. Add a navigation button to the beginning.\n- `number_format(int $dec = 0, string $dec_point = \".\", string $sep = \",\", string $end = \" \")` - Formats a number with group separation.\n- `money(string $symbol = \"$\")` - Format number to currency.\n- `percent(string $symbol = \"%\")` - Format number to percent.\n- `to_lang()` - Read column data of language variable.\n- `to_string()` - No matter what data is in the column, cast its type to a string.\n- `has_lang()` - Assume data has references to language variables.\n- `trim(string $characters = \" \\n\\r\\t\\v\\x00\")` - Removes spaces (or other characters) from the beginning and end of the column data.\n- `carbon_format(string $format = \"Y-m-d H:i:s\")` - Treat column data as a date and format the date.\n- `carbon_time(string $format = \"H:i:s\")` - Read column data as date and format time.\n- `explode(string $delimiter, string|int $key = 0)` - Splits a string into substrings as an array and returns the specified value.\n- `beautiful_date` - Beautiful date string\n- `beautiful_date_time` - Beautiful date and time string\n- `progress_complete(string $word = 'Complete'|false)` - Derive progress bar from value\n\n## Import to spreadsheets (.excel or .csv)\nTable description rules for the possibility of exporting this data to an `Excel` or `CSV` table.\n\n- `to_export(callable $callback = null)` - Take a column to generate in the document.\n- `only_export(callable $callback = null)` - Take column only for document generation.\n> If a column is hidden, it will also not participate in the generation.\n\n## Control\nFor full-fledged `CRUD` and not only, there is a button group component that is embedded as default tools in the table. The controller has a default delegation to all maps including them. As a result, additional control buttons appear in the map header.\n"
    },
    {
        "name": "Multi-select.md",
        "title": "Multi select",
        "content_html": "<p>This feature offers a complex multi-select data field represented by a drop-down list, allowing users to select multiple items from the list.<\/p>\n<pre><code class=\"language-php\">$form-&gt;multi_select('roles[]', 'User roles')-&gt;options(Roles::pluck('id', 'name'))\n\/\/ OR\n$form-&gt;multi_select('roles[]', 'User roles')-&gt;load(Roles::class)\n<\/code><\/pre>\n<p>The loading rules for this field function in the same way as the rules for a basic selector. This means that they follow similar principles and behaviors, ensuring consistency and familiarity for users.\nSupports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis feature offers a complex multi-select data field represented by a drop-down list, allowing users to select multiple items from the list.\n```php\n$form->multi_select('roles[]', 'User roles')->options(Roles::pluck('id', 'name'))\n\/\/ OR\n$form->multi_select('roles[]', 'User roles')->load(Roles::class)\n```\nThe loading rules for this field function in the same way as the rules for a basic selector. This means that they follow similar principles and behaviors, ensuring consistency and familiarity for users.\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Multilanguage.md",
        "title": "Multi language",
        "content_html": "<p>A component designed to clone <strong>Simple input<\/strong> elements with the addition of a prefix to the <code>input<\/code> name can be a powerful tool for managing multilingual content within your application.<\/p>\n<pre><code class=\"language-php\">$form-&gt;lang()-&gt;input('name', 'Label');\n<\/code><\/pre>\n<p>This is equivalent to the following construction:<\/p>\n<pre><code class=\"language-php\">\/\/ Since the default setting is 3 languages &quot;en&quot;, &quot;uk&quot;, &quot;ru&quot;\n$content-&gt;input('name[en]', 'Label EN');\n$content-&gt;input('name[uk]', 'Label UK');\n$content-&gt;input('name[ru]', 'Label RU');\n<\/code><\/pre>\n<p>I recommend using the <a href=\"https:\/\/packagist.org\/packages\/spatie\/laravel-translatable\">spatie\/laravel-translatable<\/a> package as this is the one I have used and only tested with. Using other packages does not guarantee the absence of bugs.<\/p>\n",
        "content_md": "\nA component designed to clone **Simple input** elements with the addition of a prefix to the `input` name can be a powerful tool for managing multilingual content within your application.\n```php\n$form->lang()->input('name', 'Label');\n```\nThis is equivalent to the following construction:\n```php\n\/\/ Since the default setting is 3 languages \"en\", \"uk\", \"ru\"\n$content->input('name[en]', 'Label EN');\n$content->input('name[uk]', 'Label UK');\n$content->input('name[ru]', 'Label RU');\n```\nI recommend using the [spatie\/laravel-translatable](https:\/\/packagist.org\/packages\/spatie\/laravel-translatable) package as this is the one I have used and only tested with. Using other packages does not guarantee the absence of bugs.\n"
    },
    {
        "name": "Navigation.md",
        "title": "Navigation",
        "content_html": "<p>To effectively organize the navigation menu of the extension and gain control over the current routes, it is necessary to define them according to your preferences for the navigation layout. This can be accomplished by specifying your desired navigation structure within the <code>app\/Admin\/Navigator.php<\/code> file, as illustrated below:<\/p>\n<pre><code class=\"language-php\">&lt;?php\nnamespace App\\Admin;\n\nuse Admin\\Core\\NavigatorExtensionProvider;\nuse Admin\\Interfaces\\ActionWorkExtensionInterface;\n\nclass Navigator extends NavigatorExtensionProvider implements ActionWorkExtensionInterface\n{\n\t\/**\n\t * @return void\n\t *\/\n\tpublic function handle() : void\n\t{\n\t\t$this-&gt;item('Users')\n\t\t\t-&gt;resource('users', UserController::class)\n\t\t\t-&gt;icon_users();\n\t\t\t\n\t\t$this-&gt;makeDefaults();\n\t\t\n\t\t$this-&gt;makeExtensions();\n\t}\n}\n<\/code><\/pre>\n<p>Upon execution, this operation will seamlessly introduce a new menu item to your application's interface and automatically generate all the essential routes required for its functionality. With this process completed, you are now fully equipped to proceed to your controller with confidence, ready to further develop or customize your application's capabilities.<\/p>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n<h2>Action<\/h2>\n<p>To incorporate a controller that does not adhere to the conventional resource structure within Laravel, you have the flexibility to establish a connection for such non-resource controllers. This allows for a more customized approach to handling specific actions or routes outside the typical CRUD operations:<\/p>\n<pre><code class=\"language-php\">public function handle(): void\n{\n\t$this-&gt;item('Categories', 'categories', 'CategoriesController@index')\n\t\t-&gt;icon_folder_open();\n}\n<\/code><\/pre>\n<h2>Resource<\/h2>\n<p>A resource in this context represents an enhanced variation of the standard Laravel resource, designed to extend its functionality. It can be seamlessly integrated into your application by utilizing the <code>resource<\/code> method.<\/p>\n<pre><code class=\"language-php\">$group-&gt;item('Users')\n\t-&gt;resource('users', UserController::class)\n\t-&gt;icon_user();\n<\/code><\/pre>\n<h2>Custom link<\/h2>\n<p>You have the capability to attach a custom link to any item in your menu, enriching it with additional functionality and enhancing user convenience.<\/p>\n<pre><code class=\"language-php\">$this-&gt;item('Google')\n\t\t-&gt;link('https:\/\/google.com')\n\t\t-&gt;targetBlank()\n\t\t-&gt;icon_500px();\n<\/code><\/pre>\n<h2>Groups<\/h2>\n<p>Frequently, there's a need to categorize various menu items together for better organization and accessibility. This requirement can be effortlessly fulfilled by employing the structure shown below, allowing for an intuitive grouping of menu items within your application's navigation:<\/p>\n<pre><code class=\"language-php\">$this-&gt;group('User group', 'group_of_users', function (NavGroup $group) {\n\t$group-&gt;item('Users')\n\t\t-&gt;resource('users', UserController::class)\n\t\t-&gt;icon_user();\n})-&gt;icon_users();\n<\/code><\/pre>\n<h2>Menu title<\/h2>\n<p>The option to utilize a title is restricted exclusively to the initial level of the menu hierarchy. Consequently, it is not permissible to employ titles within nested groups or sublevels of the menu structure. This ensures clarity and consistency in the presentation of the main navigation elements.<\/p>\n<pre><code class=\"language-php\">$this-&gt;menu_header('My menu title');\n<\/code><\/pre>\n<blockquote>\n<p>Cannot be used in groups.\n{style=&quot;warning&quot;}<\/p>\n<\/blockquote>\n<h2>Navigation templates<\/h2>\n<p>To incorporate custom templates into the navigation bar, you have the flexibility to create and utilize your own template files. Begin by crafting a unique template within the resources directory. Once established, you can seamlessly integrate this custom template into the navigation setup using the method described below:<\/p>\n<pre><code class=\"language-php\">$this-&gt;nav_bar_view('admin.nav_bar_items', array $params = [], bool $prepend = false)\n<\/code><\/pre>\n<p>Or<\/p>\n<pre><code class=\"language-php\">$this-&gt;left_nav_bar_view('admin.nav_bar_items', array $params = [])\n<\/code><\/pre>\n<p>Or with vue<\/p>\n<pre><code class=\"language-php\">$this-&gt;nav_bar_vue(TestVue::class, array $params = [], bool $prepend = false)\n<\/code><\/pre>\n<h2>Make defaults<\/h2>\n<p>The <code>makeDefaults<\/code> method is designed to streamline the process of setting up essential administrative structures within your application. By invoking this method, it automatically generates a predefined group that includes key components such as <code>Administrators<\/code>, <code>Roles<\/code>, and <code>Accesses<\/code>, thereby enhancing the system's extensibility and organizational framework.<\/p>\n<h2>Make extensions<\/h2>\n<p>The <code>makeExtensions<\/code> method is designed specifically to facilitate the creation of menu items for installed extensions. This functionality is integral for integrating and managing extensions within the application's menu system, providing a streamlined process for adding and organizing these components effectively.<\/p>\n",
        "content_md": "\nTo effectively organize the navigation menu of the extension and gain control over the current routes, it is necessary to define them according to your preferences for the navigation layout. This can be accomplished by specifying your desired navigation structure within the `app\/Admin\/Navigator.php` file, as illustrated below:\n\n```php\n<?php\nnamespace App\\Admin;\n\nuse Admin\\Core\\NavigatorExtensionProvider;\nuse Admin\\Interfaces\\ActionWorkExtensionInterface;\n\nclass Navigator extends NavigatorExtensionProvider implements ActionWorkExtensionInterface\n{\n\t\/**\n\t * @return void\n\t *\/\n\tpublic function handle() : void\n\t{\n\t\t$this->item('Users')\n\t\t\t->resource('users', UserController::class)\n\t\t\t->icon_users();\n\t\t\t\n\t\t$this->makeDefaults();\n\t\t\n\t\t$this->makeExtensions();\n\t}\n}\n```\nUpon execution, this operation will seamlessly introduce a new menu item to your application's interface and automatically generate all the essential routes required for its functionality. With this process completed, you are now fully equipped to proceed to your controller with confidence, ready to further develop or customize your application's capabilities.\n\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n\n## Action\n\nTo incorporate a controller that does not adhere to the conventional resource structure within Laravel, you have the flexibility to establish a connection for such non-resource controllers. This allows for a more customized approach to handling specific actions or routes outside the typical CRUD operations:\n```php\npublic function handle(): void\n{\n\t$this->item('Categories', 'categories', 'CategoriesController@index')\n\t\t->icon_folder_open();\n}\n```\n\n## Resource\n\nA resource in this context represents an enhanced variation of the standard Laravel resource, designed to extend its functionality. It can be seamlessly integrated into your application by utilizing the `resource` method.\n```php\n$group->item('Users')\n\t->resource('users', UserController::class)\n\t->icon_user();\n```\n\n## Custom link\n\nYou have the capability to attach a custom link to any item in your menu, enriching it with additional functionality and enhancing user convenience.\n```php\n$this->item('Google')\n\t\t->link('https:\/\/google.com')\n\t\t->targetBlank()\n\t\t->icon_500px();\n```\n\n## Groups\n\nFrequently, there's a need to categorize various menu items together for better organization and accessibility. This requirement can be effortlessly fulfilled by employing the structure shown below, allowing for an intuitive grouping of menu items within your application's navigation:\n\n```php\n$this->group('User group', 'group_of_users', function (NavGroup $group) {\n\t$group->item('Users')\n\t\t->resource('users', UserController::class)\n\t\t->icon_user();\n})->icon_users();\n```\n\n## Menu title\n\nThe option to utilize a title is restricted exclusively to the initial level of the menu hierarchy. Consequently, it is not permissible to employ titles within nested groups or sublevels of the menu structure. This ensures clarity and consistency in the presentation of the main navigation elements.\n```php\n$this->menu_header('My menu title');\n```\n> Cannot be used in groups.\n{style=\"warning\"}\n\n## Navigation templates\n\nTo incorporate custom templates into the navigation bar, you have the flexibility to create and utilize your own template files. Begin by crafting a unique template within the resources directory. Once established, you can seamlessly integrate this custom template into the navigation setup using the method described below:\n```php\n$this->nav_bar_view('admin.nav_bar_items', array $params = [], bool $prepend = false)\n```\nOr\n```php\n$this->left_nav_bar_view('admin.nav_bar_items', array $params = [])\n```\nOr with vue\n```php\n$this->nav_bar_vue(TestVue::class, array $params = [], bool $prepend = false)\n```\n\n## Make defaults\n\nThe `makeDefaults` method is designed to streamline the process of setting up essential administrative structures within your application. By invoking this method, it automatically generates a predefined group that includes key components such as `Administrators`, `Roles`, and `Accesses`, thereby enhancing the system's extensibility and organizational framework.\n\n## Make extensions\n\nThe `makeExtensions` method is designed specifically to facilitate the creation of menu items for installed extensions. This functionality is integral for integrating and managing extensions within the application's menu system, providing a streamlined process for adding and organizing these components effectively.\n"
    },
    {
        "name": "Nested-and-sortable.md",
        "title": "Nested and sortable",
        "content_html": "<p>The &quot;Drag and Drop Table&quot; component is designed to facilitate the sorting of sequences or the organization of nested models through an intuitive drag-and-drop interface. This feature is a standalone component within the delegator class <code>\\App\\Admin\\Delegates\\Nested<\/code>, offering a seamless and user-friendly method for managing data hierarchies and orderings directly from the UI.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\Nested;\n\nreturn $page-&gt;card(\n\t$card-&gt;nested(\n\t\t...\n\t)\n)\n<\/code><\/pre>\n<h3>maxDepth<\/h3>\n<p>This method is particularly useful for controlling the complexity of nested arrays or objects, ensuring that they do not exceed a specified depth. By setting a maximum depth, developers can prevent excessive resource consumption and potential performance issues associated with deeply nested structures.<\/p>\n<pre><code class=\"language-php\">$nested-&gt;maxDepth(2)\n<\/code><\/pre>\n<blockquote>\n<p>Important! For this to work, the <code>parent_id<\/code> field must be present.<\/p>\n<\/blockquote>\n<h3>parentField<\/h3>\n<p>By invoking this method, developers can explicitly define which field within the dataset acts as the reference point for establishing parent-child relationships. This capability is essential in scenarios where the structure of the data does not automatically imply the parent-child linkage, or when custom relationships need to be established that deviate from the default settings.<\/p>\n<pre><code class=\"language-php\">$nested-&gt;parentField(&quot;field_id&quot;)\n<\/code><\/pre>\n<h3>disableControls<\/h3>\n<p>The method for disabling or controlling the disabling of control buttons provides a mechanism to dynamically manage the state of user interface control elements, such as buttons. This functionality is crucial for enhancing user experience and ensuring the application behaves in a predictable manner under various conditions.<\/p>\n<pre><code class=\"language-php\">$nested-&gt;disableControls(true)\n\/\/ Or\n$nested-&gt;disableInfo(true)\n$nested-&gt;disableEdit(true)\n$nested-&gt;disableDelete(true)\n<\/code><\/pre>\n",
        "content_md": "\nThe \"Drag and Drop Table\" component is designed to facilitate the sorting of sequences or the organization of nested models through an intuitive drag-and-drop interface. This feature is a standalone component within the delegator class `\\App\\Admin\\Delegates\\Nested`, offering a seamless and user-friendly method for managing data hierarchies and orderings directly from the UI.\n```php\nuse App\\Admin\\Delegates\\Nested;\n\nreturn $page->card(\n\t$card->nested(\n\t\t...\n\t)\n)\n```\n\n### maxDepth\nThis method is particularly useful for controlling the complexity of nested arrays or objects, ensuring that they do not exceed a specified depth. By setting a maximum depth, developers can prevent excessive resource consumption and potential performance issues associated with deeply nested structures.\n```php\n$nested->maxDepth(2)\n```\n> Important! For this to work, the `parent_id` field must be present.\n\n### parentField\nBy invoking this method, developers can explicitly define which field within the dataset acts as the reference point for establishing parent-child relationships. This capability is essential in scenarios where the structure of the data does not automatically imply the parent-child linkage, or when custom relationships need to be established that deviate from the default settings.\n```php\n$nested->parentField(\"field_id\")\n```\n\n### disableControls\nThe method for disabling or controlling the disabling of control buttons provides a mechanism to dynamically manage the state of user interface control elements, such as buttons. This functionality is crucial for enhancing user experience and ensuring the application behaves in a predictable manner under various conditions.\n```php\n$nested->disableControls(true)\n\/\/ Or\n$nested->disableInfo(true)\n$nested->disableEdit(true)\n$nested->disableDelete(true)\n```\n"
    },
    {
        "name": "Number.md",
        "title": "Number",
        "content_html": "<p>This feature provides a complex field for entering integers, ensuring users can input whole numbers accurately.<\/p>\n<pre><code class=\"language-php\">$form-&gt;number('days', 'Trial days')\n<\/code><\/pre>\n",
        "content_md": "\nThis feature provides a complex field for entering integers, ensuring users can input whole numbers accurately.\n```php\n$form->number('days', 'Trial days')\n```\n"
    },
    {
        "name": "Numeric.md",
        "title": "Numeric",
        "content_html": "<p>This functionality offers a straightforward field for users to input prime and non-prime numbers, facilitating the entry of both types of numeric values.<\/p>\n<pre><code class=\"language-php\">$form-&gt;numeric('percent', 'Percent of discount')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis functionality offers a straightforward field for users to input prime and non-prime numbers, facilitating the entry of both types of numeric values.\n```php\n$form->numeric('percent', 'Percent of discount')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Page.md",
        "title": "Page",
        "content_html": "<p>The mentioned special class pertains to a distinct segment of the admin panel, functioning as the foundation where all subsequent components, as outlined below, are systematically arranged and accessible. This structure ensures an organized and cohesive interface for the admin panel's operational framework.<\/p>\n<p>By convention, a page object should be accepted as an input within the controller and subsequently passed on from the controller, but only after it has been fully populated with the necessary data. This process ensures that the controller effectively manages and transfers a complete and ready-to-use page object to its intended destination within the application.<\/p>\n<pre><code class=\"language-php\">public function index(\n\tPage $page,\n): Page {\n\treturn $page;\n}\n<\/code><\/pre>\n<p>The page object is equipped with a variety of specialized methods designed to enhance its functionality and ease of use within the application:<\/p>\n<h3>Breadcrumbs<\/h3>\n<p>This method is specifically engineered to allow for the configuration of custom breadcrumbs, providing a streamlined approach to tailor navigation trails according to the specific needs and structure of your application.<\/p>\n<pre><code class=\"language-php\">$page-&gt;breadcrumb(['Home', 'Profile']);\n<\/code><\/pre>\n<h3>Title<\/h3>\n<p>This method is specifically crafted for establishing the title of a page, enabling the precise specification of page headers that enhance navigational clarity and user orientation within the application.<\/p>\n<pre><code class=\"language-php\">$page-&gt;title('Profile');\n<\/code><\/pre>\n<h3>Icon<\/h3>\n<p>This method is meticulously designed for specifying the icon of a page, allowing for the customization of visual identifiers that are distinct from those used within the menu, thereby enriching the page's visual context and user interface experience.<\/p>\n<pre><code class=\"language-php\">$page-&gt;icon('fas fa-user');\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThe mentioned special class pertains to a distinct segment of the admin panel, functioning as the foundation where all subsequent components, as outlined below, are systematically arranged and accessible. This structure ensures an organized and cohesive interface for the admin panel's operational framework.\n\nBy convention, a page object should be accepted as an input within the controller and subsequently passed on from the controller, but only after it has been fully populated with the necessary data. This process ensures that the controller effectively manages and transfers a complete and ready-to-use page object to its intended destination within the application.\n\n```php\npublic function index(\n\tPage $page,\n): Page {\n\treturn $page;\n}\n```\n\nThe page object is equipped with a variety of specialized methods designed to enhance its functionality and ease of use within the application:\n\n### Breadcrumbs\nThis method is specifically engineered to allow for the configuration of custom breadcrumbs, providing a streamlined approach to tailor navigation trails according to the specific needs and structure of your application.\n```php\n$page->breadcrumb(['Home', 'Profile']);\n```\n### Title\nThis method is specifically crafted for establishing the title of a page, enabling the precise specification of page headers that enhance navigational clarity and user orientation within the application.\n```php\n$page->title('Profile');\n```\n### Icon\nThis method is meticulously designed for specifying the icon of a page, allowing for the customization of visual identifiers that are distinct from those used within the menu, thereby enriching the page's visual context and user interface experience.\n```php\n$page->icon('fas fa-user');\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Password.md",
        "title": "Password",
        "content_html": "<p>A simple password input field provides a secure way for users to input sensitive information. This input type typically masks characters to prevent others from viewing the entered text. It's essential for protecting user accounts and ensuring data security.<\/p>\n<pre><code class=\"language-php\">$form-&gt;password('password', 'User password')\n<\/code><\/pre>\n<p>If you require an additional confirmation field, you can utilize the helper function to add an extra layer of security. This is commonly used in scenarios where sensitive actions are involved, such as changing passwords or deleting accounts. Adding a confirmation field ensures that users perform the action intentionally, reducing the risk of accidental changes.<\/p>\n<pre><code class=\"language-php\">$form-&gt;password('password', 'User password')-&gt;confirm()\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nA simple password input field provides a secure way for users to input sensitive information. This input type typically masks characters to prevent others from viewing the entered text. It's essential for protecting user accounts and ensuring data security.\n```php\n$form->password('password', 'User password')\n```\nIf you require an additional confirmation field, you can utilize the helper function to add an extra layer of security. This is commonly used in scenarios where sensitive actions are involved, such as changing passwords or deleting accounts. Adding a confirmation field ensures that users perform the action intentionally, reducing the risk of accidental changes.\n```php\n$form->password('password', 'User password')->confirm()\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Percent.md",
        "title": "Percent",
        "content_html": "<p>This input field is specifically designed for entering numerical values with decimal points, such as percent. It allows users to input floating-point numbers accurately and efficiently.<\/p>\n<pre><code class=\"language-php\">$form-&gt;percent('percent', 'Product price percent')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis input field is specifically designed for entering numerical values with decimal points, such as percent. It allows users to input floating-point numbers accurately and efficiently.\n```php\n$form->percent('percent', 'Product price percent')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Period-statistics.md",
        "title": "Period statistics",
        "content_html": "<p>Is a separate component of the deligator class <code>\\App\\Admin\\Delegates\\StatisticPeriod<\/code>. To create an informative component for displaying statistical data based on the <code>created_at<\/code> field using the <code>StatisticPeriod<\/code> component, you can follow this example:<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\StatisticPeriod;\n\nreturn $page-&gt;card(\n\t$card-&gt;statistic_period(\n\t\t$statisticPeriod-&gt;model(User::class),\n\t\t$statisticPeriod-&gt;icon_gift(),\n\t\t$statisticPeriod-&gt;forToday(),\n\t\t$statisticPeriod-&gt;perWeek(),\n\t\t$statisticPeriod-&gt;perYear(),\n\t\t$statisticPeriod-&gt;total(),\n\t),\n)\n<\/code><\/pre>\n<p>This code sets up a <code>StatisticPeriod<\/code> component to display statistical data based on the <code>created_at<\/code> field of the <code>User<\/code> model. It includes options to display statistics for today, per week, per year, and the total count. Additionally, it sets an icon for the component. You can adjust the settings and customization according to your requirements.<\/p>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nIs a separate component of the deligator class `\\App\\Admin\\Delegates\\StatisticPeriod`. To create an informative component for displaying statistical data based on the `created_at` field using the `StatisticPeriod` component, you can follow this example:\n```php\nuse App\\Admin\\Delegates\\StatisticPeriod;\n\nreturn $page->card(\n\t$card->statistic_period(\n\t\t$statisticPeriod->model(User::class),\n\t\t$statisticPeriod->icon_gift(),\n\t\t$statisticPeriod->forToday(),\n\t\t$statisticPeriod->perWeek(),\n\t\t$statisticPeriod->perYear(),\n\t\t$statisticPeriod->total(),\n\t),\n)\n```\nThis code sets up a `StatisticPeriod` component to display statistical data based on the `created_at` field of the `User` model. It includes options to display statistics for today, per week, per year, and the total count. Additionally, it sets an icon for the component. You can adjust the settings and customization according to your requirements.\n\n\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Radios.md",
        "title": "Radios",
        "content_html": "<p>A simple field for selecting one value from a list of checkboxes provides users with the option to choose a single item from a predefined set of choices. This input method is useful when you want users to select one option from multiple available options. It ensures that only one selection is allowed, providing clarity and simplicity in user interactions.<\/p>\n<pre><code class=\"language-php\">$form-&gt;radios('roles', 'User roles')-&gt;options(Roles::pluck('id', 'name'))\n<\/code><\/pre>\n",
        "content_md": "\nA simple field for selecting one value from a list of checkboxes provides users with the option to choose a single item from a predefined set of choices. This input method is useful when you want users to select one option from multiple available options. It ensures that only one selection is allowed, providing clarity and simplicity in user interactions.\n```php\n$form->radios('roles', 'User roles')->options(Roles::pluck('id', 'name'))\n```\n"
    },
    {
        "name": "Rating.md",
        "title": "Rating",
        "content_html": "<p>A complex input in the form of rating stars allows users to rate an item by selecting a specific number of stars. This input method typically displays a set of stars, and users can click on a star to indicate their rating. It's commonly used for rating products, services, or other items where a qualitative assessment is required. The number of stars selected represents the user's rating, with more stars indicating a higher rating.<\/p>\n<pre><code class=\"language-php\">$form-&gt;rating('stars', 'Commentary stars')\n<\/code><\/pre>\n",
        "content_md": "\nA complex input in the form of rating stars allows users to rate an item by selecting a specific number of stars. This input method typically displays a set of stars, and users can click on a star to indicate their rating. It's commonly used for rating products, services, or other items where a qualitative assessment is required. The number of stars selected represents the user's rating, with more stars indicating a higher rating.\n```php\n$form->rating('stars', 'Commentary stars')\n```\n"
    },
    {
        "name": "Register-new-form-component.md",
        "title": "Register new form component",
        "content_html": "<p>To enhance your forms with additional components, you can make use of the <code>registerFormComponent<\/code> method within your <code>App\\Admin\\Config<\/code> class.\nThis involves specifying the name and the class of your input component.\nHere is an example to illustrate this process:<\/p>\n<pre><code class=\"language-php\">...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this-&gt;registerFormComponent('form_component_name', FormComponentClass::class);\n}\n...\n<\/code><\/pre>\n<p>All form components must inherit from the <code>Admin\\Components\\FormGroupComponent<\/code> class to ensure they are properly integrated and function as intended within the administrative framework.<\/p>\n",
        "content_md": "\nTo enhance your forms with additional components, you can make use of the `registerFormComponent` method within your `App\\Admin\\Config` class.\nThis involves specifying the name and the class of your input component.\nHere is an example to illustrate this process:\n\n```php\n...\npublic function boot()\n{\n\tparent::boot();\n\t\n\t$this->registerFormComponent('form_component_name', FormComponentClass::class);\n}\n...\n```\nAll form components must inherit from the `Admin\\Components\\FormGroupComponent` class to ensure they are properly integrated and function as intended within the administrative framework.\n"
    },
    {
        "name": "Screenshots.md",
        "title": "Screenshots",
        "content_html": "<h3>Administrations<\/h3>\n<p><img src=\"image.png\" alt=\"image.png\" \/><\/p>\n<h3>Administration edit<\/h3>\n<p><img src=\"image_1.png\" alt=\"image_1.png\" \/><\/p>\n<h3>Roles<\/h3>\n<p><img src=\"image_2.png\" alt=\"image_2.png\" \/><\/p>\n<h3>Permissions<\/h3>\n<p><img src=\"image_3.png\" alt=\"image_3.png\" \/><\/p>\n<h3>User panel, activity per day<\/h3>\n<p><img src=\"image_4.png\" alt=\"image_4.png\" \/><\/p>\n",
        "content_md": "\n### Administrations\n![image.png](image.png)\n\n### Administration edit\n![image_1.png](image_1.png)\n\n### Roles\n![image_2.png](image_2.png)\n\n### Permissions\n![image_3.png](image_3.png)\n\n### User panel, activity per day\n![image_4.png](image_4.png)\n"
    },
    {
        "name": "Search-form.md",
        "title": "Search form",
        "content_html": "<p>This is a form containing inputs with the signature of the search query string. Additionally, it generates custom build options. It's a separate component of the delegate class <code>\\App\\Admin\\Delegates\\SearchForm<\/code>. The delegate also includes assistants like <code>inDefault<\/code> for building ready-made tables.<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\SearchForm;\n\nreturn $page-&gt;card(\n\t$card-&gt;search_form(\n\t\t$searchForm-&gt;id(),\n\t\t...,\n\t\t$searchForm-&gt;at(),\n\t),\n)\n\/\/OR\nreturn $page-&gt;card(\n\t$card-&gt;search_form(\n\t\t$searchForm-&gt;inDefault(\n\t\t\t...,\n\t\t),\n\t),\n)\n<\/code><\/pre>\n<p>For convenient searching, a small set of inputs is supported. Each input inherits the functionality of form inputs and therefore works almost identically to them. However, there's a distinction: after the input name and its label, the third parameter indicates the type of comparison or the function that will process the builder.<\/p>\n<p>When a property or method starts with <code>in_[input method]_*<\/code>, a magical addition occurs, allowing you to specify a name in the model or property name, such as <code>in_input_name<\/code>. If this is a method, then the first parameter will be the label setting, like so: <code>-&gt;in_input_name('Name of row', string|callable $condition)<\/code>.<\/p>\n<h3>Supported fields<\/h3>\n<ul>\n<li>\n<strong>input<\/strong> - A simple text field. Default type: <code>=%<\/code>.<\/li>\n<li>\n<strong>email<\/strong> - Text field for entering email. Default type: <code>=%<\/code>.<\/li>\n<li>\n<strong>number<\/strong> - A field for selecting a number. Default type: <code>=<\/code>.<\/li>\n<li>\n<strong>numeric<\/strong> - A field for entering a number. Default type: <code>=<\/code>.<\/li>\n<li>\n<strong>amount<\/strong> - Amount input field. Default type: <code>&gt;=<\/code>.<\/li>\n<li>\n<strong>switcher<\/strong> - Switch between states. Default type: <code>=<\/code>.<\/li>\n<li>\n<strong>date_range<\/strong> - Date range selection field. Default type: <code>between<\/code>.<\/li>\n<li>\n<strong>date_time_range<\/strong> - Date and time range selection field. Default type: <code>between<\/code>.<\/li>\n<li>\n<strong>date<\/strong> - Date selection field. Default type: <code>&gt;=<\/code>.<\/li>\n<li>\n<strong>date_time<\/strong> - Date and time selection field. Default type: <code>&gt;=<\/code>.<\/li>\n<li>\n<strong>time<\/strong> - Time selection field. The default type is <code>=<\/code>.<\/li>\n<li>\n<strong>icon<\/strong> - <code>FontAwesome<\/code> icon selection field. Default type: <code>=%<\/code>.<\/li>\n<li>\n<strong>color<\/strong> - Color selection field. Default type: <code>=<\/code>.<\/li>\n<li>\n<strong>select<\/strong> - Dropdown list. Default type: <code>=<\/code>.<\/li>\n<li>\n<strong>multi_select<\/strong> - Multiple selection. Default type: <code>in<\/code>.<\/li>\n<li>\n<strong>select_tags<\/strong> - Multiple entry options. Default type: <code>in<\/code>.<\/li>\n<li>\n<strong>checks<\/strong> - Fields with checkboxes. Default type: <code>in<\/code>.<\/li>\n<li>\n<strong>radios<\/strong> - Fields with radio buttons. Default type: <code>=<\/code>.<\/li>\n<\/ul>\n<h3>Comparison Types<\/h3>\n<ul>\n<li>\n<code>=<\/code> - Equal to input value<\/li>\n<li>\n<code>!=<\/code> - Not equal to input value<\/li>\n<li>\n<code>&gt;=<\/code> - Greater than or equal to input value<\/li>\n<li>\n<code>&lt;=<\/code> - Less than or equal to input value<\/li>\n<li>\n<code>&gt;<\/code> - More input value<\/li>\n<li>\n<code>&lt;<\/code> - Less input value<\/li>\n<li>\n<code>%=<\/code> - Search starts with input value<\/li>\n<li>\n<code>=%<\/code> - The search term ends with the input value<\/li>\n<li>\n<code>%=%<\/code> - Search may contain an input value<\/li>\n<li>\n<code>null<\/code> - Lookup must be <code>null<\/code>\n<\/li>\n<li>\n<code>not_null<\/code> - Search must not be <code>null<\/code>\n<\/li>\n<li>\n<code>in<\/code> - Search must contain one of the options<\/li>\n<li>\n<code>not_in<\/code> - Search must not contain any of the options<\/li>\n<li>\n<code>between<\/code> - The search must be between the input value<\/li>\n<li>\n<code>not_between<\/code> - The search must not be between the input value<\/li>\n<\/ul>\n<h3>Custom comparison<\/h3>\n<p>You can define your own input behavior by passing a Closure instead of the comparison type:<\/p>\n<pre><code class=\"language-php\">$card-&gt;search_form(\n\t$searchForm-&gt;input('name', 'Search by name', function ($builder, $value, $key) {\n\t\treturn $builder-&gt;where('name', 'like', '%' . $value . '%');\n\t}),\n)\n<\/code><\/pre>\n",
        "content_md": "\nThis is a form containing inputs with the signature of the search query string. Additionally, it generates custom build options. It's a separate component of the delegate class `\\App\\Admin\\Delegates\\SearchForm`. The delegate also includes assistants like `inDefault` for building ready-made tables.\n```php\nuse App\\Admin\\Delegates\\SearchForm;\n\nreturn $page->card(\n\t$card->search_form(\n\t\t$searchForm->id(),\n\t\t...,\n\t\t$searchForm->at(),\n\t),\n)\n\/\/OR\nreturn $page->card(\n\t$card->search_form(\n\t\t$searchForm->inDefault(\n\t\t\t...,\n\t\t),\n\t),\n)\n```\nFor convenient searching, a small set of inputs is supported. Each input inherits the functionality of form inputs and therefore works almost identically to them. However, there's a distinction: after the input name and its label, the third parameter indicates the type of comparison or the function that will process the builder.\n\nWhen a property or method starts with `in_[input method]_*`, a magical addition occurs, allowing you to specify a name in the model or property name, such as `in_input_name`. If this is a method, then the first parameter will be the label setting, like so: `->in_input_name('Name of row', string|callable $condition)`.\n\n### Supported fields\n\n- **input** - A simple text field. Default type: `=%`.\n- **email** - Text field for entering email. Default type: `=%`.\n- **number** - A field for selecting a number. Default type: `=`.\n- **numeric** - A field for entering a number. Default type: `=`.\n- **amount** - Amount input field. Default type: `>=`.\n- **switcher** - Switch between states. Default type: `=`.\n- **date_range** - Date range selection field. Default type: `between`.\n- **date_time_range** - Date and time range selection field. Default type: `between`.\n- **date** - Date selection field. Default type: `>=`.\n- **date_time** - Date and time selection field. Default type: `>=`.\n- **time** - Time selection field. The default type is `=`.\n- **icon** - `FontAwesome` icon selection field. Default type: `=%`.\n- **color** - Color selection field. Default type: `=`.\n- **select** - Dropdown list. Default type: `=`.\n- **multi_select** - Multiple selection. Default type: `in`.\n- **select_tags** - Multiple entry options. Default type: `in`.\n- **checks** - Fields with checkboxes. Default type: `in`.\n- **radios** - Fields with radio buttons. Default type: `=`.\n\n### Comparison Types\n\n- `=` - Equal to input value\n- `!=` - Not equal to input value\n- `>=` - Greater than or equal to input value\n- `<=` - Less than or equal to input value\n- `>` - More input value\n- `<` - Less input value\n- `%=` - Search starts with input value\n- `=%` - The search term ends with the input value\n- `%=%` - Search may contain an input value\n- `null` - Lookup must be `null`\n- `not_null` - Search must not be `null`\n- `in` - Search must contain one of the options\n- `not_in` - Search must not contain any of the options\n- `between` - The search must be between the input value\n- `not_between` - The search must not be between the input value\n\n### Custom comparison\nYou can define your own input behavior by passing a Closure instead of the comparison type:\n```php\n$card->search_form(\n\t$searchForm->input('name', 'Search by name', function ($builder, $value, $key) {\n\t\treturn $builder->where('name', 'like', '%' . $value . '%');\n\t}),\n)\n```\n"
    },
    {
        "name": "Select-tags.md",
        "title": "Select tags",
        "content_html": "<p>A complex input for entering an unlimited number of sequential data allows users to input multiple data entries in a structured and sequential manner.<\/p>\n<pre><code class=\"language-php\">$form-&gt;select_tags('tags', 'Post tags')\n\/\/ OR\n$form-&gt;select_tags('tags', 'Post tags')-&gt;options(MyTags::pluck('name', 'id'))\n\/\/ OR\n$form-&gt;select_tags('tags', 'Post tags')-&gt;load(MyTags::class)\n<\/code><\/pre>\n<p>The loading rules for this field function in the same way as the rules for a basic selector. This means that they follow similar principles and behaviors, ensuring consistency and familiarity for users.\nSupports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nA complex input for entering an unlimited number of sequential data allows users to input multiple data entries in a structured and sequential manner.\n```php\n$form->select_tags('tags', 'Post tags')\n\/\/ OR\n$form->select_tags('tags', 'Post tags')->options(MyTags::pluck('name', 'id'))\n\/\/ OR\n$form->select_tags('tags', 'Post tags')->load(MyTags::class)\n```\nThe loading rules for this field function in the same way as the rules for a basic selector. This means that they follow similar principles and behaviors, ensuring consistency and familiarity for users.\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Select.md",
        "title": "Select",
        "content_html": "<p>A complex drop-down list with sorting functionality provides users with a list of options to choose from, with the added feature of sorting the options. This type of input field typically displays a list of items in a dropdown menu, allowing users to select one option. However, it also includes the ability to sort the items within the dropdown menu, making it easier for users to find and select the desired option. Sorting functionality can be based on various criteria such as alphabetical order, numerical order, or custom sorting rules. This enhances the usability of the dropdown list, especially when dealing with a large number of options.<\/p>\n<pre><code class=\"language-php\">$form-&gt;select('city_id', 'User city')-&gt;options(City::pluck('id', 'name'))\n\/\/ OR\n$form-&gt;select('city_id', 'User city')-&gt;load(City::class)\n<\/code><\/pre>\n<p>It is also possible to link downloads to each other if you have multiple selectors that can depend on each other. For example, selecting a city based on the selected country:<\/p>\n<pre><code class=\"language-php\">$form-&gt;select('country_id', 'User country')-&gt;load(Country::class)\n    \n$form-&gt;select('city_id', 'User city')-&gt;load(City::class, '{id}) {name}', function ($builder, array $form) {\n\treturn $builder-&gt;where('country_id', $form['country_id'] ?? 0);\n})\n\/\/ OR\n$form-&gt;select('city_id', 'User city')-&gt;load(\n\tCity::class, \n\t'{id}) {name}', \n\tfn ($q, array $form) =&gt; $q-&gt;where('country_id', $form['country_id'] ?? 0)\n)\n<\/code><\/pre>\n<p>Option format seated like variables. Format <code>{id}) {name}<\/code> show some sing like that <code>5) test name<\/code>. Where <code>id<\/code> and <code>name<\/code> is fields of model. You can set also first level of relations like this <code>{id}) {name} {relationName.relationField}<\/code>.<\/p>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nA complex drop-down list with sorting functionality provides users with a list of options to choose from, with the added feature of sorting the options. This type of input field typically displays a list of items in a dropdown menu, allowing users to select one option. However, it also includes the ability to sort the items within the dropdown menu, making it easier for users to find and select the desired option. Sorting functionality can be based on various criteria such as alphabetical order, numerical order, or custom sorting rules. This enhances the usability of the dropdown list, especially when dealing with a large number of options.\n```php\n$form->select('city_id', 'User city')->options(City::pluck('id', 'name'))\n\/\/ OR\n$form->select('city_id', 'User city')->load(City::class)\n```\nIt is also possible to link downloads to each other if you have multiple selectors that can depend on each other. For example, selecting a city based on the selected country:\n```php\n$form->select('country_id', 'User country')->load(Country::class)\n    \n$form->select('city_id', 'User city')->load(City::class, '{id}) {name}', function ($builder, array $form) {\n\treturn $builder->where('country_id', $form['country_id'] ?? 0);\n})\n\/\/ OR\n$form->select('city_id', 'User city')->load(\n\tCity::class, \n\t'{id}) {name}', \n\tfn ($q, array $form) => $q->where('country_id', $form['country_id'] ?? 0)\n)\n```\nOption format seated like variables. Format `{id}) {name}` show some sing like that `5) test name`. Where `id` and `name` is fields of model. You can set also first level of relations like this `{id}) {name} {relationName.relationField}`.\n\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Setting.md",
        "title": "Settings",
        "content_html": "<p>This document outlines the various configuration options available for the Admin Panel package. These settings allow you to customize the appearance, behavior, and functionality of the admin panel to suit your application's needs.<\/p>\n<h2>Settings descriptions<\/h2>\n<h3>Theme<\/h3>\n<ul>\n<li>\n<code>theme<\/code>: Specifies the theme of the admin panel.\n<ul>\n<li>Type: <code>string<\/code>\n<\/li>\n<li>Default: <code>admin-lte<\/code>\n<\/li>\n<li>Description: Choose the visual theme for the admin panel interface. Currently, <code>admin-lte<\/code> is the default theme.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Mode Settings<\/h3>\n<ul>\n<li>\n<p><code>dark_mode<\/code>: Enables or disables the dark mode by default for the administrator.<\/p>\n<ul>\n<li>Type: <code>boolean<\/code>\n<\/li>\n<li>Default: <code>true<\/code>\n<\/li>\n<li>Description: When set to <code>true<\/code>, the admin panel will use dark mode as the default theme.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><code>lang_mode<\/code>: Enables or disables language mode for the admin panel.<\/p>\n<ul>\n<li>Type: <code>boolean<\/code>\n<\/li>\n<li>Default: <code>true<\/code>\n<\/li>\n<li>Description: Turn on this option to enable language support in the admin panel.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Languages<\/h3>\n<ul>\n<li>\n<code>languages<\/code>: Defines the languages supported by the admin panel.\n<ul>\n<li>Type: <code>array<\/code>\n<\/li>\n<li>Default: <code>['en', 'ua', 'ru']<\/code>\n<\/li>\n<li>Description: List of language codes that the admin panel supports for localization.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Home Route<\/h3>\n<ul>\n<li>\n<code>home-route<\/code>: Specifies the default home route for the admin panel.\n<ul>\n<li>Type: <code>string<\/code>\n<\/li>\n<li>Default: <code>admin.dashboard<\/code>\n<\/li>\n<li>Description: Define the route name that users are redirected to after logging into the admin panel.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Application Namespace<\/h3>\n<ul>\n<li>\n<code>app_namespace<\/code>: The namespace for the Admin application.\n<ul>\n<li>Type: <code>string<\/code>\n<\/li>\n<li>Default: <code>App\\Admin<\/code>\n<\/li>\n<li>Description: Specify the namespace used by the Admin application classes.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Paths<\/h3>\n<ul>\n<li>\n<code>paths<\/code>: Directories used by the Admin package.\n<ul>\n<li>Type: <code>array<\/code>\n<\/li>\n<li>Description: Configure the application and view directories for the Admin package.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Route Configuration<\/h3>\n<ul>\n<li>\n<code>route<\/code>: Global route configurations for the admin panel.\n<ul>\n<li>Type: <code>array<\/code>\n<\/li>\n<li>Description: Includes settings for domain, prefix, and name for admin panel routes.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Default Actions<\/h3>\n<ul>\n<li>\n<code>action<\/code>: Defines default actions for the admin panel.\n<ul>\n<li>Type: <code>array<\/code>\n<\/li>\n<li>Description: Map actions to specific controllers and methods.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Two-Factor Authentication (2FA)<\/h3>\n<ul>\n<li>\n<code>force-2fa<\/code>: Enforces Two-Factor Authentication for all admin users.\n<ul>\n<li>Type: <code>boolean<\/code>\n<\/li>\n<li>Default: <code>false<\/code>\n<\/li>\n<li>Description: When enabled, all users must use 2FA to access the admin panel.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Authentication<\/h3>\n<ul>\n<li>\n<code>auth<\/code>: Authentication settings for admin pages.\n<ul>\n<li>Type: <code>array<\/code>\n<\/li>\n<li>Description: Configure authentication guards and providers for the admin panel.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Upload Settings<\/h3>\n<ul>\n<li>\n<code>upload<\/code>: Configuration for file uploads in the admin panel.\n<ul>\n<li>Type: <code>array<\/code>\n<\/li>\n<li>Description: Set up the disk and directory paths for image and file uploads.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Disks<\/h3>\n<ul>\n<li>\n<code>disks<\/code>: Filesystem disks used by the admin panel.\n<ul>\n<li>Type: <code>array<\/code>\n<\/li>\n<li>Description: Configure storage disks for admin file uploads.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Footer<\/h3>\n<ul>\n<li>\n<code>footer<\/code>: Custom HTML content for the admin panel footer.\n<ul>\n<li>Type: <code>string<\/code>\n<\/li>\n<li>Description: Allows for custom branding or copyright information in the footer.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n",
        "content_md": "\nThis document outlines the various configuration options available for the Admin Panel package. These settings allow you to customize the appearance, behavior, and functionality of the admin panel to suit your application's needs.\n\n## Settings descriptions\n\n### Theme\n\n- `theme`: Specifies the theme of the admin panel.\n    - Type: `string`\n    - Default: `admin-lte`\n    - Description: Choose the visual theme for the admin panel interface. Currently, `admin-lte` is the default theme.\n\n### Mode Settings\n\n- `dark_mode`: Enables or disables the dark mode by default for the administrator.\n    - Type: `boolean`\n    - Default: `true`\n    - Description: When set to `true`, the admin panel will use dark mode as the default theme.\n\n- `lang_mode`: Enables or disables language mode for the admin panel.\n    - Type: `boolean`\n    - Default: `true`\n    - Description: Turn on this option to enable language support in the admin panel.\n\n### Languages\n\n- `languages`: Defines the languages supported by the admin panel.\n    - Type: `array`\n    - Default: `['en', 'ua', 'ru']`\n    - Description: List of language codes that the admin panel supports for localization.\n\n### Home Route\n\n- `home-route`: Specifies the default home route for the admin panel.\n    - Type: `string`\n    - Default: `admin.dashboard`\n    - Description: Define the route name that users are redirected to after logging into the admin panel.\n\n### Application Namespace\n\n- `app_namespace`: The namespace for the Admin application.\n    - Type: `string`\n    - Default: `App\\Admin`\n    - Description: Specify the namespace used by the Admin application classes.\n\n### Paths\n\n- `paths`: Directories used by the Admin package.\n    - Type: `array`\n    - Description: Configure the application and view directories for the Admin package.\n\n### Route Configuration\n\n- `route`: Global route configurations for the admin panel.\n    - Type: `array`\n    - Description: Includes settings for domain, prefix, and name for admin panel routes.\n\n### Default Actions\n\n- `action`: Defines default actions for the admin panel.\n    - Type: `array`\n    - Description: Map actions to specific controllers and methods.\n\n### Two-Factor Authentication (2FA)\n\n- `force-2fa`: Enforces Two-Factor Authentication for all admin users.\n    - Type: `boolean`\n    - Default: `false`\n    - Description: When enabled, all users must use 2FA to access the admin panel.\n\n### Authentication\n\n- `auth`: Authentication settings for admin pages.\n    - Type: `array`\n    - Description: Configure authentication guards and providers for the admin panel.\n\n### Upload Settings\n\n- `upload`: Configuration for file uploads in the admin panel.\n    - Type: `array`\n    - Description: Set up the disk and directory paths for image and file uploads.\n\n### Disks\n\n- `disks`: Filesystem disks used by the admin panel.\n    - Type: `array`\n    - Description: Configure storage disks for admin file uploads.\n\n### Footer\n\n- `footer`: Custom HTML content for the admin panel footer.\n    - Type: `string`\n    - Description: Allows for custom branding or copyright information in the footer.\n"
    },
    {
        "name": "Simple-input-field.md",
        "title": "Input",
        "content_html": "<p>This input field provides a simple and straightforward way for users to enter textual information. It is commonly used for entering short text such as names, descriptions, or comments.<\/p>\n<pre><code class=\"language-php\">$form-&gt;input('login', 'Login')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThis input field provides a simple and straightforward way for users to enter textual information. It is commonly used for entering short text such as names, descriptions, or comments.\n```php\n$form->input('login', 'Login')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Simple-table.md",
        "title": "Simple table",
        "content_html": "<p>Is a separate component of the deligator class <code>\\App\\Admin\\Delegates\\Table<\/code>. To create a table with arbitrary columns and rows using the <code>Table<\/code> component, you can follow either of these examples:<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;table(\n\t\t$table-&gt;rows([\n\t\t\t'Left row' =&gt; 'Right row'\n\t\t]),\n\t),\n)\n<\/code><\/pre>\n<p>OR<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;table(\n\t\t$table-&gt;rows([\n\t\t\t['First row line 1', 'Second row line 1', 'Third row line 1'],\n\t\t\t['First row line 2', 'Second row line 2', 'Third row line 2'],\n\t\t]),\n\t),\n)\n<\/code><\/pre>\n<p>These examples demonstrate how to set up a table with arbitrary columns and rows using the Table component in Bfg Admin. You can customize the data and structure of the table as needed for your application.<\/p>\n",
        "content_md": "\nIs a separate component of the deligator class `\\App\\Admin\\Delegates\\Table`. To create a table with arbitrary columns and rows using the `Table` component, you can follow either of these examples:\n```php\nreturn $page->card(\n\t$card->table(\n\t\t$table->rows([\n\t\t\t'Left row' => 'Right row'\n\t\t]),\n\t),\n)\n```\nOR\n```php\nreturn $page->card(\n\t$card->table(\n\t\t$table->rows([\n\t\t\t['First row line 1', 'Second row line 1', 'Third row line 1'],\n\t\t\t['First row line 2', 'Second row line 2', 'Third row line 2'],\n\t\t]),\n\t),\n)\n```\nThese examples demonstrate how to set up a table with arbitrary columns and rows using the Table component in Bfg Admin. You can customize the data and structure of the table as needed for your application.\n"
    },
    {
        "name": "Slider.md",
        "title": "Slider",
        "content_html": "<p>A slider component is a user interface element that allows users to select a value from a range by moving a draggable handle along a track.<\/p>\n<pre><code class=\"language-php\">$form-&gt;slider('complete', 'Complete proccess')-&gt;min(1)-&gt;max(100)-&gt;step(1)\n<\/code><\/pre>\n",
        "content_md": "\nA slider component is a user interface element that allows users to select a value from a range by moving a draggable handle along a track.\n```php\n$form->slider('complete', 'Complete proccess')->min(1)->max(100)->step(1)\n```\n"
    },
    {
        "name": "Small-box.md",
        "title": "Small box",
        "content_html": "<p>Is a separate component of the deligator class <code>\\App\\Admin\\Delegates\\SmallBox<\/code>. To create a widget suitable for displaying statistics data, such as the number of users, using the <code>SmallBox<\/code> component, you can follow this example:<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\SmallBox;\n\nreturn $page-&gt;card(\n\t$card-&gt;small_box(\n\t\t$alert-&gt;warningType(),\n\t\t$alert-&gt;icon_users(),\n\t\t$alert-&gt;title('Total users'),\n\t\t$alert-&gt;body(User::count()),\n\t),\n)\n<\/code><\/pre>\n<p>This code sets up a <code>SmallBox<\/code> component to display the total number of users in a warning-colored box with a user icon, along with a custom title. You can adjust the box type, icon, title, and body according to your specific statistics data requirements.<\/p>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nIs a separate component of the deligator class `\\App\\Admin\\Delegates\\SmallBox`. To create a widget suitable for displaying statistics data, such as the number of users, using the `SmallBox` component, you can follow this example:\n```php\nuse App\\Admin\\Delegates\\SmallBox;\n\nreturn $page->card(\n\t$card->small_box(\n\t\t$alert->warningType(),\n\t\t$alert->icon_users(),\n\t\t$alert->title('Total users'),\n\t\t$alert->body(User::count()),\n\t),\n)\n```\nThis code sets up a `SmallBox` component to display the total number of users in a warning-colored box with a user icon, along with a custom title. You can adjust the box type, icon, title, and body according to your specific statistics data requirements.\n\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Sortable-timeline-table.md",
        "title": "Sortable timeline table",
        "content_html": "<p>Is a separate component of the deligator class <code>\\App\\Admin\\Delegates\\Timeline<\/code>. To create a timeline table with fully customizable content using the <code>Timeline<\/code> component, you can use the following example:<\/p>\n<pre><code class=\"language-php\">use App\\Admin\\Delegates\\Timeline;\n\nreturn $page-&gt;card(\n\t$card-&gt;timeline(\n\t\t$timeline-&gt;model(admin()-&gt;logs()),\n\t\t$timeline-&gt;set_title(function (LteLog $log) {\n\t\t\treturn $log-&gt;title;\n\t\t}),\n\t\t$timeline-&gt;set_body(function (LteLog $log) {\n\t\t\treturn $log-&gt;uri;\n\t\t}),    \n\t),\n)\n<\/code><\/pre>\n<p>In this example, you customize the title and body content for each timeline item using callback functions provided by the <code>set_title<\/code> and <code>set_body<\/code> methods of the <code>Timeline<\/code> component. Adjust the callback functions according to your specific requirements and data model.<\/p>\n",
        "content_md": "\nIs a separate component of the deligator class `\\App\\Admin\\Delegates\\Timeline`. To create a timeline table with fully customizable content using the `Timeline` component, you can use the following example:\n```php\nuse App\\Admin\\Delegates\\Timeline;\n\nreturn $page->card(\n\t$card->timeline(\n\t\t$timeline->model(admin()->logs()),\n\t\t$timeline->set_title(function (LteLog $log) {\n\t\t\treturn $log->title;\n\t\t}),\n\t\t$timeline->set_body(function (LteLog $log) {\n\t\t\treturn $log->uri;\n\t\t}),    \n\t),\n)\n```\nIn this example, you customize the title and body content for each timeline item using callback functions provided by the `set_title` and `set_body` methods of the `Timeline` component. Adjust the callback functions according to your specific requirements and data model.\n"
    },
    {
        "name": "Switcher.md",
        "title": "Switcher",
        "content_html": "<p>A complex switch between 1 and 0 provides users with a versatile input mechanism to toggle between two states, typically represented by the values 1 and 0. This type of switch may offer additional features and functionality compared to a standard binary switch.<\/p>\n<pre><code class=\"language-php\">$form-&gt;switcher('active', 'Post active')\n<\/code><\/pre>\n",
        "content_md": "\nA complex switch between 1 and 0 provides users with a versatile input mechanism to toggle between two states, typically represented by the values 1 and 0. This type of switch may offer additional features and functionality compared to a standard binary switch.\n```php\n$form->switcher('active', 'Post active')\n```\n"
    },
    {
        "name": "Tabs.md",
        "title": "Tabs",
        "content_html": "<p>The component in question is designed to enhance webpage layout by enabling the distribution of elements in a compact and organized manner through the use of separate tabs. This tabbed interface component allows for the segregation of content into distinct sections that are easily navigable, making it possible to present a larger amount of information in a limited space without overwhelming the user.<\/p>\n<p>By integrating this component, developers can significantly improve the user experience on webpages by grouping related content under individual tabs. Each tab acts as a clickable element, displaying its corresponding content without the need to navigate away from the page. This method of content organization not only simplifies the interface but also enhances the aesthetic appeal of the page, making information more accessible and easier to digest for users.<\/p>\n<p>The tabbed interface is particularly useful in applications where information needs to be categorized or when multiple perspectives of data need to be presented simultaneously. For example, in a product detail page, tabs can be used to separate specifications, reviews, and FAQs, thereby allowing users to quickly switch between different types of information without scrolling through long pages.<\/p>\n<p>Furthermore, this component is designed with flexibility in mind, offering customizable options for the appearance and behavior of the tabs. Developers can adjust the style, transition effects, and layout of the tabs to match the overall design of the webpage, ensuring a cohesive and branded user experience.<\/p>\n<p>In summary, the tabbed interface component serves as a powerful tool for web developers seeking to create more engaging, structured, and user-friendly webpages. By facilitating the efficient organization of content into discrete, easily navigable tabs, this component not only enhances the presentation of information but also contributes to a more intuitive and satisfying user interaction with the webpage.<\/p>\n<pre><code class=\"language-php\">return $page-&gt;card(\n\t$card-&gt;tab(\n\t\t$tab-&gt;title('General')-&gt;icon_globe(),\n\t\t...\n\t)\n)\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nThe component in question is designed to enhance webpage layout by enabling the distribution of elements in a compact and organized manner through the use of separate tabs. This tabbed interface component allows for the segregation of content into distinct sections that are easily navigable, making it possible to present a larger amount of information in a limited space without overwhelming the user.\n\nBy integrating this component, developers can significantly improve the user experience on webpages by grouping related content under individual tabs. Each tab acts as a clickable element, displaying its corresponding content without the need to navigate away from the page. This method of content organization not only simplifies the interface but also enhances the aesthetic appeal of the page, making information more accessible and easier to digest for users.\n\nThe tabbed interface is particularly useful in applications where information needs to be categorized or when multiple perspectives of data need to be presented simultaneously. For example, in a product detail page, tabs can be used to separate specifications, reviews, and FAQs, thereby allowing users to quickly switch between different types of information without scrolling through long pages.\n\nFurthermore, this component is designed with flexibility in mind, offering customizable options for the appearance and behavior of the tabs. Developers can adjust the style, transition effects, and layout of the tabs to match the overall design of the webpage, ensuring a cohesive and branded user experience.\n\nIn summary, the tabbed interface component serves as a powerful tool for web developers seeking to create more engaging, structured, and user-friendly webpages. By facilitating the efficient organization of content into discrete, easily navigable tabs, this component not only enhances the presentation of information but also contributes to a more intuitive and satisfying user interaction with the webpage.\n```php\nreturn $page->card(\n\t$card->tab(\n\t\t$tab->title('General')->icon_globe(),\n\t\t...\n\t)\n)\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "Textarea.md",
        "title": "Textarea",
        "content_html": "<p>A simple field for entering multi-line data provides users with a straightforward and intuitive interface for inputting text or data that spans multiple lines.<\/p>\n<pre><code class=\"language-php\">$form-&gt;textarea('about', 'User about')\n<\/code><\/pre>\n",
        "content_md": "\nA simple field for entering multi-line data provides users with a straightforward and intuitive interface for inputting text or data that spans multiple lines.\n```php\n$form->textarea('about', 'User about')\n```\n"
    },
    {
        "name": "Time.md",
        "title": "Time",
        "content_html": "<p>A complex field with a drop-down interface for selecting the time provides users with a user-friendly and intuitive way to input time values.<\/p>\n<pre><code class=\"language-php\">$form-&gt;time('run_every', 'User schedule')\n<\/code><\/pre>\n<p>Supports the icon methods of the <code>FontAwesome<\/code> library. Available list of links to icons can be seen in <a href=\"https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php\">file at link<\/a>.<\/p>\n",
        "content_md": "\nA complex field with a drop-down interface for selecting the time provides users with a user-friendly and intuitive way to input time values.\n```php\n$form->time('run_every', 'User schedule')\n```\nSupports the icon methods of the `FontAwesome` library. Available list of links to icons can be seen in [file at link](https:\/\/github.com\/bfg-s\/admin\/blob\/master\/src\/Traits\/FontAwesome.php).\n"
    },
    {
        "name": "starter-topic.md",
        "title": "About BFG Admin",
        "content_html": "<p align=\"center\">\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin\"><img src=\"https:\/\/img.shields.io\/packagist\/dt\/bfg\/admin\" alt=\"Total Downloads\" \/><\/a>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin\"><img src=\"https:\/\/img.shields.io\/packagist\/v\/bfg\/admin\" alt=\"Latest Stable Version\" \/><\/a>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin\"><img src=\"https:\/\/img.shields.io\/packagist\/l\/bfg\/admin\" alt=\"License\" \/><\/a>\n<\/p>\n<p>Bfg Admin offers an efficient and user-friendly package for Laravel applications, streamlining the creation of an admin panel with comprehensive functionalities. It is designed to facilitate the rapid integration of CRUD operations (Create, Read, Update, Delete) for your models, alongside advanced features such as customizable filters, search capabilities, and data sorting options.<\/p>\n<h2>Key Features<\/h2>\n<h3>Flexible Configuration<\/h3>\n<p>Bfg Admin excels in providing extensive configurability for each model, allowing for detailed customization of field displays, validation rules, and model relationships. This ensures that the administrative interface is tailored to meet the specific requirements of your project.<\/p>\n<h3>User-friendly Interface<\/h3>\n<p>The hallmark of Bfg Admin is its ease of use, making the construction of an administrative panel both straightforward and efficient. It simplifies creating, editing, and deleting entries, offering significant customization in appearance and functionality to enhance the user experience.<\/p>\n<h3>Automated Code Generation<\/h3>\n<p>A significant advantage of Bfg Admin is its automated generation of controllers, view templates, and routes for your models. This feature not only saves valuable development time but also streamlines the development process, making it more efficient and less prone to errors.<\/p>\n<h3>Seamless Laravel Integration<\/h3>\n<p>Fully integrated with Laravel, Bfg Admin leverages the framework's robust features, including migrations, user authorization, and extensibility. This seamless integration enhances the functionality and reliability of the admin panel, making it a robust tool for developers.<\/p>\n<h2>Why Choose Bfg Admin?<\/h2>\n<p>Bfg Admin is the go-to choice for developers needing a powerful, ready-made admin panel for their project. It allows you to focus on core development tasks without the overhead of building and configuring an administrative interface from scratch. By providing a blend of flexibility, convenience, and efficiency, Bfg Admin is an invaluable tool for accelerating project development and achieving professional results.<\/p>\n<p>In conclusion, Bfg Admin is an ideal solution for Laravel developers seeking a comprehensive, easy-to-use admin panel. It offers a perfect blend of features that save time and resources, making it an essential tool for enhancing the functionality of your Laravel application.<\/p>\n",
        "content_md": "\n<p align=\"center\">\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin\"><img src=\"https:\/\/img.shields.io\/packagist\/dt\/bfg\/admin\" alt=\"Total Downloads\" \/><\/a>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin\"><img src=\"https:\/\/img.shields.io\/packagist\/v\/bfg\/admin\" alt=\"Latest Stable Version\" \/><\/a>\n<a href=\"https:\/\/packagist.org\/packages\/bfg\/admin\"><img src=\"https:\/\/img.shields.io\/packagist\/l\/bfg\/admin\" alt=\"License\" \/><\/a>\n<\/p>\n\nBfg Admin offers an efficient and user-friendly package for Laravel applications, streamlining the creation of an admin panel with comprehensive functionalities. It is designed to facilitate the rapid integration of CRUD operations (Create, Read, Update, Delete) for your models, alongside advanced features such as customizable filters, search capabilities, and data sorting options.\n\n## Key Features\n\n### Flexible Configuration\n\nBfg Admin excels in providing extensive configurability for each model, allowing for detailed customization of field displays, validation rules, and model relationships. This ensures that the administrative interface is tailored to meet the specific requirements of your project.\n\n### User-friendly Interface\n\nThe hallmark of Bfg Admin is its ease of use, making the construction of an administrative panel both straightforward and efficient. It simplifies creating, editing, and deleting entries, offering significant customization in appearance and functionality to enhance the user experience.\n\n### Automated Code Generation\n\nA significant advantage of Bfg Admin is its automated generation of controllers, view templates, and routes for your models. This feature not only saves valuable development time but also streamlines the development process, making it more efficient and less prone to errors.\n\n### Seamless Laravel Integration\n\nFully integrated with Laravel, Bfg Admin leverages the framework's robust features, including migrations, user authorization, and extensibility. This seamless integration enhances the functionality and reliability of the admin panel, making it a robust tool for developers.\n\n## Why Choose Bfg Admin?\n\nBfg Admin is the go-to choice for developers needing a powerful, ready-made admin panel for their project. It allows you to focus on core development tasks without the overhead of building and configuring an administrative interface from scratch. By providing a blend of flexibility, convenience, and efficiency, Bfg Admin is an invaluable tool for accelerating project development and achieving professional results.\n\nIn conclusion, Bfg Admin is an ideal solution for Laravel developers seeking a comprehensive, easy-to-use admin panel. It offers a perfect blend of features that save time and resources, making it an essential tool for enhancing the functionality of your Laravel application.\n"
    }
]
